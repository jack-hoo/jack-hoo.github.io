<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>归并排序</title>
      <link href="/2018/04/01/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/01/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FileName: Client</span></span><br><span class="line"><span class="comment"> * Author:   shugan</span></span><br><span class="line"><span class="comment"> * Date:     2018/4/1 15:50</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> MegerSort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shugan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018/4/1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">23</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">11</span>&#125;;</span><br><span class="line">        client.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];<span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            sort(arr, left, mid, temp);<span class="comment">//左边归并排序，使得左子序列有序</span></span><br><span class="line">            sort(arr, mid + <span class="number">1</span>, right, temp);<span class="comment">//右边归并排序，使得右子序列有序</span></span><br><span class="line">            merge(arr, left, mid, right, temp);<span class="comment">//将两个有序子数组合并操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = left;<span class="comment">//左序列指针</span></span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">//右序列指针</span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//临时数组指针</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">                temp[t++] = arr[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[t++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123;<span class="comment">//将左边剩余元素填充进temp中</span></span><br><span class="line">            temp[t++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= right) &#123;<span class="comment">//将右序列剩余元素填充进temp中</span></span><br><span class="line">            temp[t++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将temp中的元素全部拷贝到原数组中</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            arr[left++] = temp[t++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。<br>java中Arrays.sort()采用了一种名为TimSort的排序算法，就是归并排序的优化版本。<br>每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。<br>而且，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM的分区管理</title>
      <link href="/2018/03/30/JVM%E7%9A%84%E5%88%86%E5%8C%BA%E7%AE%A1%E7%90%86/"/>
      <url>/2018/03/30/JVM%E7%9A%84%E5%88%86%E5%8C%BA%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="JVM分区用途"><a href="#JVM分区用途" class="headerlink" title="JVM分区用途:"></a>JVM分区用途:</h2><h2 id="永久存储区-Permanent-Space"><a href="#永久存储区-Permanent-Space" class="headerlink" title="永久存储区(Permanent Space):"></a>永久存储区(Permanent Space):</h2><p>永久存储区是JVM的驻留内存,用于存放JDK自身所携带的Class,Interface的元数据,<br>应用服务器允许必须的Class,Interface的元数据和Java程序运行时需要的Class和Interface的元数据。<br>被装载进此区域的数据是不会被垃圾回收器回收掉的,关闭JVM时,释放此区域所控制的内存。 </p><h2 id="堆空间-The-Heap-Space"><a href="#堆空间-The-Heap-Space" class="headerlink" title="堆空间(The Heap Space):"></a>堆空间(The Heap Space):</h2><p>是JAVA对象生死存亡的地区,JAVA对象的出生,成长,死亡都在这个区域完成。<br>堆空间又分别按JAVA对象的创建和年龄特征分为养老区和新生区。 </p><h2 id="新生区-Young-New-generation-space"><a href="#新生区-Young-New-generation-space" class="headerlink" title="新生区(Young (New) generation space):"></a>新生区(Young (New) generation space):</h2><p>新生区的作用包括JAVA对象的创建和从JAVA对象中筛选出能进入养老区的JAVA对象。 </p><p>伊甸园(Eden space):JAVA对空间中的所有对象在此出生,该区的名字因此而得名。<br>也即是说当你的JAVA程序运行时,需要创建新的对象,JVM将在该区为你创建一个指定的对象供程序使用。创建对象的依据即是永久存储区中的元数据。 </p><h2 id="幸存者0区-Survivor-0-space-和幸存者1区-Survivor1-space"><a href="#幸存者0区-Survivor-0-space-和幸存者1区-Survivor1-space" class="headerlink" title="幸存者0区(Survivor 0 space)和幸存者1区(Survivor1 space):"></a>幸存者0区(Survivor 0 space)和幸存者1区(Survivor1 space):</h2><p>当伊甸园的控件用完时,程序又需要创建对象;此时JVM的垃圾回收器将对伊甸园区进行垃圾回收,<br>将伊甸园区中的不再被其他对象所引用的对象进行销毁工作。同时将伊甸园中的还有其他对象引用的对象移动到幸存者0区。幸存者0区就是用于存放伊甸园垃圾回收时所幸存下来的JAVA对象。当将伊甸园中的还有其他对象引用的对象移动到幸存者0区时,如果幸存者0区也没有空间来存放这些对象时,JVM的垃圾回收器将对幸存者0区进行垃圾回收处理,将幸存者0区中不在有其他对象引用的JAVA对象进行销毁,将幸存者0区中还有其他对象引用的对象移动到幸存者1区。幸存者1区的作用就是用于存放幸存者0区垃圾回收处理所幸存下来的JAVA对象。 </p><h2 id="养老区-Tenure-Old-generation-space-用于保存从新生区筛选出来的JAVA对象。"><a href="#养老区-Tenure-Old-generation-space-用于保存从新生区筛选出来的JAVA对象。" class="headerlink" title="养老区(Tenure (Old) generation space):用于保存从新生区筛选出来的JAVA对象。"></a>养老区(Tenure (Old) generation space):用于保存从新生区筛选出来的JAVA对象。</h2><p>上面我们看了JVM的内存分区管理,现在我们来看JVM的垃圾回收工作是怎样运作的。<br>首先当启动J2EE应用服务器时,JVM随之启动,并将JDK的类和接口,应用服务器运行时需要的类和接口以及J2EE应用的类和接口定义文件以及编译后的Class文件或JAR包中的Class文件装载到JVM的永久存储区。<br>在伊甸园中创建JVM应用服务器运行时必须的JAVA对象,创建J2EE应用启动时必须创建的JAVA对象;J2EE应用启动完毕,可对外提供服务。<br>JVM在伊甸园区根据用户的每次请求创建相应的JAVA对象,当伊甸园的空间不足以用来创建新JAVA对象的时候,JVM的垃圾回收器执行对伊甸园区的垃圾回收工作,<br>销毁那些不再被其他对象引用的JAVA对象(如果该对象仅仅被一个没有其他对象引用的对象引用的话,此对象也被归为没有存在的必要,依此类推),并将那些被其他对象所引用的JAVA对象移动到幸存者0区。<br>如果幸存者0区有足够控件存放则直接放到幸存者0区;如果幸存者0区没有足够空间存放,则JVM的垃圾回收器执行对幸存者0区的垃圾回收工作,销毁那些不再被其他对象引用的JAVA对象(如果该对象仅仅被一个没有其他对象引用的对象引用的话,此对象也被归为没有存在的必要,依此类推),<br>并将那些被其他对象所引用的JAVA对象移动到幸存者1区。<br>如果幸存者1区有足够控件存放则直接放到幸存者1区;如果幸存者0区没有足够空间存放,则JVM的垃圾回收器执行对幸存者0区的垃圾回收工作,销毁那些不再被其他对象引用的JAVA对象(如果该对象仅仅被一个没有其他对象引用的对象引用的话,此对象也被归为没有存在的必要,依此类推),<br>并将那些被其他对象所引用的JAVA对象移动到养老区。<br>如果养老区有足够控件存放则直接放到养老区;如果养老区没有足够空间存放,则JVM的垃圾回收器执行对养老区区的垃圾回收工作,销毁那些不再被其他对象引用的JAVA对象(如果该对象仅仅被一个没有其他对象引用的对象引用的话,此对象也被归为没有存在的必要,依此类推),<br>并保留那些被其他对象所引用的JAVA对象。如果到最后养老区,幸存者1区,幸存者0区和伊甸园区都没有空间的话,则JVM会报告“JVM堆空间溢出(java.lang.OutOfMemoryError: Java heap space)”,也即是在堆空间没有空间来创建对象。<br>这就是JVM的内存分区管理,相比不分区来说;一般情况下,垃圾回收的速度要快很多;因为在没有必要的时候不用扫描整片内存而节省了大量时间。 </p>]]></content>
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实习总结</title>
      <link href="/2018/03/29/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/29/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="why-I-came"><a href="#why-I-came" class="headerlink" title="why I came"></a>why I came</h2><p>从去年的12月份我作为一名实习生来到二维火，第一次来到规模中等以上的公司，感受到了互联网公司的氛围。<br>从刚进入公司HR紫苏的热情接待，以及正式入职后工作上同事朋友的悉心帮助和耐心解答，让我觉得二维火整体氛围真的<br>非常的棒。</p><h2 id="what-I-did"><a href="#what-I-did" class="headerlink" title="what I did"></a>what I did</h2><p>入职后，我开始慢慢接触公司的业务，尽管自己此前学到的知识技能大多与公司用到的技能相符，但是公司的规范流程<br>还是需要我迅速适应。自己开始第一次接触dubbo,看到公司的soa服务达到1w+让我开了眼界，自己也开始着手学习dubbo<br>,因为此前接触过SpringCloud，duboo上手起来也相对容易。<br>此后接手的第一个任务就是对几个服务端应用做切面监控，并输出到日志，以便于线上对指定店铺发生的问题进行查询。<br>这个简单的任务也让我开始了解和关注公司内部的业务流程，也让我系统的学习了Spring AOP切面的原理和使用。</p><p>入职后一个月我做了团队的第一次分享，分享的主题是Java规则引擎的使用,为了这次分享自己也做了些许功课，查找大量资料，<br>分析规则引擎的使用场景，以及它的优点，以备后期我们在自己的项目使用好它。</p><p>此后也多次中途参与一些项目的一部分功能，帮助同事写一些简单的接口，处理一些业务逻辑，虽然简单，但是自己对业务更加的熟悉，<br>在不懂的地方请教同事(特别是灯草,在此感谢)也能让自己更快速的融入业务。</p><p>自己参与的第一个完整项目应该是达达优化和蜂鸟的接入，从项目立项，各种评审，开发，测试，预发各个环节都亲自走一遍，自己<br>开始熟悉了这个流程，期间虽然遇到了一些问题，被指派了2个bug，最后都积极解决了，通过这个项目让我知道了提测前自己需要做好单测<br>尽量做代码review，少写bug。</p><p>可能在学校的学习习惯的原因，我每天都会给自己留一些时间去做一些总结，写一下博客，看一些流行的技术。因为自己住的离公司比较近，<br>如果没有特别的事，我习惯下班后在公司待一段时间，也很感谢公司提供的资源，让我把公司当成了图书馆，也比较喜欢一个人研究问题到深夜，<br>所以通常都是12点多跟着公司管理员一起离开。因为目前自身状态的原因，把时间大多数都放在学习知识技能上，很感谢公司给了自己<br>一个学习和工作的环境。</p><p>除了工作，平时傍晚也会跟同事一起去打篮球运动锻炼身体，这也很符合自己的生活节奏。</p><p>总而言之，身边的同事朋友都非常可爱，作为新人我非常感激 ！！！</p><h2 id="The-difficutites-I-Met"><a href="#The-difficutites-I-Met" class="headerlink" title="The difficutites I Met"></a>The difficutites I Met</h2><h2 id="How-I-resolved-The-difficutities"><a href="#How-I-resolved-The-difficutities" class="headerlink" title="How I resolved The difficutities"></a>How I resolved The difficutities</h2><h2 id="What-I-have-learned"><a href="#What-I-have-learned" class="headerlink" title="What I have learned"></a>What I have learned</h2><h2 id="My-Faults"><a href="#My-Faults" class="headerlink" title="My Faults"></a>My Faults</h2><h2 id="I-Excepted"><a href="#I-Excepted" class="headerlink" title="I Excepted"></a>I Excepted</h2>]]></content>
      
      <categories>
          
          <category> 类目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库事务4种隔离级别及7种传播行为</title>
      <link href="/2018/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A14%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A7%E7%A7%8D%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%20/"/>
      <url>/2018/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A14%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A7%E7%A7%8D%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%20/</url>
      <content type="html"><![CDATA[<h2 id="第1级别：Read-Uncommitted-读取未提交内容"><a href="#第1级别：Read-Uncommitted-读取未提交内容" class="headerlink" title="第1级别：Read Uncommitted(读取未提交内容)"></a>第1级别：Read Uncommitted(读取未提交内容)</h2><p>(1)所有事务都可以看到其他未提交事务的执行结果<br>(2)本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少<br>(3)该级别引发的问题是——脏读(Dirty Read)：读取到了未提交的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">1.首先，修改隔离级别</span><br><span class="line">    set tx_isolation=&apos;READ-UNCOMMITTED&apos;;</span><br><span class="line">    select @@tx_isolation;</span><br><span class="line">    +------------------+</span><br><span class="line">    | @@tx_isolation   |</span><br><span class="line">    +------------------+</span><br><span class="line">    | READ-UNCOMMITTED |</span><br><span class="line">    +------------------+</span><br><span class="line"></span><br><span class="line">2.事务A：启动一个事务</span><br><span class="line">    start transaction;</span><br><span class="line">    select * from tx;</span><br><span class="line">    +------+------+</span><br><span class="line">    | id   | num  |</span><br><span class="line">    +------+------+</span><br><span class="line">    |    1 |    1 |</span><br><span class="line">    |    2 |    2 |</span><br><span class="line">    |    3 |    3 |</span><br><span class="line">    +------+------+</span><br><span class="line"></span><br><span class="line">3.事务B：也启动一个事务(那么两个事务交叉了)</span><br><span class="line">       在事务B中执行更新语句，且不提交</span><br><span class="line">    start transaction;</span><br><span class="line">    update tx set num=10 where id=1;</span><br><span class="line">    select * from tx;</span><br><span class="line">    +------+------+</span><br><span class="line">    | id   | num  |</span><br><span class="line">    +------+------+</span><br><span class="line">    |    1 |   10 |</span><br><span class="line">    |    2 |    2 |</span><br><span class="line">    |    3 |    3 |</span><br><span class="line">    +------+------+</span><br><span class="line"></span><br><span class="line">4.事务A：那么这时候事务A能看到这个更新了的数据吗?</span><br><span class="line">    select * from tx;</span><br><span class="line">    +------+------+</span><br><span class="line">    | id   | num  |</span><br><span class="line">    +------+------+</span><br><span class="line">    |    1 |   10 |   ---&gt;可以看到！说明我们读到了事务B还没有提交的数据</span><br><span class="line">    |    2 |    2 |</span><br><span class="line">    |    3 |    3 |</span><br><span class="line">    +------+------+</span><br><span class="line"></span><br><span class="line">5.事务B：事务B回滚,仍然未提交</span><br><span class="line">    rollback;</span><br><span class="line">    select * from tx;</span><br><span class="line">    +------+------+</span><br><span class="line">    | id   | num  |</span><br><span class="line">    +------+------+</span><br><span class="line">    |    1 |    1 |</span><br><span class="line">    |    2 |    2 |</span><br><span class="line">    |    3 |    3 |</span><br><span class="line">    +------+------+</span><br><span class="line"></span><br><span class="line">6.事务A：在事务A里面看到的也是B没有提交的数据</span><br><span class="line">    select * from tx;</span><br><span class="line">    +------+------+</span><br><span class="line">    | id   | num  |</span><br><span class="line">    +------+------+</span><br><span class="line">    |    1 |    1 |      ---&gt;脏读意味着我在这个事务中(A中)，事务B虽然没有提交，但它任何一条数据变化，我都可以看到！</span><br><span class="line">    |    2 |    2 |</span><br><span class="line">    |    3 |    3 |</span><br><span class="line">    +------+------+</span><br></pre></td></tr></table></figure><h2 id="第2级别：Read-Committed-读取提交内容"><a href="#第2级别：Read-Committed-读取提交内容" class="headerlink" title="第2级别：Read Committed(读取提交内容)"></a>第2级别：Read Committed(读取提交内容)</h2><p>(1)这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）<br>(2)它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变<br>(3)这种隔离级别出现的问题是——不可重复读(Nonrepeatable Read)：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。<br>   导致这种情况的原因可能有：(1)有一个交叉的事务有新的commit，导致了数据的改变;(2)一个数据库被多个实例操作时,同一事务的其他实例在该实例处理其间可能会有新的commit</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 首先修改隔离级别</span><br><span class="line">set tx_isolation=<span class="string">'read-committed'</span>;</span><br><span class="line">select @@tx_isolation;</span><br><span class="line">+----------------+</span><br><span class="line">| @@tx_isolation |</span><br><span class="line">+----------------+</span><br><span class="line">| READ-COMMITTED |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 事务A：启动一个事务</span><br><span class="line">start transaction;</span><br><span class="line">select * <span class="keyword">from</span> tx;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">|    <span class="number">1</span> |    <span class="number">1</span> |</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |</span><br><span class="line">+------+------+</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>事务B：也启动一个事务(那么两个事务交叉了)</span><br><span class="line">       在这事务中更新数据，且未提交</span><br><span class="line">start transaction;</span><br><span class="line">update tx set num=<span class="number">10</span> where id=<span class="number">1</span>;</span><br><span class="line">select * <span class="keyword">from</span> tx;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">|    <span class="number">1</span> |   <span class="number">10</span> |</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |</span><br><span class="line">+------+------+</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 事务A：这个时候我们在事务A中能看到数据的变化吗?</span><br><span class="line">select * <span class="keyword">from</span> tx; ---------------&gt;</span><br><span class="line">+------+------+                |</span><br><span class="line">| id   | num  |                |</span><br><span class="line">+------+------+                |</span><br><span class="line">|    <span class="number">1</span> |    <span class="number">1</span> |---&gt;并不能看到！  |</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |                |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |                |</span><br><span class="line">+------+------+                |——&gt;相同的select语句，结果却不一样</span><br><span class="line">                                  |</span><br><span class="line"><span class="number">5.</span> 事务B：如果提交了事务B呢?            |</span><br><span class="line">commit;                           |</span><br><span class="line">                                  |</span><br><span class="line">事务A:                            |</span><br><span class="line">select * <span class="keyword">from</span> tx; ---------------&gt;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">|    <span class="number">1</span> |   <span class="number">10</span> |---&gt;因为事务B已经提交了，所以在A中我们看到了数据变化</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure><h2 id="第3级别：Repeatable-Read-可重读"><a href="#第3级别：Repeatable-Read-可重读" class="headerlink" title="第3级别：Repeatable Read(可重读)"></a>第3级别：Repeatable Read(可重读)</h2><p>(1)这是MySQL的默认事务隔离级别<br>(2)它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行<br>(3)此级别可能出现的问题——幻读(Phantom Read)：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行<br>(4)InnoDB和Falcon存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 首先，更改隔离级别</span><br><span class="line">set tx_isolation=<span class="string">'repeatable-read'</span>;</span><br><span class="line">select @@tx_isolation;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 事务A：启动一个事务</span><br><span class="line">start transaction;</span><br><span class="line">select * <span class="keyword">from</span> tx;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">|    <span class="number">1</span> |    <span class="number">1</span> |</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |</span><br><span class="line">+------+------+</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 事务B：开启一个新事务(那么这两个事务交叉了)</span><br><span class="line">       在事务B中更新数据，并提交</span><br><span class="line">start transaction;</span><br><span class="line">update tx set num=<span class="number">10</span> where id=<span class="number">1</span>;</span><br><span class="line">select * <span class="keyword">from</span> tx;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">|    <span class="number">1</span> |   <span class="number">10</span> |</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |</span><br><span class="line">+------+------+</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 事务A：这时候即使事务B已经提交了,但A能不能看到数据变化？</span><br><span class="line">select * <span class="keyword">from</span> tx;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">|    <span class="number">1</span> |    <span class="number">1</span> | ---&gt;还是看不到的！(这个级别<span class="number">2</span>不一样，也说明级别<span class="number">3</span>解决了不可重复读问题)</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |</span><br><span class="line">+------+------+</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 事务A：只有当事务A也提交了，它才能够看到数据变化</span><br><span class="line">commit;</span><br><span class="line">select * <span class="keyword">from</span> tx;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">|    <span class="number">1</span> |   <span class="number">10</span> |</span><br><span class="line">|    <span class="number">2</span> |    <span class="number">2</span> |</span><br><span class="line">|    <span class="number">3</span> |    <span class="number">3</span> |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure><h2 id="第4级别：Serializable-可串行化"><a href="#第4级别：Serializable-可串行化" class="headerlink" title="第4级别：Serializable(可串行化)"></a>第4级别：Serializable(可串行化)</h2><p>(1)这是最高的隔离级别<br>(2)它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之,它是在每个读的数据行上加上共享锁。<br>(3)在这个级别，可能导致大量的超时现象和锁竞争</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 首先修改隔离界别</span><br><span class="line">set tx_isolation=<span class="string">'serializable'</span>;</span><br><span class="line">select @@tx_isolation;</span><br><span class="line">+----------------+</span><br><span class="line">| @@tx_isolation |</span><br><span class="line">+----------------+</span><br><span class="line">| SERIALIZABLE   |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 事务A：开启一个新事务</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 事务B：在A没有commit之前，这个交叉事务是不能更改数据的</span><br><span class="line">start transaction;</span><br><span class="line">insert tx values(<span class="string">'4'</span>,<span class="string">'4'</span>);</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span><br><span class="line">update tx set num=<span class="number">10</span> where id=<span class="number">1</span>;</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; <span class="keyword">try</span> restarting transaction</span><br></pre></td></tr></table></figure><p>二、传播行为</p><ol><li>PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</li></ol><ol><li>PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。‘</li></ol><ol><li>PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</li></ol><ol><li>PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</li></ol><ol><li>PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li></ol><ol><li>PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li></ol><ol><li>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</li></ol>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事物 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的个人简历</title>
      <link href="/2018/03/28/resume/"/>
      <url>/2018/03/28/resume/</url>
      <content type="html"><![CDATA[<h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul><li>胡上杰/男/1995</li><li>本科/江西财经大学/软件工程</li><li>工作经验：1年</li><li>技术博客：<a href="http://blog.jackhoo.cn">http://blog.jackhoo.cn</a></li><li>Github：<a href="https://github.com/jack-hoo" target="_blank" rel="noopener">https://github.com/jack-hoo</a></li><li>手机：15088730887</li><li>Email：<a href="mailto:979783618@qq.com" target="_blank" rel="noopener">979783618@qq.com</a></li><li>微信号：jackhube</li><li>期望职位：Java后端工程师</li><li>到岗时间：一个月内</li><li>期望薪资：税前月薪15k</li><li>期望城市：杭州、深圳、广州</li></ul><h2 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h2><p>以下为我常用的技能</p><ul><li>语言：Java、Scala、JavaScript、HTML5</li><li>后端框架：SpringBoot、SpringMVC、Mybatis、Hibernate</li><li>前端框架：Vue、JQuery、Webpack</li><li>数据库：MySQL、Redis</li><li>中间件：RabbitMQ</li><li>服务治理：Dubbo、SpringCloud</li><li>服务器：Tomcat、Nginx</li><li>操作系统：Linux常用操作</li><li>版本控制：Git、Svn</li><li>云开发平台：第三方登录、第三方支付、云直播、即时通讯 </li></ul><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><h3 id="杭州二维火科技-2017-10-2018-4"><a href="#杭州二维火科技-2017-10-2018-4" class="headerlink" title="杭州二维火科技(2017/10 - 2018/4)"></a>杭州二维火科技(2017/10 - 2018/4)</h3><p>职位: 收银服务端Java实习生</p><p>工作职责: </p><ol><li>负责二维火收银app后台日常维护，确保用户日常收银正常使用。</li><li>参与国家高铁扫码点餐项目，负责云收银与高铁车厢店铺对接和数据绑定。</li><li>参与二维火收银外卖第三方配送对接，负责提供后台接口，处理外卖接单派单消息模块</li></ol><h3 id="南昌市敏而教育科技-2016-09-2017-09"><a href="#南昌市敏而教育科技-2016-09-2017-09" class="headerlink" title="南昌市敏而教育科技(2016/09 - 2017/09)"></a>南昌市敏而教育科技(2016/09 - 2017/09)</h3><p>职位: 自主创业者 </p><p>工作职责: </p><ol><li>大三时期联合学校技术爱好者组建一支4人技术团队，担任小Leader。</li><li>2016年12月发起校园直播项目，负责项目架构设计，后端编码工作，2017年3月项目上线，在学校晚会首次直播，在线观看数达6000人。</li><li>2017年4月项目运行一段时间由于无直播牌照被迫下线。</li><li>2017年5月创办自动发卡交易平台，担任站长。</li></ol><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><h3 id="国家高铁扫码点餐项目-2017-11-2018-03"><a href="#国家高铁扫码点餐项目-2017-11-2018-03" class="headerlink" title="国家高铁扫码点餐项目(2017/11 - 2018/03)"></a>国家高铁扫码点餐项目(2017/11 - 2018/03)</h3><h4 id="项目描述："><a href="#项目描述：" class="headerlink" title="项目描述："></a>项目描述：</h4><p>高铁扫码点餐实现了旅客在座位上即可扫码点菜品并完成支付，服务员通过云收银app接收下单消息，并予以配送，最终完成点餐操作。</p><h4 id="项目职责："><a href="#项目职责：" class="headerlink" title="项目职责："></a>项目职责：</h4><ol><li>负责高铁百万级二维码的生成和维护。</li><li>负责高铁旅客扫码下单模块的后台接口。</li><li>参与二维火云收银后台数据与高铁车厢店铺数据的对接。</li></ol><h3 id="Java快速开发平台-2017-05-2017-09"><a href="#Java快速开发平台-2017-05-2017-09" class="headerlink" title="Java快速开发平台(2017/05 - 2017/09)"></a>Java快速开发平台(2017/05 - 2017/09)</h3><h4 id="项目职责：-1"><a href="#项目职责：-1" class="headerlink" title="项目职责："></a>项目职责：</h4><p>个人开源项目，主要结合SpringBoot+SpringMvc+Mybatis+Vue做的一套前后端分离，开箱即用，可拓展的快速开发平台。</p><h4 id="项目描述：-1"><a href="#项目描述：-1" class="headerlink" title="项目描述："></a>项目描述：</h4><p>项目包含基本的RBAC的权限管理模块，这部分基于SpringSecurity。<br>基于Quartz的任务调度模块，集成多种支付接口。包含主流的云存储配置模块，可快速接入第三方云存储。安全层面做了XSS脚本过滤，以及SQL防注入。<br>包含了基础的代码生成器，可生成基础的CRUD操作，还可生成前端Vue组件，实现了前后端分离，前端工程化。大大提高了开发效率，该项目是自身实践后为开发方便快捷而为之。</p><h3 id="校园直播平台-2016-09-2017-05"><a href="#校园直播平台-2016-09-2017-05" class="headerlink" title="校园直播平台(2016/09 - 2017/05)"></a>校园直播平台(2016/09 - 2017/05)</h3><h4 id="项目职责：-2"><a href="#项目职责：-2" class="headerlink" title="项目职责："></a>项目职责：</h4><ol><li>项目负责人，从项目发起到项目落地全程负责。</li><li>负责项目的架构设计，技术选型，开放平台的对接。</li><li>完成服务端主要代码的编写，以及前端部分代码工作。</li><li>推动项目落地实行，进行首次校园晚会直播。</li></ol><h4 id="项目描述：-2"><a href="#项目描述：-2" class="headerlink" title="项目描述："></a>项目描述：</h4><ol><li><p>背景:<br>2016年直播盛行，当时目标想把直播做成校园的另一种媒体传播模式，让学生的目光从网络娱乐直播转向校园里有趣的新鲜事。</p></li><li><p>项目:<br>作为带头人联合3名感兴趣的同学一起做准备工作，看各种直播方案，也发表过一些简单的直播解决方案，最终我们搭建了一套以<br>SpringBoot+Mybatis+Mysql+Redis+Vue.js 的一套项目骨架，使用第三方服务商提供的直播云服务和即时通讯服务。<br>完成了以H5为主的直播观看端，使用Vue搭建了直播管理后台。</p></li><li><p>成果：<br>在项目正式上线，我们扛着摄像机进行了第一次晚会直播，借助学校的宣传，首次直播同时观看人数达到6000多人，用户可在直播间互动交流，打赏等。</p></li></ol><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li><a href="https://github.com/jack-hoo/StudyOnlinePlatForm" target="_blank" rel="noopener">小型网络在线教学平台</a></li><li><a href="https://github.com/jack-hoo/LiveRoomDemo_Server" target="_blank" rel="noopener">小直播系统的搭建</a></li><li><a href="https://github.com/jack-hoo/JieLin-Fast" target="_blank" rel="noopener">SSMV快速开发平台</a></li></ul><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><ul><li><a href="https://segmentfault.com/a/1190000009892006" target="_blank" rel="noopener">动手打造自己的直播间</a></li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>]]></content>
      
      <categories>
          
          <category> 简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis中#和$符的用途</title>
      <link href="/2018/03/28/Mybatis%E4%B8%AD#%E5%92%8C$%E7%AC%A6%E7%9A%84%E7%94%A8%E9%80%94/"/>
      <url>/2018/03/28/Mybatis%E4%B8%AD#%E5%92%8C$%E7%AC%A6%E7%9A%84%E7%94%A8%E9%80%94/</url>
      <content type="html"><![CDATA[<h2 id="一、举例说明"><a href="#一、举例说明" class="headerlink" title="一、举例说明"></a>一、举例说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name = &quot;dato&quot;; </span><br><span class="line"></span><br><span class="line">select * from user where name = #&#123;name&#125;; </span><br><span class="line"></span><br><span class="line">select * from user where name = $&#123;name&#125;;</span><br></pre></td></tr></table></figure><p>一般情况下，我们都不会注意到这里面有什么不一样的地方。因为这些sql都可以达到我们的目的，去查询名字叫dato的用户。</p><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>动态 SQL 是 mybatis 的强大特性之一，也是它优于其他 ORM 框架的一个重要原因。mybatis 在对 sql 语句进行预编译之前，会对 sql 进行动态解析，<br>解析为一个 BoundSql 对象，也是在此处对动态 SQL 进行处理的。在动态 SQL 解析阶段， #{ } 和 ${ } 会有不同的表现</p><p>select * from user where name = #{name}; </p><p>#{} 在动态解析的时候， 会解析成一个参数标记符。就是解析之后的语句是：</p><p>select * from user where name = ？;  </p><p>那么我们使用 ${}的时候</p><p>select * from user where name = ${name};<br>${}在动态解析的时候，会将我们传入的参数当做String字符串填充到我们的语句中，就会变成下面的语句</p><p>select * from user where name = “dato”;<br>预编译之前的 SQL 语句已经不包含变量了，完全已经是常量数据了。相当于我们普通没有变量的sql了。</p><p>综上所得， ${ } 变量的替换阶段是在动态 SQL 解析阶段，而 #{ }变量的替换是在 DBMS 中。</p><p>这是 #{} 和 ${} 我们能看到的主要的区别，除此之外，还有以下区别：</p><p>#方式能够很大程度防止sql注入。<br>$方式无法防止Sql注入。<br>$方式一般用于传入数据库对象，例如传入表名.<br>一般能用#的就别用$.<br>所以我们在使用mybatis的时候，尽量的使用#方式！！！这是大家要注意的地方</p>]]></content>
      
      <categories>
          
          <category> 细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue组件中this指代的究竟是谁？</title>
      <link href="/2018/03/25/vue%E7%BB%84%E4%BB%B6%E4%B8%ADthis%E6%8C%87%E4%BB%A3%E7%9A%84%E7%A9%B6%E7%AB%9F%E6%98%AF%E8%B0%81%EF%BC%9F/"/>
      <url>/2018/03/25/vue%E7%BB%84%E4%BB%B6%E4%B8%ADthis%E6%8C%87%E4%BB%A3%E7%9A%84%E7%A9%B6%E7%AB%9F%E6%98%AF%E8%B0%81%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="js中的this"><a href="#js中的this" class="headerlink" title="js中的this"></a>js中的this</h2><p>this 指的是当前对象，如果在全局范围内使用this，<br>则指代当前页面window；如果在函数中使用this，则this指代什么是根据当前函数是在什么对象上调用。<br>我们可以使用call和apply改变函数中this的具体指向。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.alert === <span class="keyword">this</span>.alert)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.parseInt(<span class="string">"021"</span>,<span class="number">10</span>))  <span class="comment">// 21</span></span><br></pre></td></tr></table></figure></p><p>函数中的this是在运行时候决定的，而不是函数定义时。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个全局变量，等同于window.fruit = "banana";</span></span><br><span class="line"><span class="keyword">var</span> fruit = <span class="string">"banana"</span>;</span><br><span class="line"><span class="comment">// 此时函数中的this指向window;</span></span><br><span class="line">foo();  <span class="comment">//   "banana"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  o = &#123;</span><br><span class="line">      fruit : <span class="string">"apple"</span>,</span><br><span class="line">      foo : foo    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 此时函数中的this指向o</span></span><br><span class="line">o.foo();  <span class="comment">// "apple"</span></span><br></pre></td></tr></table></figure></p><h3 id="vue中的this"><a href="#vue中的this" class="headerlink" title="vue中的this"></a>vue中的this</h3><p>因为在vue组件中经常要用this指向组件的数据域和方法，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">            </span><br><span class="line">            nextPage (page) &#123;</span><br><span class="line">                <span class="keyword">this</span>.params.page = page;</span><br><span class="line">                <span class="keyword">this</span>.get_goods_list();</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这样做完全可以正确获取到数据，但是请看下面的请看<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data ()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">        setInterval(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.a += a +<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        ),<span class="number">3000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就有问题了，会出现this.a未定义，原因就是在此时this指向的是window对象，而不是该组件<br>在es6中用箭头函数就可以完全避免这种问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data ()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a += a +<span class="number">1</span></span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记Java8Lambda局部变量的使用</title>
      <link href="/2018/03/21/%E8%AE%B0Java8Lambda%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/03/21/%E8%AE%B0Java8Lambda%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Lamdba表达式中可以使用外层作用域中定义的变量，就像匿名内部类。<br>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> portNumber = <span class="number">1337</span>;</span><br><span class="line">Runnable r = () -&gt; System.out.println(portNumber);</span><br></pre></td></tr></table></figure></p><p>但是Lambda对于变量有一些限制，Lamdba可以没有限制的使用实例变量和静态变量，但是局部变量必须显示声明为final或者事实上是final（即一个变量虽然没被final修饰，但是他在后面也没被修改）。<br>举例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> portNumber = <span class="number">1337</span>;</span><br><span class="line">Runnable r = () -&gt; System.out.println(portNumber);</span><br><span class="line"><span class="comment">// 编译错误，因为portNumber 变量被赋值2次。</span></span><br><span class="line"><span class="comment">// Lambda表达式引用的局部变量必须是final或者事实上是final</span></span><br><span class="line">portNumber = <span class="number">31337</span>;</span><br></pre></td></tr></table></figure></p><h2 id="为什么对局部变量的限制"><a href="#为什么对局部变量的限制" class="headerlink" title="为什么对局部变量的限制?"></a>为什么对局部变量的限制?</h2><p>首先，实例变量和局部变量背后的实现有一个关键的不同，实例变量存储在堆上，而局部变量保存在栈上。</p><p>这种限制存在的原因在于局部变量保存在栈上，并且隐式表示它们仅限于其所在线程。如果允许捕获可改变的局部变量，<br>就会引发造成线程不安全的新的可能性，而这是我们不想看到的（实例变量可以，因为它们保存在堆中，而堆是在线程之间共享的）。</p>]]></content>
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>彻底搞懂二叉树的三种遍历方式</title>
      <link href="/2018/03/15/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/03/15/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="三种遍历方式"><a href="#三种遍历方式" class="headerlink" title="三种遍历方式"></a>三种遍历方式</h2><ol><li><p>先序遍历：遍历顺序规则为【根左右】</p></li><li><p>中序遍历：遍历顺序规则为【左根右】</p></li><li><p>后序遍历：遍历顺序规则为【左右根】</p></li></ol><p>先看一棵树图，网上找了一个图<br><img src="/images/paixu.jpg" alt="二叉树"></p><blockquote><p>  先序遍历：ABCDEFGHK<br>    中序遍历：BDCAEHGKF<br>    后序遍历：DCBHKGFEA</p></blockquote><p>以中序遍历为例：</p><p>中序遍历的规则是【左根右】，我们从root节点A看起；</p><p>此时A是根节点，遍历A的左子树；</p><p>A的左子树存在，找到B，此时B看做根节点，遍历B的左子树；</p><p>B的左子树不存在，返回B，根据【左根右】的遍历规则，记录B，遍历B的右子树；</p><p>B的右子树存在，找到C，此时C看做根节点，遍历C的左子树；</p><p>C的左子树存在，找到D，由于D是叶子节点，无左子树，记录D，无右子树，返回C，根据【左根右】的遍历规则，记录C，遍历C的右子树；</p><p>C的右子树不存在，返回B，B的右子树遍历完，返回A；</p><p>至此，A的左子树遍历完毕，根据【左根右】的遍历规则，记录A，遍历A的右子树；</p><p>A的右子树存在，找到E，此时E看做根节点，遍历E的左子树；</p><p>E的左子树不存在，返回E，根据【左根右】的遍历规则，记录E，遍历E的右子树；</p><p>E的右子树存在，找到F，此时F看做根节点，遍历F的左子树；</p><p>F的左子树存在，找到G，此时G看做根节点，遍历G的左子树；</p><p>G的左子树存在，找到H，由于H是叶子节点，无左子树，记录H，无右子树，返回G，根据【左根右】的遍历规则，记录G，遍历G的右子树；</p><p>G的右子树存在，找到K，由于K是叶子节点，无左子树，记录K，无右子树，返回G，根据【左根右】的遍历规则，记录F，遍历F的右子树；</p><p>F的右子树不存在，返回F，E的右子树遍历完毕，返回A；</p><p>至此，A的右子树也遍历完毕；</p><p>这样先序后序也很好理解了。再也不会忘了，后面再动手用Java写个实现</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人脸识别学习记录</title>
      <link href="/2018/03/01/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABdemo/"/>
      <url>/2018/03/01/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABdemo/</url>
      <content type="html"><![CDATA[<h2 id="人脸识别核心概念"><a href="#人脸识别核心概念" class="headerlink" title="人脸识别核心概念"></a>人脸识别核心概念</h2><h3 id="人脸"><a href="#人脸" class="headerlink" title="人脸"></a>人脸</h3><p>人脸（Face）在人脸识别技术中特指图像中发现的人脸，当对一张图片进行人脸检测时，会将检测到的人脸记录下来，包括人脸在图片中的位置，用一个系统标识face_token来表示。注意：对同一张图片进行多次人脸检测，对同一个人脸会得到不同的face_token。</p><h3 id="人脸集合"><a href="#人脸集合" class="headerlink" title="人脸集合"></a>人脸集合</h3><p>人脸集合（FaceSet）是用来存储检测到人脸的存储对象。一个FaceSet内face_token是不重复的。</p><h3 id="人脸比对-人脸搜索"><a href="#人脸比对-人脸搜索" class="headerlink" title="人脸比对/人脸搜索"></a>人脸比对/人脸搜索</h3><p>计算机检测到图片中一个人脸之后，通过人脸判断人身份的过程被称为人脸比对/人脸搜索。</p><p>人脸比对指采集新的人脸，与一个已知身份用户的人脸进行比对，判断新的人脸是否属于该已知身份用户。人脸比对需要调用Compare API。</p><p>人脸搜索是指采集用户新的人脸，在多个已知身份用户的人脸集合中进行搜索，找出新的人脸属于哪一个已知身份用户。人脸搜索需要调用Search API</p><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><p>先看看opencv吧，因为最近项目用到图像识别，需要截图后识别出图片上的文字并入库</p><h3 id="opencv能用来干什么"><a href="#opencv能用来干什么" class="headerlink" title="opencv能用来干什么"></a>opencv能用来干什么</h3><ol><li>内置数据结构和输入/输出(In-build data structures and input/output)</li></ol><p>　　关于OpenCV的好处之一就是它提供了许多内置的用于图像处理和计算机视觉相关操作的基础元素。如果你需要通过scratch写入某些内容，你将不得不定义一些东西，比如图像、点、角度等等，这些几乎是任何计算机视觉算法的基础。OpenCV提供了这些开箱即用的基础数据结构，它们都包含在core模块中。另外一个好处是，这些数据结构都已经针对速度和内存做了优化，因此，你不用担心实现细节。</p><p>　　imgcodecs模块用于处理读取和写入图像文件(image file)。</p><ol><li><p>图像处理操作(Image processing operations)</p></li><li><p>构建图形用户界面(Build GUI)</p></li><li><p>视频分析(Video analysis)</p></li><li><p>3D重建(3D reconstruction)</p></li><li><p>特征提取(Feature extraction)</p></li><li><p>目标检测(Object detection)</p></li><li><p>机器学习(Machine learning)</p></li><li><p>计算摄影(Computational photography)</p></li><li><p>形状分析(Shape analysis)</p></li><li><p>光流算法(Optical flow algorithms)</p></li><li><p>人脸和目标识别(Face and object recognition)</p></li><li><p>表面匹配(Surface matching)</p></li><li><p>文本检测和识别(Text detection and recognition)</p></li></ol><h3 id="上一个人脸识别小demo"><a href="#上一个人脸识别小demo" class="headerlink" title="上一个人脸识别小demo"></a>上一个人脸识别小demo</h3><p><a href="https://github.com/jack-hoo/face_reco_server" target="_blank" rel="noopener">github源码地址</a><br>欢迎体验</p>]]></content>
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RequestContextHolder类解析</title>
      <link href="/2018/03/01/RequestContextHolder%E7%B1%BB%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/03/01/RequestContextHolder%E7%B1%BB%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="为什么要用RequestContextHolder"><a href="#为什么要用RequestContextHolder" class="headerlink" title="为什么要用RequestContextHolder"></a>为什么要用RequestContextHolder</h2><p>正常情况下，我们都会在controller层取获取HttpServletRequest，然后中request中获取各种请求参数，<br>但是，假如我们要在service层获取request对象怎么办，直接硬塞给service是不是过于暴力，这时候我们就可以选择使用<br>RequestContextHolder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br></pre></td></tr></table></figure></p><p>看到这一般都会想到几个问题:</p><ol><li>request和response怎么和当前请求挂钩?</li><li>request和response等是什么时候设置进去的?</li></ol><h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder =</span><br><span class="line"><span class="keyword">new</span> NamedThreadLocal&lt;RequestAttributes&gt;(<span class="string">"Request attributes"</span>);</span><br><span class="line"><span class="comment">//可被子线程继承的request</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; inheritableRequestAttributesHolder =</span><br><span class="line"><span class="keyword">new</span> NamedInheritableThreadLocal&lt;RequestAttributes&gt;(<span class="string">"Request context"</span>);</span><br></pre></td></tr></table></figure><p>再看<code>getRequestAttributes()</code>方法,相当于直接获取ThreadLocal里面的值,这样就保证了每一次获取到的Request是该请求的request.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestAttributes <span class="title">getRequestAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestAttributes attributes = requestAttributesHolder.get();</span><br><span class="line">        <span class="keyword">if</span> (attributes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            attributes = inheritableRequestAttributesHolder.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> attributes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="request和response等是什么时候设置进去的"><a href="#request和response等是什么时候设置进去的" class="headerlink" title="request和response等是什么时候设置进去的?"></a>request和response等是什么时候设置进去的?</h2><p>下面看类图<br><img src="/image/dispatcherServlet.png" alt="类图"></p><ol><li><p>HttpServletBean 进行初始化工作</p></li><li><p>FrameworkServlet 初始化 WebApplicationContext,并提供service方法预处理请</p></li><li><p>DispatcherServlet 具体分发处理.</p></li></ol><p>那么就可以在FrameworkServlet查看到该类重写了service(),doGet(),doPost()…等方法,这些实现里面都有一个预处理方法<code>processRequest(request, response);</code>,所以定位到了我们要找的位置</p><p>查看<code>processRequest(request, response);</code>的实现,具体可以分为三步:</p><ol><li>获取上一个请求的参数</li><li>重新建立新的参数</li><li>设置到XXContextHolder</li><li>父类的service()处理请求</li><li>恢复request</li><li>发布事件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//获取上一个请求保存的LocaleContext</span></span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line"><span class="comment">//建立新的LocaleContext</span></span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"><span class="comment">//获取上一个请求保存的RequestAttributes</span></span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="comment">//建立新的RequestAttributes</span></span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, </span><br><span class="line">response, previousAttributes);</span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), </span><br><span class="line"><span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"><span class="comment">//具体设置的方法</span></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">failureCause = ex;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">   failureCause = ex;</span><br><span class="line">   <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">   failureCause = ex;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line"><span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Leaving response open for concurrent processing"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//发布事件</span></span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看initContextHolders(request, localeContext, requestAttributes)方法,把新的RequestAttributes设置进LocalThread,实际上保存的类型为ServletRequestAttributes,<br>这也是为什么在使用的时候可以把RequestAttributes强转为ServletRequestAttributes.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initContextHolders</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                                LocaleContext localeContext, </span></span></span><br><span class="line"><span class="function"><span class="params">                                RequestAttributes requestAttributes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (localeContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        LocaleContextHolder.setLocaleContext(localeContext, </span><br><span class="line"><span class="keyword">this</span>.threadContextInheritable);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        RequestContextHolder.setRequestAttributes(requestAttributes, </span><br><span class="line"><span class="keyword">this</span>.threadContextInheritable);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Bound request context to thread: "</span> + request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此RequestContextHolder里面最终保存的为ServletRequestAttributes,这个类相比<code>RequestAttributes</code>方法是多了很多.</p>]]></content>
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码解析 </tag>
            
            <tag> Request </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java并发编程中的原子性、有序性、可见性</title>
      <link href="/2018/02/27/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7/"/>
      <url>/2018/02/27/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote><p>并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>原子性：一个操作或多个操作要么全部执行完成且执行过程不被中断，要么就不执行。</p><p>可见性：当多个线程同时访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><p>有序性：程序执行的顺序按照代码的先后顺序执行。</p><p>对于单线程，在执行代码时jvm会进行指令重排序，处理器为了提高效率，可以对输入代码进行优化，<br>它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证保存最终执行结果和代码顺序执行的结果是一致的。</p><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>在java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断，要么执行，要么不执行。</p><p>X=10;  //原子性（简单的读取、将数字赋值给变量）</p><p>Y = x;  //变量之间的相互赋值，不是原子操作</p><p>X++;  //对变量进行计算操作</p><p>X = x+1;</p><p>语句2实际包括两个操作，它先要去读取x的值，再将y值写入，两个操作分开是原子性的。合在一起就不是原子性的。</p><p>语句3、4:x++  x=x+1包括3个操作：读取x的值，x+1，将x写入</p><p>注：可以通过 synchronized和Lock实现原子性。因为synchronized和Lock能够保证任一时刻只有一个线程访问该代码块。</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>Java提供了volatile关键字保证可见性。</p><p>当一个共享变量被volatile修饰时，它会保证修改的值立即被其他的线程看到，即修改的值立即更新到主存中，当其他线程需要读取时，它会去内存中读取新值。</p><p>Synchronized和Lock也可以保证可见性，因为它们可以保证任一时刻只有一个线程能访问共享资源，并在其释放锁之前将修改的变量刷新到内存中</p><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><p>在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述volatile关键字）。<br>另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，<br>相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p><p>Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p><p>指令重排序：java语言规范规定JVM线程内部维持顺序化语义。即只要程序的最终结果与它顺序化情况的结果相等，那么指令的执行顺序可以与代码顺序不一致，此过程叫指令的重排序。</p><p>指令重排序的意义：JVM能根据处理器特性（CPU多级缓存系统、多核处理器等）适当的对机器指令进行重排序，使机器指令能更符合CPU的执行特性，最大限度的发挥机器性能。</p><p>下面就来具体介绍下happens-before原则（先行发生原则）：</p><p>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</p><p>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</p><p>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作。如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p><p>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C。</p><p>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作</p><p>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生</p><p>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行</p><p>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始</p>]]></content>
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 线程安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ArrayList在for循环中使用remove方法移除元素带来的问题</title>
      <link href="/2018/01/29/ArrayList%E5%9C%A8for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E4%BD%BF%E7%94%A8remove%E6%96%B9%E6%B3%95%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/01/29/ArrayList%E5%9C%A8for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E4%BD%BF%E7%94%A8remove%E6%96%B9%E6%B3%95%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>有时候我们需要在一个ArrayList的for循环中动态删除元素的需求,如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();  </span><br><span class="line">list.add(<span class="number">0</span>);  </span><br><span class="line">list.add(<span class="number">1</span>);  </span><br><span class="line">list.add(<span class="number">2</span>);  </span><br><span class="line">list.add(<span class="number">3</span>);  </span><br><span class="line">list.add(<span class="number">4</span>);  </span><br><span class="line">list.add(<span class="number">5</span>);  </span><br><span class="line">list.add(<span class="number">6</span>);  </span><br><span class="line">list.add(<span class="number">7</span>);  </span><br><span class="line"><span class="comment">//正常循环  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;  </span><br><span class="line">    System.out.println(<span class="string">"i的值:"</span> + i + <span class="string">" 对应的数字:"</span> + list.get(i));  </span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(<span class="string">"没有remove前list的项:"</span>+list.size());  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//边循环边删除  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;  </span><br><span class="line">    System.out.println(<span class="string">"i的值:"</span> + i + <span class="string">" 对应的数字:"</span> + list.get(i));  </span><br><span class="line">    <span class="keyword">if</span>(list.get(i) == <span class="number">3</span>) list.remove(list.get(i));<span class="comment">//删除list的第四项  </span></span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(<span class="string">"remove后list的项:"</span>+list.size());  </span><br><span class="line">  </span><br><span class="line">System.out.println(<span class="string">"==========remove后的list=========="</span>);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;  </span><br><span class="line">    System.out.println(<span class="string">"i的值:"</span> + i + <span class="string">" 对应的数字:"</span> + list.get(i));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行代码, 结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">i的值:<span class="number">0</span> 对应的数字:<span class="number">0</span></span><br><span class="line">i的值:<span class="number">1</span> 对应的数字:<span class="number">1</span></span><br><span class="line">i的值:<span class="number">2</span> 对应的数字:<span class="number">2</span></span><br><span class="line">i的值:<span class="number">3</span> 对应的数字:<span class="number">3</span></span><br><span class="line">i的值:<span class="number">4</span> 对应的数字:<span class="number">4</span></span><br><span class="line">i的值:<span class="number">5</span> 对应的数字:<span class="number">5</span></span><br><span class="line">i的值:<span class="number">6</span> 对应的数字:<span class="number">6</span></span><br><span class="line">i的值:<span class="number">7</span> 对应的数字:<span class="number">7</span></span><br><span class="line">没有remove前list的项:<span class="number">8</span></span><br><span class="line">i的值:<span class="number">0</span> 对应的数字:<span class="number">0</span></span><br><span class="line">i的值:<span class="number">1</span> 对应的数字:<span class="number">1</span></span><br><span class="line">i的值:<span class="number">2</span> 对应的数字:<span class="number">2</span></span><br><span class="line">i的值:<span class="number">3</span> 对应的数字:<span class="number">3</span></span><br><span class="line">i的值:<span class="number">4</span> 对应的数字:<span class="number">5</span></span><br><span class="line">i的值:<span class="number">5</span> 对应的数字:<span class="number">6</span></span><br><span class="line">i的值:<span class="number">6</span> 对应的数字:<span class="number">7</span></span><br><span class="line">remove后list的项:<span class="number">7</span></span><br><span class="line">==========remove后的list==========</span><br><span class="line">i的值:<span class="number">0</span> 对应的数字:<span class="number">0</span></span><br><span class="line">i的值:<span class="number">1</span> 对应的数字:<span class="number">1</span></span><br><span class="line">i的值:<span class="number">2</span> 对应的数字:<span class="number">2</span></span><br><span class="line">i的值:<span class="number">3</span> 对应的数字:<span class="number">4</span></span><br><span class="line">i的值:<span class="number">4</span> 对应的数字:<span class="number">5</span></span><br><span class="line">i的值:<span class="number">5</span> 对应的数字:<span class="number">6</span></span><br><span class="line">i的值:<span class="number">6</span> 对应的数字:<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>可以看到没有删除前, 我们的list的项和循环对应的数字都是正确的, 但是下面的循环在删除第4个元素后,第4,5,6个项对应的数字本应该是4,5,6, 但是这里却变成了5,6,7.<br>原因是,我们删除第4项后,list的长度就变成7,而且,list会把第4项后面的值往前移一位, 也就是说,i=3时,list.get(i)=4,i=4时,list.get(i)=5,i=5时,list.get(i)=6,i=6时,list.get(i)=7..  我们再说的形象一点, 就是本来有8层糕点,依次是0-7,竖起来,大的在上,小的在下,我们从下往上数,数到第5个的时候,吃掉这一层糕点,这时,上面三层分别往下移了一层</p><p>所以, 值为4的项我们根本没有循环到</p><p>那有什么方法可以实现remove呢, 有个笨方法,是新建一个tempList, 把要删除的项全部add进去,最后用list.removeAll(tempList)实现 . 但是这里我们有更好的方法, 就是倒序删除</p><p>还是上面的例子, 代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">list.add(<span class="number">5</span>);</span><br><span class="line">list.add(<span class="number">6</span>);</span><br><span class="line">list.add(<span class="number">7</span>);</span><br><span class="line"><span class="comment">//正常循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"i的值:"</span> + i + <span class="string">" 对应的数字:"</span> + list.get(i));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"没有remove前list的项:"</span>+list.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//边循环边删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = list.size() -<span class="number">1</span> ; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">System.out.println(<span class="string">"i的值  "</span> + i + <span class="string">" 对应的数字 "</span> + list.get(i));</span><br><span class="line"><span class="keyword">if</span>(list.get(i) == <span class="number">3</span>) list.remove(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"remove后list的项:"</span>+list.size());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"==========remove后的list=========="</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"i的值  "</span> + i + <span class="string">" 对应的数字 "</span> + list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行代码,结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">i的值:<span class="number">0</span> 对应的数字:<span class="number">0</span></span><br><span class="line">i的值:<span class="number">1</span> 对应的数字:<span class="number">1</span></span><br><span class="line">i的值:<span class="number">2</span> 对应的数字:<span class="number">2</span></span><br><span class="line">i的值:<span class="number">3</span> 对应的数字:<span class="number">3</span></span><br><span class="line">i的值:<span class="number">4</span> 对应的数字:<span class="number">4</span></span><br><span class="line">i的值:<span class="number">5</span> 对应的数字:<span class="number">5</span></span><br><span class="line">i的值:<span class="number">6</span> 对应的数字:<span class="number">6</span></span><br><span class="line">i的值:<span class="number">7</span> 对应的数字:<span class="number">7</span></span><br><span class="line">没有remove前list的项:<span class="number">8</span></span><br><span class="line">i的值  <span class="number">7</span> 对应的数字 <span class="number">7</span></span><br><span class="line">i的值  <span class="number">6</span> 对应的数字 <span class="number">6</span></span><br><span class="line">i的值  <span class="number">5</span> 对应的数字 <span class="number">5</span></span><br><span class="line">i的值  <span class="number">4</span> 对应的数字 <span class="number">4</span></span><br><span class="line">i的值  <span class="number">3</span> 对应的数字 <span class="number">3</span></span><br><span class="line">i的值  <span class="number">2</span> 对应的数字 <span class="number">2</span></span><br><span class="line">i的值  <span class="number">1</span> 对应的数字 <span class="number">1</span></span><br><span class="line">i的值  <span class="number">0</span> 对应的数字 <span class="number">0</span></span><br><span class="line">remove后list的项:<span class="number">7</span></span><br><span class="line">==========remove后的list==========</span><br><span class="line">i的值  <span class="number">0</span> 对应的数字 <span class="number">0</span></span><br><span class="line">i的值  <span class="number">1</span> 对应的数字 <span class="number">1</span></span><br><span class="line">i的值  <span class="number">2</span> 对应的数字 <span class="number">2</span></span><br><span class="line">i的值  <span class="number">3</span> 对应的数字 <span class="number">4</span></span><br><span class="line">i的值  <span class="number">4</span> 对应的数字 <span class="number">5</span></span><br><span class="line">i的值  <span class="number">5</span> 对应的数字 <span class="number">6</span></span><br><span class="line">i的值  <span class="number">6</span> 对应的数字 <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到变循环变删除,并不影响后面的元素,<br>remove后的list也和第一次的结果是一样的 . 这是因为我们删除list元素,list的长度是会变小, 但是变化的只是比当前被删除元素的项大的项, 而我们这里使用倒序循环, 大的项, 我们已经执行过了, 所以不会影响.. 再用上面的比喻来说明,这次我们是从上往下数,数到第4个的时候,吃掉这一层糕点,这时,上面三层分别往下移了一层 , 但是这不影响我们之前数过的蛋糕,<br>而且对下面的蛋糕也不影响, 这就是原理</p>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置代理后获取到的ip都是127.0.0.1解决办法</title>
      <link href="/2018/01/25/Nginx%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E5%90%8E%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84ip%E9%83%BD%E6%98%AF127.0.0.1%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/01/25/Nginx%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E5%90%8E%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84ip%E9%83%BD%E6%98%AF127.0.0.1%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>squid，varnish以及nginx等，在做反向代理的时候，因为要代替客户端去访问服务器，<br>所以，当请求包经过反向代理后，在代理服务器这里这个IP数据包的IP包头做了修改，<br>最终后端web服务器得到的数据包的头部的源IP地址是代理服务器的IP地址，这样一来，<br>后端服务器的程序给予IP的统计功能就没有任何意义，所以在做代理或集群的时候必须解决这个问题，</p><h2 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">　　　proxy_pass http:<span class="comment">//127.0.0.1:8083;</span></span><br><span class="line"></span><br><span class="line">　　　proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="nginx几个变量"><a href="#nginx几个变量" class="headerlink" title="nginx几个变量"></a>nginx几个变量</h2><ol><li><p>remote_addr<br>代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，当你的浏览器访问某个网站时，假设中间没有任何代理，那么网站的web服务器（Nginx，Apache等）就会把remote_addr设为你的机器IP，如果你用了某个代理，那么你的浏览器会先访问这个代理，然后再由这个代理转发到网站，这样web服务器就会把remote_addr设为这台代理机器的IP,除非代理将你的IP附在请求header中一起转交给web服务器。</p></li><li><p>X-Forwarded-For（简称XFF）</p><p> X-Forwarded-For 是一个 HTTP 扩展头部。HTTP/1.1（RFC 2616）协议并没有对它的定义，它最开始是由 Squid 这个缓存代理软件引入，用来表示 HTTP 请求端真实 IP。如今它已经成为事实上的标准，被各大 HTTP 代理、负载均衡等转发服务广泛使用，并被写入 RFC 7239（Forwarded HTTP Extension）标准之中。</p><p> XFF的格式为：</p><p> X-Forwarded-For: client, proxy1, proxy2<br> XFF 的内容由「英文逗号 + 空格」隔开的多个部分组成，最开始的是离服务端最远的设备 IP，然后是每一级代理设备的 IP。（注意：如果未经严格处理，可以被伪造）</p><p> 如果一个 HTTP 请求到达服务器之前，经过了三个代理 Proxy1、Proxy2、Proxy3，IP 分别为 IP1、IP2、IP3，用户真实 IP 为 IP0，那么按照 XFF 标准，服务端最终会收到以下信息：</p><p> X-Forwarded-For: IP0, IP1, IP2<br> Proxy3 直连服务器，它会给 XFF 追加 IP2，表示它是在帮 Proxy2 转发请求。列表中并没有 IP3，IP3 可以在服务端通过 Remote Address 字段获得。我们知道 HTTP 连接基于 TCP 连接，HTTP 协议中没有 IP 的概念，Remote Address 来自 TCP 连接，表示与服务端建立 TCP 连接的设备 IP，在这个例子里就是 IP3。Remote Address 无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源 IP，无法建立 TCP 连接，更不会有后面的 HTTP 请求。但是在正常情况下，web服务器获取Remote Address只会获取到上一级的IP。</p></li><li><p>X-Real-IP</p></li></ol><p>这又是一个自定义头部字段，通常被 HTTP 代理用来表示与它产生 TCP 连接的设备 IP，这个设备可能是其他代理，也可能是真正的请求端，这个要看经过代理的层级次数或是是否始终将真实IP一路传下来。（注意：如果未经严格处理，可以被伪造）</p><h2 id="贴一段根据ip获取区域地址的代码"><a href="#贴一段根据ip获取区域地址的代码" class="headerlink" title="贴一段根据ip获取区域地址的代码"></a>贴一段根据ip获取区域地址的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miner.out.jielin_fast.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miner.out.jielin_fast.controller.AuthController;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressUtils</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * 请求的参数 格式为：name=xxx&amp;pwd=xxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encoding</span></span><br><span class="line"><span class="comment"> * 服务器端请求编码。如GBK,UTF-8等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> org.slf4j.Logger log = LoggerFactory.getLogger(AuthController.class);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAddresses</span><span class="params">(String ip)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String urlStr =<span class="string">"http://ip.taobao.com/service/getIpInfo.php"</span>;</span><br><span class="line">String returnStr = getResult(urlStr, ip);</span><br><span class="line"><span class="keyword">if</span> (returnStr != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 处理返回的省市区信息</span></span><br><span class="line">String[] temp = returnStr.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">if</span> (temp.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"0"</span>;<span class="comment">// 无效IP，局域网测试</span></span><br><span class="line">&#125;</span><br><span class="line">String region = (temp[<span class="number">5</span>].split(<span class="string">":"</span>))[<span class="number">1</span>].replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">region = decodeUnicode(region);<span class="comment">// 省份</span></span><br><span class="line"></span><br><span class="line">String country = <span class="string">""</span>;</span><br><span class="line">String area = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// String region = "";</span></span><br><span class="line">String city = <span class="string">""</span>;</span><br><span class="line">String county = <span class="string">""</span>;</span><br><span class="line">String isp = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">country = (temp[i].split(<span class="string">":"</span>))[<span class="number">2</span>].replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">country = decodeUnicode(country);<span class="comment">// 国家</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">area = (temp[i].split(<span class="string">":"</span>))[<span class="number">1</span>].replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">area = decodeUnicode(area);<span class="comment">// 地区</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">region = (temp[i].split(<span class="string">":"</span>))[<span class="number">1</span>].replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">region = decodeUnicode(region);<span class="comment">// 省份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">city = (temp[i].split(<span class="string">":"</span>))[<span class="number">1</span>].replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">city = decodeUnicode(city);<span class="comment">// 市区</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">county = (temp[i].split(<span class="string">":"</span>))[<span class="number">1</span>].replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">county = decodeUnicode(county);<span class="comment">// 地区</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">isp = (temp[i].split(<span class="string">":"</span>))[<span class="number">1</span>].replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">isp = decodeUnicode(isp); <span class="comment">// ISP公司</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">String address = region+city;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(address))&#123;</span><br><span class="line">address = <span class="string">"地球村"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">"获取ip错误"</span>+e);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> urlStr</span></span><br><span class="line"><span class="comment"> *            请求的地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> *            请求的参数 格式为：name=xxx&amp;pwd=xxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encoding</span></span><br><span class="line"><span class="comment"> *            服务器端请求编码。如GBK,UTF-8等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getResult</span><span class="params">(String urlStr, String ip)</span> </span>&#123;</span><br><span class="line">URL url = <span class="keyword">null</span>;</span><br><span class="line">HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">url = <span class="keyword">new</span> URL(urlStr);</span><br><span class="line">connection = (HttpURLConnection) url.openConnection();<span class="comment">// 新建连接实例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超时错误 由 2s改为5s</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">connection.setConnectTimeout(<span class="number">5000</span>);<span class="comment">// 设置连接超时时间，单位毫秒</span></span><br><span class="line">connection.setReadTimeout(<span class="number">5000</span>);<span class="comment">// 设置读取数据超时时间，单位毫秒</span></span><br><span class="line">connection.setDoOutput(<span class="keyword">true</span>);<span class="comment">// 是否打开输出流 true|false</span></span><br><span class="line">connection.setDoInput(<span class="keyword">true</span>);<span class="comment">// 是否打开输入流true|false</span></span><br><span class="line">connection.setRequestMethod(<span class="string">"POST"</span>);<span class="comment">// 提交方法POST|GET</span></span><br><span class="line">connection.setUseCaches(<span class="keyword">false</span>);<span class="comment">// 是否缓存true|false</span></span><br><span class="line">connection.connect();<span class="comment">// 打开连接端口</span></span><br><span class="line">DataOutputStream out = <span class="keyword">new</span> DataOutputStream(connection.getOutputStream());<span class="comment">// 打开输出流往对端服务器写数据</span></span><br><span class="line">out.writeBytes(<span class="string">"ip="</span>+ip);<span class="comment">// 写数据,也就是提交你的表单 name=xxx&amp;pwd=xxx</span></span><br><span class="line">out.flush();<span class="comment">// 刷新</span></span><br><span class="line">out.close();<span class="comment">// 关闭输出流</span></span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream(), <span class="string">"utf-8"</span>));<span class="comment">// 往对端写完数据对端服务器返回数据</span></span><br><span class="line"><span class="comment">// ,以BufferedReader流来读取</span></span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">String line = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">buffer.append(line);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br><span class="line"><span class="keyword">return</span> buffer.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">connection.disconnect();<span class="comment">// 关闭连接</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unicode 转换成 中文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> theString</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decodeUnicode</span><span class="params">(String theString)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> aChar;</span><br><span class="line"><span class="keyword">int</span> len = theString.length();</span><br><span class="line">StringBuffer outBuffer = <span class="keyword">new</span> StringBuffer(len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; len;) &#123;</span><br><span class="line">aChar = theString.charAt(x++);</span><br><span class="line"><span class="keyword">if</span> (aChar == <span class="string">'\\'</span>) &#123;</span><br><span class="line">aChar = theString.charAt(x++);</span><br><span class="line"><span class="keyword">if</span> (aChar == <span class="string">'u'</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">aChar = theString.charAt(x++);</span><br><span class="line"><span class="keyword">switch</span> (aChar) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'8'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'9'</span>:</span><br><span class="line">value = (value &lt;&lt; <span class="number">4</span>) + aChar - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">value = (value &lt;&lt; <span class="number">4</span>) + <span class="number">10</span> + aChar - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">value = (value &lt;&lt; <span class="number">4</span>) + <span class="number">10</span> + aChar - <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Malformed      encoding."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">outBuffer.append((<span class="keyword">char</span>) value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (aChar == <span class="string">'t'</span>) &#123;</span><br><span class="line">aChar = <span class="string">'\t'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (aChar == <span class="string">'r'</span>) &#123;</span><br><span class="line">aChar = <span class="string">'\r'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (aChar == <span class="string">'n'</span>) &#123;</span><br><span class="line">aChar = <span class="string">'\n'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (aChar == <span class="string">'f'</span>) &#123;</span><br><span class="line">aChar = <span class="string">'\f'</span>;</span><br><span class="line">&#125;</span><br><span class="line">outBuffer.append(aChar);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">outBuffer.append(aChar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> outBuffer.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取IP地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>  科帮网</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>2017年7月31日</span></span><br><span class="line"><span class="comment"> * 更新日志</span></span><br><span class="line"><span class="comment"> * 2017年7月31日  科帮网 首次创建</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isBlank(ip) &amp;&amp; !<span class="string">"unknown"</span>.equalsIgnoreCase(ip))</span><br><span class="line">            <span class="keyword">return</span> ip;</span><br><span class="line">        ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isBlank(ip) &amp;&amp; !<span class="string">"unknown"</span>.equalsIgnoreCase(ip))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ip.indexOf(<span class="string">','</span>);</span><br><span class="line">            <span class="keyword">if</span>(index != -<span class="number">1</span>)</span><br><span class="line">               <span class="keyword">return</span> ip.substring(<span class="number">0</span>, index);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip))</span><br><span class="line">            ip = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">        <span class="keyword">if</span>(ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip))</span><br><span class="line">            ip = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">        <span class="keyword">if</span>(ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip))</span><br><span class="line">            ip = request.getHeader(<span class="string">"HTTP_CLIENT_IP"</span>);</span><br><span class="line">        <span class="keyword">if</span>(ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip))</span><br><span class="line">            ip = request.getHeader(<span class="string">"HTTP_X_FORWARDED_FOR"</span>);</span><br><span class="line">        <span class="keyword">if</span>(ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip))</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java常用String类小记</title>
      <link href="/2017/11/06/Java%E5%B8%B8%E7%94%A8String%E7%B1%BB%E5%B0%8F%E8%AE%B0/"/>
      <url>/2017/11/06/Java%E5%B8%B8%E7%94%A8String%E7%B1%BB%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="java-lang-String"><a href="#java-lang-String" class="headerlink" title="java.lang.String"></a>java.lang.String</h1><hr><!-- TOC --><ul><li><a href="#概览">概览</a></li><li><a href="#继承结构">继承结构</a><ul><li><a href="#serializable">Serializable</a></li><li><a href="#charsequence">CharSequence</a></li><li><a href="#comparablet">Comparable<t></t></a></li></ul></li><li><a href="#字符集简介">字符集简介</a></li><li><a href="#重要域成员">重要域成员</a></li><li><a href="#重要方法">重要方法</a><ul><li><a href="#代码点及代码单元">代码点及代码单元</a></li><li><a href="#比较">比较</a></li><li><a href="#搜索">搜索</a></li><li><a href="#提取子串">提取子串</a></li><li><a href="#创建全大写全小写副本">创建全大写/全小写副本</a></li></ul></li><li><a href="#一些体会">一些体会</a></li><li><a href="#参考">参考</a></li></ul><!-- /TOC --><hr><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><code>String</code> 类代表了字符串。所有类似于 <code>&quot;abc&quot;</code> 的字符串字面量都是该类的实例。</p><p>字符串是常量，从创建后就不可更改。需要修改的字符串可以使用 <code>StringBuffer</code>。因为 <code>String</code> 实例不可变，所以他们可以安全的共享。一些例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">// 与上面一行代码效果相同</span></span><br><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"abc"</span>);</span><br><span class="line">String cde = <span class="string">"cde"</span>;</span><br><span class="line">System.out.println(<span class="string">"abc"</span> + cde);</span><br><span class="line">String c = <span class="string">"abc"</span>.substring(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">String d = cde.substring(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><code>String</code> 类也包含了一些对单个字符的操作、比较、搜索、提取子串、创建全大写/全小写副本的方法。</p><p>Java 语言为字符串连接操作符(+)添加了特殊支持。向左连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  example 1</span></span><br><span class="line"><span class="string">"The square root of 2 is "</span> + Math.sqrt(<span class="number">2</span>)</span><br><span class="line">  |</span><br><span class="line">  v</span><br><span class="line"><span class="string">"The square root of 2 is 1.4142135623730952"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="string">" fiddlers"</span></span><br><span class="line">  |</span><br><span class="line">  v</span><br><span class="line"><span class="string">"3 fiddlers"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example 3</span></span><br><span class="line"><span class="string">"fiddlers "</span> + <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">  |</span><br><span class="line">  v</span><br><span class="line"><span class="string">"fiddlers 12"</span></span><br></pre></td></tr></table></figure><p><code>String</code> 使用 UTF-16 来编码（一个字符两个字节或四个字节）。拓展字符用 surrogate pairs 来表示，占用四个字节。（PS：该术语是编码领域的，可以参考之前写的一篇笔记: <a href="../common/unicodeStandard.md">Unicode 学习笔记</a>）</p><p><code>String</code> 也提供了一些处理代码点(Unicode code points)和代码单元(Unicode code units)的方法(PS:这两个也是编码领域术语，可以参考：<a href="../common/unicodeStandard.md">Unicode 学习笔记</a>)。</p><p>String 连接操作符的具体实现留给 Java 编译器来决定，只要编译器能够完全遵循 Java 语言规范即可。例如 <code>javac</code> 编译器可能用 <code>StringBuffer</code>、<code>StringBuilder</code> 或 <code>java.lang.invoke.StringCOncatFactory</code> 来实现。</p><h2 id="继承结构"><a href="#继承结构" class="headerlink" title="继承结构"></a>继承结构</h2><p><img src="/images/String.png" alt=""></p><h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>类通过实现 <code>java.io.Serializable</code> 接口来启用序列化能力。未实现该接口的类其状态将不会被序列化(抛出 <code>NotSerializableException</code> 异常)。该接口没有任何域或方法，只是表示可序列化的语义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializableTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    String outputfile = <span class="string">"/Users/chen/Desktop/serializable"</span>;</span><br><span class="line">    ST instance = <span class="keyword">new</span> ST();</span><br><span class="line"></span><br><span class="line">    ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(outputfile));</span><br><span class="line">    outputStream.writeObject(instance);</span><br><span class="line">    outputStream.close();</span><br><span class="line"></span><br><span class="line">    ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(outputfile));</span><br><span class="line">    ST newInstance = (ST) inputStream.readObject();</span><br><span class="line">    inputStream.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(newInstance);</span><br><span class="line">    System.out.println(instance.equals(newInstance));  <span class="comment">// true</span></span><br><span class="line">    System.out.println(instance == newInstance); <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ST</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> publicField = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> protectedField = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> defaultField = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> privateField = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ST st = (ST) o;</span><br><span class="line">        <span class="keyword">return</span> publicField == st.publicField &amp;&amp;</span><br><span class="line">                protectedField == st.protectedField &amp;&amp;</span><br><span class="line">                defaultField == st.defaultField &amp;&amp;</span><br><span class="line">                privateField == st.privateField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(publicField, protectedField, defaultField, privateField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ST&#123;"</span> +</span><br><span class="line">                <span class="string">"publicField="</span> + publicField +</span><br><span class="line">                <span class="string">", protectedField="</span> + protectedField +</span><br><span class="line">                <span class="string">", defaultField="</span> + defaultField +</span><br><span class="line">                <span class="string">", privateField="</span> + privateField +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的对象中引用的所有对象都必须实现了该接口，否则也会抛出 <code>NotSerializableException</code> 异常。</p><h3 id="CharSequence"><a href="#CharSequence" class="headerlink" title="CharSequence"></a>CharSequence</h3><p>一个 <code>CharSequence</code> 是一个只读的 <code>char</code> 序列。该接口为不同的实现提供了统一的只读访问。</p><p>该接口并没有重新定义 <code>equals() &amp; hashCode()</code> 方法，直接比较两个实现类的实例结果是未定义的。所以将 <code>CharSequence</code> 的实例作为 <code>set</code> 的元素或 <code>map</code> 的 <code>key</code> 是不合适的。</p><p>主要的实现类：<code>CharBuffer, Segment, String, StringBuffer, StringBuilder</code></p><p><code>String</code> 中也实现了与 <code>CharSequence</code> 实例进行比较、拼接等操作的函数。</p><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable<t></t></h3><p>主要用于集合中元素排序，两个元素直接比较。</p><h2 id="字符集简介"><a href="#字符集简介" class="headerlink" title="字符集简介"></a>字符集简介</h2><p><code>String</code> 类中用到了两种字符集 <code>Latin1 &amp; UTF-16</code>. <code>Latin1</code> 拓展了 <code>ASCII</code> 编码，但是也是用一个字节来表示，<code>UTF-16</code> 使用两个或四个字节表示一个字符。简要介绍请看：<a href="../common/unicodeStandard.md">Unicode 学习笔记</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    在构造一个 String 对象时，String 会尝试对传入的参数进行压缩。比如</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    String latin1 = new String("latin1".toCharArray());</span></span><br><span class="line"><span class="comment">    String utf16 = new String("使用 UTF-16 字符集".toCharArray());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    入参是 char[]，java 中 char 是两个字节，byte 是一个字节，压缩后 latin1 的 value 字段是 6 个 byte，utf16 无法进行压缩，所以依旧是 26 个 byte。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    下面是 java.lang.StringUTF16 中进行压缩的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">// compressedCopy char[] -&gt; byte[]</span></span><br><span class="line">    <span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compress</span><span class="params">(<span class="keyword">char</span>[] src, <span class="keyword">int</span> srcOff, <span class="keyword">byte</span>[] dst, <span class="keyword">int</span> dstOff, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = src[srcOff];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0xFF</span>) &#123;     <span class="comment">// 超出了 LATIN1 所能表示的范围，直接返回不再压缩</span></span><br><span class="line">                len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dst[dstOff] = (<span class="keyword">byte</span>)c;</span><br><span class="line">            srcOff++;</span><br><span class="line">            dstOff++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="重要域成员"><a href="#重要域成员" class="headerlink" title="重要域成员"></a>重要域成员</h2><ol><li><code>private final byte[] value;</code><ul><li>用来存储字符串的字节序列。</li></ul></li><li><code>private final byte coder;</code><ul><li>用来暗示 <code>value</code> 中的字节数组的编码方式。有 <code>LATIN1 &amp; UTF16</code> 可选。</li><li><code>static final byte LATIN1 = 0;</code></li><li><code>static final byte UTF16  = 1;</code></li></ul></li><li><code>private int hash;</code><ul><li>缓存字符串哈希值。默认是 0. 在 首次调用 <code>hashCode()</code> 方法时计算并缓存。</li></ul></li><li><code>static final boolean COMPACT_STRINGS;</code><ul><li>用来决定 <code>value</code> 是否进行压缩，默认是 true（压缩）。如果是 false 的话那么总是使用 UTF16 来编码字符串的字节流。在 <code>String</code> 类中，该域使用静态初始化块进行初始化。</li></ul></li></ol><h2 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h2><ul><li>TIPS：本来计划中有这部分的内容，但是读过源码理解了字符集的概念和 <code>String</code> 的处理方式以后感觉这部分就不需要再写了，有兴趣可以自己看。</li></ul><h3 id="代码点及代码单元"><a href="#代码点及代码单元" class="headerlink" title="代码点及代码单元"></a>代码点及代码单元</h3><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h3 id="提取子串"><a href="#提取子串" class="headerlink" title="提取子串"></a>提取子串</h3><h3 id="创建全大写-全小写副本"><a href="#创建全大写-全小写副本" class="headerlink" title="创建全大写/全小写副本"></a>创建全大写/全小写副本</h3><h2 id="一些体会"><a href="#一些体会" class="headerlink" title="一些体会"></a>一些体会</h2><p>理解 <code>String</code> 类最重要的不是会用 <code>String</code> 的 API，而是对字符集本身的理解，字符集是什么，它解决了什么问题，字符是怎么编码的等等，只有很好的理解了字符集才能很好的理解 <code>String</code> 的行为。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/String.html" target="_blank" rel="noopener">java.lang.String</a></li><li><a href="https://docs.oracle.com/javase/specs/jls/se9/html/jls-15.html#jls-15.18.1" target="_blank" rel="noopener">15.18.1. String Concatenation Operator +</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/io/Serializable.html" target="_blank" rel="noopener">Serializable</a></li><li><a href="http://www.cnblogs.com/chenfei0801/archive/2013/04/05/3001149.html" target="_blank" rel="noopener">JAVA 对象序列化（一）——Serializable</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/CharSequence.html" target="_blank" rel="noopener">CharSequence</a></li><li><a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="noopener">ISO/IEC 8859-1</a></li></ol>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 字符串拼接 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Effective-Java学习笔记</title>
      <link href="/2017/11/01/Effective-Java/"/>
      <url>/2017/11/01/Effective-Java/</url>
      <content type="html"><![CDATA[<h1 id="Effective-Java-学习笔记"><a href="#Effective-Java-学习笔记" class="headerlink" title="Effective Java 学习笔记"></a>Effective Java 学习笔记</h1><!-- TOC --><ul><li><a href="#effective-java-学习笔记">Effective Java 学习笔记</a><ul><li><a href="#第三章-对所有方法都通用的方法">第三章 对所有方法都通用的方法</a><ul><li><a href="#equals"><code>equals()</code></a></li><li><a href="#hashcode"><code>hashCode()</code></a></li></ul></li><li><a href="#第六章-枚举和注解">第六章 枚举和注解</a></li><li><a href="#第七章-方法">第七章 方法</a></li><li><a href="#第八章-通用程序设计">第八章 通用程序设计</a></li></ul></li></ul><!-- /TOC --><hr><h2 id="第三章-对所有方法都通用的方法"><a href="#第三章-对所有方法都通用的方法" class="headerlink" title="第三章 对所有方法都通用的方法"></a>第三章 对所有方法都通用的方法</h2><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a><code>equals()</code></h3><p>当类为值类（以类中保存的值来区别两个实例）时（枚举例外），需要重写 <code>equals()</code> 和 <code>hashCode()</code> 方法。</p><p>重写 <code>equals()</code> 需要遵守的约定：</p><ol><li>非空。<code>x != null</code></li><li>自反。<code>x.equals(x) == true</code></li><li>对称。<code>if(x.equals(y)) y.equals(x)</code></li><li>传递。<code>if(x.equals(y) &amp;&amp; y.equals(z)) x.equals(z)</code></li><li>一致。 只要对象不变，每次调用必须能返回相同的结果。</li></ol><p>Tips：</p><ul><li><p>增加值组件时使用符合而不是继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || !(o <span class="keyword">instanceof</span> Point)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Point point = (Point) o;</span><br><span class="line">        <span class="keyword">return</span> x == point.x &amp;&amp; y == point.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = x;</span><br><span class="line">        result = <span class="number">31</span> * result + y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point point;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(Point point, Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.point = point;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || !(o <span class="keyword">instanceof</span> ColorPoint)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ColorPoint that = (ColorPoint) o;</span><br><span class="line">        <span class="keyword">if</span> (point != <span class="keyword">null</span> ? !point.equals(that.point) : that.point != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color != <span class="keyword">null</span> ? color.equals(that.color) : that.color == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = point != <span class="keyword">null</span> ? point.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (color != <span class="keyword">null</span> ? color.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于 <code>float</code> 和 <code>double</code> 类型的值进行特殊处理 <code>Float.compare(f1, f2)</code></p></li><li>域的比较顺序有可能会影响性能，所以应先比较最有可能不同的域及开销最低的域。</li><li>总是要覆盖 <code>hashCode()</code> 方法。</li></ul><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a><code>hashCode()</code></h3><p>约定：</p><ol><li>在应用程序执行过程中，只要 <code>equals()</code> 方法未更改，同一个对象调用 <code>hashCode()</code> 返回结果应该一致。</li><li><code>if(x.equals(y)) x.hashCode() == y.hashCode();</code></li></ol><p>实现约定:</p><ol><li>将一个非 0 常量赋给 <code>result</code>。</li><li>计算关键域的 hashCode<ul><li><code>boolean</code> –&gt; <code>field ? 1 : 0;</code></li><li><code>Byte | char | short | int</code> –&gt; <code>(int)field</code></li><li><code>long</code> –&gt; <code>(int)(field ^ (field &gt;&gt;&gt; 32))</code></li><li><code>float</code> –&gt; <code>Float.floatToIntBits(field)</code></li><li><code>double</code> –&gt; <code>Double.doubleToLongBits(field)</code> –&gt; (long –&gt; int)</li><li>对象引用 –&gt; 直接调用 <code>hashCode()</code></li><li>数组 –&gt; <code>Arrays.hashCode()</code>;</li></ul></li><li><code>result = 31 * result + hashCode;</code></li><li>检验相等实例是否有相同 hashCode。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> areaCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> prefix;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> lineNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(<span class="keyword">short</span> areaCode, <span class="keyword">short</span> prefix, <span class="keyword">short</span> lineNumber)</span> </span>&#123;</span><br><span class="line">        rangeCheck(areaCode, <span class="number">999</span>, <span class="string">"area code"</span>);</span><br><span class="line">        rangeCheck(prefix, <span class="number">999</span>, <span class="string">"prefix"</span>);</span><br><span class="line">        rangeCheck(lineNumber, <span class="number">9999</span>, <span class="string">"lineNumber"</span>);</span><br><span class="line">        <span class="keyword">this</span>.areaCode = areaCode;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">        <span class="keyword">this</span>.lineNumber = lineNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">int</span> max, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arg &lt; <span class="number">0</span> || arg &gt; max)&#123;</span><br><span class="line">            <span class="keyword">new</span> IllegalArgumentException(name + <span class="string">": "</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || !(o <span class="keyword">instanceof</span> PhoneNumber)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PhoneNumber that = (PhoneNumber) o;</span><br><span class="line">        <span class="keyword">return</span> lineNumber == that.lineNumber</span><br><span class="line">                &amp;&amp; areaCode == that.areaCode</span><br><span class="line">                &amp;&amp; prefix == that.prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = (<span class="keyword">int</span>) areaCode;</span><br><span class="line">        result = <span class="number">31</span> * result + (<span class="keyword">int</span>) prefix;</span><br><span class="line">        result = <span class="number">31</span> * result + (<span class="keyword">int</span>) lineNumber;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PhoneNumber&#123;"</span> +</span><br><span class="line">                <span class="string">"areaCode="</span> + areaCode +</span><br><span class="line">                <span class="string">", prefix="</span> + prefix +</span><br><span class="line">                <span class="string">", lineNumber="</span> + lineNumber +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips:</p><ol><li>删除冗余域。</li><li>计算 hashCode 开销较大时，可以将其缓存到类内部。创建时计算或首次调用 <code>hashCode()</code> 时计算。</li></ol><h2 id="第六章-枚举和注解"><a href="#第六章-枚举和注解" class="headerlink" title="第六章 枚举和注解"></a>第六章 枚举和注解</h2><ol><li>使用 <code>enum</code> 代替 int 常量</li><li>用实例域代替序数。<ul><li>将特定枚举常量关联到特定的 int 值。</li></ul></li><li>使用 <code>EnumSet</code> 代替位域<ul><li>位域：使用或运算将多个常量合并到一个集合中。<code>text.applyStyles(STYLE_BOLD | STYLE_ITALIC)</code></li><li><code>text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC))</code></li></ul></li><li>使用 <code>EnumMap</code> 代替序数索引<ul><li><code>Map&lt;Herb.Type, Set&lt;Herb&gt;&gt; herbsByType = new EnumMap&lt;Herb.Type, Set&lt;Herb&gt;&gt;(Herb.Type.class);</code></li><li>多维：<code>EnumMap&lt;..., EnumMap&lt;...&gt;&gt;</code></li></ul></li></ol><h2 id="第七章-方法"><a href="#第七章-方法" class="headerlink" title="第七章 方法"></a>第七章 方法</h2><ol><li>检查参数有效性<ul><li><code>public</code> 方法使用异常</li><li><code>private</code> 方法使用断言</li></ul></li><li>必要时进行保护性拷贝<ul><li>getXXX()</li><li>setXXX()</li><li>constructor</li></ul></li><li>谨慎设计方法签名<ul><li>命名方式要统一</li><li>参数不宜超过 3 个。可以通过创建对象来传递多个参数</li><li>参数类型优先使用接口</li></ul></li><li>慎用重载<ul><li>重载方法是在编译期确定的（静态绑定）</li></ul></li><li>慎用可变参数</li><li>返回 0 长度的数组或集合，而不是 <code>null</code></li><li>为所有导出的 API 元素编写文档注释<ul><li><a href="http://www.oracle.com/technetwork/articles/java/index-137868.html" target="_blank" rel="noopener">how to write doc comments</a></li></ul></li></ol><h2 id="第八章-通用程序设计"><a href="#第八章-通用程序设计" class="headerlink" title="第八章 通用程序设计"></a>第八章 通用程序设计</h2><ol><li>将局部变量的作用域最小化<ul><li>第一次使用时声明。</li><li><code>for-each &gt; for &gt; while</code></li></ul></li><li>对含有一组元素的数据结构，实现 <code>Iterable</code> 接口</li><li>使用最合适的类型来存储数据</li><li>使用 <code>StringBuilder</code> 来连接字符串</li><li>通过接口引用对象（面向接口编程）</li></ol>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谈谈Java类加载机制</title>
      <link href="/2017/10/29/%E8%B0%88%E8%B0%88Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/10/29/%E8%B0%88%E8%B0%88Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="谈谈-Java-类加载机制"><a href="#谈谈-Java-类加载机制" class="headerlink" title="谈谈 Java 类加载机制"></a>谈谈 Java 类加载机制</h1><p>最近在学习 Tomcat 架构，其中很重要的一个模块是类加载器，因为以前学习的不够深入，所以趁这个机会好好把类加载机制搞明白。</p><!-- TOC --><ul><li><a href="#overview">Overview</a></li><li><a href="#api-for-class-loading">API for class loading</a><ul><li><a href="#javalangclassloader"><code>java.lang.ClassLoader</code></a></li><li><a href="#javasecuritysecureclassloader"><code>java.security.SecureClassLoader</code></a></li><li><a href="#javaneturlclassloader"><code>java.net.URLClassLoader</code></a></li></ul></li><li><a href="#tomcat-8515-class-loading-mechanism">Tomcat 8.5.15 class loading Mechanism</a></li><li><a href="#reference">Reference</a></li></ul><!-- /TOC --><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="../res/Class-loader.png" alt=""></p><p>类加载器主要分为两类，一类是 JDK 默认提供的，一类是用户自定义的。<br>JDK 默认提供三种类加载器</p><ol><li><code>Bootstrap ClassLoader</code>，启动类加载器，每次执行 <code>java</code> 命令时都会使用该加载器为虚拟机加载核心类。该加载器是由 <code>native code</code> 实现，而不是 Java 代码，加载类的路径为 <code>&lt;JAVA_HOME&gt;/jre/lib</code>。特别的 <code>&lt;JAVA_HOME&gt;/jre/lib/rt.jar</code> 中包含了 <code>sun.misc.Launcher</code> 类， 而 <code>sun.misc.Launcher$ExtClassLoader</code> 和 <code>sun.misc.Launcher$AppClassLoader</code> 都是 <code>sun.misc.Launcher</code> 的内部类，所以拓展类加载器和系统类加载器都是由启动类加载器加载的。</li><li><code>Extension ClassLoader</code>, 拓展类加载器，用于加载拓展库中的类。拓展库路径为 <code>&lt;JAVA_HOME&gt;/jre/lib/ext/</code>。实现类为 <code>sun.misc.Launcher$ExtClassLoader</code></li><li><code>System ClassLoader</code>, 系统类加载器。用于加载 CLASSPATH 中的类。实现类为 <code>sun.misc.Launcher$AppClassLoader</code></li></ol><p>用户自定义的类加载器</p><ol><li><code>Custom ClassLoader</code>, 一般都是 <code>java.lang.ClassLoder</code> 的子类</li></ol><p>正统的类加载机制是基于双亲委派的，也就是当调用类加载器加载类时，首先将加载任务委派给双亲，若双亲无法加载成功时，自己才进行类加载。</p><p>在实例化一个新的类加载器时，我们可以为其指定一个 <code>parent</code>，即双亲，若未显式指定，则 <code>System ClassLoader</code> 就作为默认双亲。</p><p>具体的说，类加载任务是由 <code>ClassLoader</code> 的 <code>loadClass()</code> 方法来执行的，他会按照以下顺序加载类：</p><ol><li>通过 <code>findLoadedClass()</code> 看该类是否已经被加载。该方法为 native code 实现，若已加载则返回。</li><li>若未加载则委派给双亲，<code>parent.loadClass()</code>，若成功则返回</li><li>若未成功，则调用 <code>findClass()</code> 方法加载类。<code>java.lang.ClassLoader</code> 中该方法只是简单的抛出一个 <code>ClassNotFoundException</code> 所以，自定义的 ClassLoader 都需要 Override <code>findClass()</code> 方法</li></ol><h2 id="API-for-class-loading"><a href="#API-for-class-loading" class="headerlink" title="API for class loading"></a>API for class loading</h2><h3 id="java-lang-ClassLoader"><a href="#java-lang-ClassLoader" class="headerlink" title="java.lang.ClassLoader"></a><code>java.lang.ClassLoader</code></h3><ul><li><code>ClassLoader</code> 是一个抽象类。</li><li>待加载的类必须用 <code>The Java™ Language Specification</code> 定义的全类名，全类名的定义请查阅 <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1" target="_blank" rel="noopener">The Form of a Binary</a>。</li><li>给定一个全类名，类加载器应该去定位该类所在的位置。通用的策略是将全类名转换为类文件路径，然后通过类文件路径在文件系统中定位。</li><li><p>每一个加载到内存的类都由一个 Class 对象来表示，每一个 Class 对象都有一个指向加载该类的类加载器的引用。但是数组的 Class 对象是由 Java 运行时环境创建的，通过 <code>Class.getClassLoader()</code> 方法返回的是数组元素的类加载器，若数组元素是基本类型，则返回 <code>null</code>，若类是由 <code>Bootstrap ClassLoader</code> 加载的话也是返回 <code>null</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Object 类在 &lt;java_home&gt;/jre/lib/rt.jar 中，</span></span><br><span class="line">        <span class="comment">// 由 Bootstrap ClassLoader 加载，由于该类加载器是由 native code 编写</span></span><br><span class="line">        <span class="comment">// 所以输出为 null</span></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[<span class="number">5</span>];</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(objects.getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ZipFileAttributes 类在 &lt;java_home&gt;/jre/lib/ext/zipfs.jar 中，</span></span><br><span class="line">        <span class="comment">// 由 Extension ClassLoader 加载，</span></span><br><span class="line">        <span class="comment">// 输出为  sun.misc.Launcher$ExtClassLoader@4b67cf4d</span></span><br><span class="line">        ZipFileAttributes[] attributes = <span class="keyword">new</span> ZipFileAttributes[<span class="number">5</span>];</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(attributes.getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Main 类是自定义的类，</span></span><br><span class="line">        <span class="comment">// 默认由 System ClassLoader 加载，</span></span><br><span class="line">        <span class="comment">// 输出为 sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        Main[] array = <span class="keyword">new</span> Main[<span class="number">5</span>];</span><br><span class="line">        array[<span class="number">0</span>] = <span class="keyword">new</span> Main();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(array.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ClassLoader</code> 默认支持并行加载，但是其子类必须调用 <code>ClassLoader.registerAsParallelCapable()</code> 来启用并行加载</p></li><li>一般来说,JVM 从本地文件系统加载类的行为是与平台有关的。</li><li><code>defineClass()</code> 方法可以将字节流转换成一个 <code>Class</code> 对象。然后调用 <code>Class.newInstance()</code> 来创建类的实例</li></ul><h3 id="java-security-SecureClassLoader"><a href="#java-security-SecureClassLoader" class="headerlink" title="java.security.SecureClassLoader"></a><code>java.security.SecureClassLoader</code></h3><p>增加了一层权限验证，因为关注点不在安全，所以暂不讨论。</p><h3 id="java-net-URLClassLoader"><a href="#java-net-URLClassLoader" class="headerlink" title="java.net.URLClassLoader"></a><code>java.net.URLClassLoader</code></h3><p>该类加载器用来加载 URL 指定的 JAR 文件或目录中的类和资源，以 <code>/</code> 结尾的 URL 认为是目录，否则认为是 JAR 文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尝试通过 URLClassLoader 来加载桌面下的 Test 类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL[] urls = <span class="keyword">new</span> URL[<span class="number">1</span>];</span><br><span class="line">            URLStreamHandler streamHandler = <span class="keyword">null</span>;</span><br><span class="line">            File classPath = <span class="keyword">new</span> File(<span class="string">"/home/chen/Desktop/"</span>);</span><br><span class="line">            String repository = (<span class="keyword">new</span> URL(<span class="string">"file"</span>, <span class="keyword">null</span>,</span><br><span class="line">                    classPath.getCanonicalPath() + File.separator))</span><br><span class="line">                    .toString();</span><br><span class="line">            urls[<span class="number">0</span>] = <span class="keyword">new</span> URL(<span class="keyword">null</span>, repository, streamHandler);</span><br><span class="line"></span><br><span class="line">            ClassLoader loader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line"></span><br><span class="line">            Class testClass = loader.loadClass(<span class="string">"Test"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// output:  java.net.URLClassLoader@7f31245a</span></span><br><span class="line">            System.out.println(testClass.getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tomcat-8-5-15-class-loading-Mechanism"><a href="#Tomcat-8-5-15-class-loading-Mechanism" class="headerlink" title="Tomcat 8.5.15 class loading Mechanism"></a>Tomcat 8.5.15 class loading Mechanism</h2><p><img src="../res/tomcat-classloader.png" alt=""></p><p>Tomcat 使用正统的类加载机制(双亲委派),但部分地方做了改动。</p><ul><li><code>Bootstrap classLoader</code> 和 <code>Extension classLoader</code> 的作用不变</li><li><p><code>System classLoader</code> 正常情况下加载的是 <code>CLASSPATH</code> 下的类，但是 Tomcat 的启动脚本并未使用该变量，而是从以下仓库下加载类：</p><ol><li><code>$CATALINA_HOME/bin/bootstrap.jar</code> 包含了 Tomcat 的启动类。在该启动类中创建了 <code>Common classLoader</code>、<code>Catalina classLoader</code>、<code>shared classLoader</code>。因为 <code>$CATALINA_BASE/conf/catalina.properties</code> 中只对 <code>common.loader</code> 属性做了定义，<code>server.loader</code> 和 <code>shared.loader</code> 属性为空，所以默认情况下，这三个 classLoader 都是 <code>CommonLoader</code>。具体的代码逻辑可以查阅 <code>org.apache.catalina.startup.Bootstrap</code> 类的 <code>initClassLoaders()</code> 方法和 <code>createClassLoader()</code> 方法。</li><li><code>$CATALINA_BASE/bin/tomcat-juli.jar</code> 包含了 Tomcat 日志模块所需要的实现类</li><li><code>$CATALINA_HOME/bin/commons-daemon.jar</code></li></ol></li><li><code>Common classLoader</code> 是位于 Tomcat 应用服务器顶层的公用类加载器。由其加载的类可以由 Tomcat 自身类和所有应用程序使用。扫描路径由 <code>$CATALINA_BASE/conf/catalina.properties</code> 文件中的 <code>common.loader</code> 属性定义。默认是 <code>$CATALINA_HOME/lib</code>.</li><li><code>catalina classLoader</code> 用于加载服务器内部可见类，这些类应用程序不能访问。</li><li><code>shared classLoader</code> 用于加载应用程序共享类，这些类服务器不会依赖。</li><li><code>Webapp classLoader</code> 。每个应用程序都会有一个独一无二的 <code>webapp classloader</code>，他用来加载本应用程序 <code>/WEB-INF/classes</code> 和 <code>/WEB-INF/lib</code> 下的类。</li></ul><p>特别的：</p><p><code>Webapp classLoader</code> 的默认行为会与正常的双亲委派模式不同：</p><ol><li>从 <code>Bootstrap classloader</code> 加载</li><li>若没有，从 <code>/WEB-INF/classes</code> 加载</li><li>若没有，从 <code>/WEB-INF/lib/*.jar</code> 加载</li><li>若没有，则依次从 <code>System</code>、<code>Common</code>、<code>shared</code> 加载（该步骤使用双亲委派）</li></ol><p>当然了，我们也可以通过配置来使 <code>Webapp classLoader</code> 严格按照双亲委派模式加载类：</p><ol><li>通过在工程的 <code>META-INF/context.xml</code>（和 <code>WEB-INF/classes</code> 在同一目录下） 配置文件中添加 <code>&lt;Loader delegate=&quot;true&quot;/&gt;</code></li><li>因为 <code>Webapp classLoader</code> 的实现类是 <code>org.apache.catalina.loader.WebappLoader</code>，他有一个属性叫 <code>delegate</code>， 用来控制类加载器的加载行为，默认为 <code>false</code>，我们可以使用 <code>set</code> 方法，将其设为 <code>true</code> 来启用严格双亲委派加载模式。</li></ol><p>严格双亲委派模式加载步骤：</p><ol><li>从 <code>Bootstrap classloader</code> 加载</li><li>若没有，则依次从 <code>System</code>、<code>Common</code>、<code>shared</code> 加载</li><li>若没有，从 <code>/WEB-INF/classes</code> 加载</li><li>若没有，从 <code>/WEB-INF/lib/*.jar</code> 加载</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://docs.oracle.com/javase/tutorial/ext/basics/load.html" target="_blank" rel="noopener">The Java Class Loading Mechanism</a></li><li><a href="https://en.wikipedia.org/wiki/Java_Classloader" target="_blank" rel="noopener">Java Classloader</a></li><li><a href="https://tomcat.apache.org/tomcat-8.5-doc/class-loader-howto.html" target="_blank" rel="noopener">Class Loader HOW-TO - Apache Tomcat 8</a></li><li><a href="">《Tomcat 架构解析》</a></li><li><a href="">《深入理解 Java 虚拟机》</a></li></ol>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三次握手四次挥手小记</title>
      <link href="/2017/10/29/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%B0%8F%E8%AE%B0/"/>
      <url>/2017/10/29/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p>!(示意图)[/images/tcp.png]</p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号 并交换 TCP窗口大小信息。</p><ol><li><p>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x;然后，客户端进入SYN_SEND状态，等待服务器的确认;</p></li><li><p>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1);同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y;服务器端将上述所有信息放到一个报文段(即SYN+ACK报文段)中，一并发送给客户端，此时服务器进入SYN_RECV状态;</p></li><li><p>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p></li></ol><p>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</p><h2 id="四次握手"><a href="#四次握手" class="headerlink" title="四次握手"></a>四次握手</h2><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次挥手”。</p><ol><li><p>第一次挥手：主机1(可以使客户端，也可以是服务器端)，设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段;此时，主机1进入FIN_WAIT_1状态;这表示主机1没有数据要发送给主机2了;</p></li><li><p>第二次挥手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1;主机1进入FIN_WAIT_2状态;主机2告诉主机1，我也没有数据要发送了，可以进行关闭连接了;</p></li><li><p>第三次挥手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入CLOSE_WAIT状态;</p></li><li><p>第四次挥手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态;主机2收到主机1的ACK报文段以后，就关闭连接;此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p></li></ol><h2 id="为什么要三次握手？"><a href="#为什么要三次握手？" class="headerlink" title="为什么要三次握手？"></a>为什么要三次握手？</h2><p>在谢希仁的《计算机网络》中是这样说的：</p><blockquote><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p></blockquote><p>在书中同时举了一个例子，如下：</p><blockquote><p> “已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，<br>  而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一<br>    个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新<br>的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server<br>发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，<br>也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，<br>server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。”</p></blockquote><p>例如刚才那种情况，</p><p>client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p><p>这就很明白了，防止了服务器端的一直等待而浪费资源。</p><h2 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手?"></a>为什么要四次挥手?</h2><p>那四次挥手又是为何呢?TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工 模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2， 它的数据已经全部发送完毕了;但是，这个时候主机1还是可以接受来自主机2的数据;当主机2返回ACK报文 段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的;当主机2也发送了FIN 报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此 就会愉快的中断这次TCP连接。如果要正确的理解四次挥手的原理，就需要了解四次挥手过程中的状态变化。</p><ol><li><p>FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等 待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时， 它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报 文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK 报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。 (主动方)</p></li><li><p>FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即 有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。 (主动方)</p></li><li><p>CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢?当对方close一个SOCKET后发送FIN 报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实 际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个 SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关 闭连接。(被动方)</p></li><li><p>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报 文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。(被动方)</p></li><li><p>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。 如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无 须经过FIN_WAIT_2状态。(主动方)</p></li><li><p>CLOSED: 表示连接中断。</p></li></ol>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>读一读ConcurrentHashMap,收获也颇多</title>
      <link href="/2017/10/24/%E8%AF%BB%E4%B8%80%E8%AF%BBConcurrentHashMap,%E6%94%B6%E8%8E%B7%E4%B9%9F%E9%A2%87%E5%A4%9A/"/>
      <url>/2017/10/24/%E8%AF%BB%E4%B8%80%E8%AF%BBConcurrentHashMap,%E6%94%B6%E8%8E%B7%E4%B9%9F%E9%A2%87%E5%A4%9A/</url>
      <content type="html"><![CDATA[<h2 id="一、背景："><a href="#一、背景：" class="headerlink" title="一、背景："></a>一、背景：</h2><ol><li><p>线程不安全的HashMap<br> 因为多线程环境下，使用Hashmap进行put操作会引起死循环，导致CPU利用率接近100%，所以在并发情况下不能使用HashMap。</p></li><li><p>效率低下的HashTable容器<br>  HashTable容器使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用get方法来获取元素，所以竞争越激烈效率越低。</p></li><li><p>锁分段技术<br> <a href="/image/hashmap.png">!技术图</a><br> HashTable容器在竞争激烈的并发环境下表现出效率低下的原因，是因为所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。有些方法需要跨段，比如size()和containsValue()，它们可能需要锁定整个表而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁。这里“按顺序”是很重要的，否则极有可能出现死锁，在ConcurrentHashMap内部，段数组是final的，并且其成员变量实际上也是final的，但是，仅仅是将数组声明为final的并不保证数组成员也是final的，这需要实现上的保证。这可以确保不会出现死锁，因为获得锁的顺序是固定的。</p></li></ol><p>ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成。Segment是一种可重入锁ReentrantLock，在ConcurrentHashMap里扮演锁的角色，HashEntry则用于存储键值对数据。一个ConcurrentHashMap里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构， 一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素， 每个Segment守护者一个HashEntry数组里的元素,当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁。</p><h2 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h2><p>当有一个大数组时需要在多个线程共享时就可以考虑是否把它给分层多个节点了，避免大锁。并可以考虑通过hash算法进行一些模块定位。<br>其实不止用于线程，当设计数据表的事务时（事务某种意义上也是同步机制的体现），可以把一个表看成一个需要同步的数组，如果操作的表数据太多时就可以考虑事务分离了（这也是为什么要避免大表的出现），比如把数据进行字段拆分，水平分表等.</p><h2 id="三、源码解读"><a href="#三、源码解读" class="headerlink" title="三、源码解读"></a>三、源码解读</h2><p>   ConcurrentHashMap(1.7及之前)中主要实体类就是三个：ConcurrentHashMap（整个Hash表）,Segment（桶），HashEntry（节点），对应上面的图可以看出之间的关系<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* The segments, each of which is a specialized hash table </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class="line">不变(Immutable)和易变(Volatile)</span><br><span class="line">    ConcurrentHashMap完全允许多个读操作并发进行，读操作并不需要加锁。如果使用传统的技术，如HashMap中的实现，如果允许可以在hash链的中间添加或删除元素，读操作不加锁将得到不一致的数据。ConcurrentHashMap实现技术是保证HashEntry几乎是不可变的。HashEntry代表每个hash链中的一个节点，其结构如下所示：</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;  </span><br><span class="line">     <span class="keyword">final</span> K key;  </span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> hash;  </span><br><span class="line">     <span class="keyword">volatile</span> V value;  </span><br><span class="line">     <span class="keyword">final</span> HashEntry&lt;K,V&gt; next;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>　　可以看到除了value不是final的，其它值都是final的，这意味着不能从hash链的中间或尾部添加或删除节点，因为这需要修改next 引用值，所有的节点的修改只能从头部开始。对于put操作，可以一律添加到Hash链的头部。但是对于remove操作，可能需要从中间删除一个节点，这就需要将要删除节点的前面所有节点整个复制一遍，最后一个节点指向要删除结点的下一个结点。这在讲解删除操作时还会详述。为了确保读操作能够看到最新的值，将value设置成volatile，这避免了加锁。<br>其它<br>　　为了加快定位段以及段中hash槽的速度，每个段hash槽的的个数都是2^n，这使得通过位运算就可以定位段和段中hash槽的位置。当并发级别为默认值16时，也就是段的个数，hash值的高4位决定分配在哪个段中。但是我们也不要忘记《算法导论》给我们的教训：hash槽的的个数不应该是 2^n，这可能导致hash槽分配不均，这需要对hash值重新再hash一次。（这段似乎有点多余了 ）</p><p>定位操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Segment&lt;K,V&gt; <span class="title">segmentFor</span><span class="params">(<span class="keyword">int</span> hash)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> segments[(hash &gt;&gt;&gt; segmentShift) &amp; segmentMask];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　既然ConcurrentHashMap使用分段锁Segment来保护不同段的数据，那么在插入和获取元素的时候，必须先通过哈希算法定位到Segment。可以看到ConcurrentHashMap会首先使用Wang/Jenkins hash的变种算法对元素的hashCode进行一次再哈希。<br>再哈希，其目的是为了减少哈希冲突，使元素能够均匀的分布在不同的Segment上，从而提高容器的存取效率。假如哈希的质量差到极点，那么所有的元素都在一个Segment中，不仅存取元素缓慢，分段锁也会失去意义。我做了一个测试，不通过再哈希而直接执行哈希计算。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.parseInt(<span class="string">"0001111"</span>, <span class="number">2</span>) &amp; <span class="number">15</span>);</span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"0011111"</span>, <span class="number">2</span>) &amp; <span class="number">15</span>);</span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"0111111"</span>, <span class="number">2</span>) &amp; <span class="number">15</span>);</span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"1111111"</span>, <span class="number">2</span>) &amp; <span class="number">15</span>);</span><br></pre></td></tr></table></figure></p><p>计算后输出的哈希值全是15，通过这个例子可以发现如果不进行再哈希，哈希冲突会非常严重，因为只要低位一样，无论高位是什么数，其哈希值总是一样。我们再把上面的二进制数据进行再哈希后结果如下，为了方便阅读，不足32位的高位补了0，每隔四位用竖线分割下。</p><p>0100｜0111｜0110｜0111｜1101｜1010｜0100｜1110<br>1111｜0111｜0100｜0011｜0000｜0001｜1011｜1000<br>0111｜0111｜0110｜1001｜0100｜0110｜0011｜1110<br>1000｜0011｜0000｜0000｜1100｜1000｜0001｜1010</p><p>可以发现每一位的数据都散列开了，通过这种再哈希能让数字的每一位都能参加到哈希运算当中，从而减少哈希冲突。ConcurrentHashMap通过以下哈希算法定位segment。<br>默认情况下segmentShift为28，segmentMask为15，再哈希后的数最大是32位二进制数据，向右无符号移动28位，意思是让高4位参与到hash运算中， (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask的运算结果分别是4，15，7和8，可以看到hash值没有发生冲突。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Segment&lt;K,V&gt; <span class="title">segmentFor</span><span class="params">(<span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> segments[(hash &gt;&gt;&gt; segmentShift) &amp; segmentMask];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>　　所有的成员都是final的，其中segmentMask和segmentShift主要是为了定位段，参见上面的segmentFor方法。<br>　　关于Hash表的基础数据结构，这里不想做过多的探讨。Hash表的一个很重要方面就是如何解决hash冲突，ConcurrentHashMap 和HashMap使用相同的方式，都是将hash值相同的节点放在一个hash链中。与HashMap不同的是，ConcurrentHashMap使用多个子Hash表，也就是段(Segment)。<br>每个Segment相当于一个子Hash表，它的数据成员如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">          * The number of elements in this segment's region. </span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">transient</span> volatileint count;  </span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">          * Number of updates that alter the size of the table. This is </span></span><br><span class="line"><span class="comment">          * used during bulk-read methods to make sure they see a </span></span><br><span class="line"><span class="comment">          * consistent snapshot: If modCounts change during a traversal </span></span><br><span class="line"><span class="comment">          * of segments computing size or checking containsValue, then </span></span><br><span class="line"><span class="comment">          * we might have an inconsistent view of state so (usually) </span></span><br><span class="line"><span class="comment">          * must retry. </span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">transient</span> <span class="keyword">int</span> modCount;  </span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">          * The table is rehashed when its size exceeds this threshold. </span></span><br><span class="line"><span class="comment">          * (The value of this field is always &lt;tt&gt;(int)(capacity * </span></span><br><span class="line"><span class="comment">          * loadFactor)&lt;/tt&gt;.) </span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">transient</span> <span class="keyword">int</span> threshold;  </span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">          * The per-segment table. </span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;  </span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">          * The load factor for the hash table.  Even though this value </span></span><br><span class="line"><span class="comment">          * is same for all segments, it is replicated to avoid needing </span></span><br><span class="line"><span class="comment">          * links to outer object. </span></span><br><span class="line"><span class="comment">          * <span class="doctag">@serial</span> </span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>　　count用来统计该段数据的个数，它是volatile，它用来协调修改和读取操作，以保证读取操作能够读取到几乎最新的修改。协调方式是这样的，每次修改操作做了结构上的改变，如增加/删除节点(修改节点的值不算结构上的改变)，都要写count值，每次读取操作开始都要读取count的值。这利用了 Java 5中对volatile语义的增强，对同一个volatile变量的写和读存在happens-before关系。modCount统计段结构改变的次数，主要是为了检测对多个段进行遍历过程中某个段是否发生改变，在讲述跨段操作时会还会详述。threashold用来表示需要进行rehash的界限值。table数组存储段中节点，每个数组元素是个hash链，用HashEntry表示。table也是volatile，这使得能够读取到最新的 table值而不需要同步。loadFactor表示负载因子。<br>删除操作remove(key)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">   hash = hash(key.hashCode());   </span><br><span class="line">   <span class="keyword">return</span> segmentFor(hash).remove(key, hash, <span class="keyword">null</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   整个操作是先定位到段，然后委托给段的remove操作。当多个删除操作并发进行时，只要它们所在的段不相同，它们就可以同时进行。<br>下面是Segment的remove方法实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V <span class="title">remove</span><span class="params">(Object key, <span class="keyword">int</span> hash, Object value)</span> </span>&#123;  </span><br><span class="line">    lock();  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">int</span> c = count - <span class="number">1</span>;  </span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;  </span><br><span class="line">        <span class="keyword">int</span> index = hash &amp; (tab.length - <span class="number">1</span>);  </span><br><span class="line">        HashEntry&lt;K,V&gt; first = tab[index];  </span><br><span class="line">        HashEntry&lt;K,V&gt; e = first;  </span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span> &amp;&amp; (e.hash != hash || !key.equals(e.key)))  </span><br><span class="line">            e = e.next;  </span><br><span class="line">        V oldValue = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            V v = e.value;  </span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.equals(v)) &#123;  </span><br><span class="line">                oldValue = v;  </span><br><span class="line"></span><br><span class="line">                <span class="comment">// All entries following removed node can stay  </span></span><br><span class="line">                <span class="comment">// in list, but all preceding ones need to be  </span></span><br><span class="line">                <span class="comment">// cloned.  </span></span><br><span class="line">                ++modCount;  </span><br><span class="line">                HashEntry&lt;K,V&gt; newFirst = e.next;  </span><br><span class="line">                *<span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = first; p != e; p = p.next)  </span><br><span class="line">                    *newFirst = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(p.key, p.hash,  </span><br><span class="line">                                                  newFirst, p.value);  </span><br><span class="line">                tab[index] = newFirst;  </span><br><span class="line">                count = c; <span class="comment">// write-volatile  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> oldValue;  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="get操作不需要锁。"><a href="#get操作不需要锁。" class="headerlink" title="get操作不需要锁。"></a>get操作不需要锁。</h3><p>　　除非读到的值是空的才会加锁重读，我们知道HashTable容器的get方法是需要加锁的，那么ConcurrentHashMap的get操作是如何做到不加锁的呢？原因是它的get方法里将要使用的共享变量都定义成volatile</p><p>　　第一步是访问count变量，这是一个volatile变量，由于所有的修改操作在进行结构修改时都会在最后一步写count 变量，通过这种机制保证get操作能够得到几乎最新的结构更新。对于非结构更新，也就是结点值的改变，由于HashEntry的value变量是 volatile的，也能保证读取到最新的值。</p><p>　　接下来就是根据hash和key对hash链进行遍历找到要获取的结点，如果没有找到，直接访回null。对hash链进行遍历不需要加锁的原因在于链指针next是final的。但是头指针却不是final的，这是通过getFirst(hash)方法返回，也就是存在 table数组中的值。这使得getFirst(hash)可能返回过时的头结点，例如，当执行get方法时，刚执行完getFirst(hash)之后，另一个线程执行了删除操作并更新头结点，这就导致get方法中返回的头结点不是最新的。这是可以允许，通过对count变量的协调机制，get能读取到几乎最新的数据，虽然可能不是最新的。要得到最新的数据，只有采用完全的同步。</p><p>　　最后，如果找到了所求的结点，判断它的值如果非空就直接返回，否则在有锁的状态下再读一次。这似乎有些费解，理论上结点的值不可能为空，这是因为 put的时候就进行了判断，如果为空就要抛NullPointerException。空值的唯一源头就是HashEntry中的默认值，因为 HashEntry中的value不是final的，非同步读取有可能读取到空值。仔细看下put操作的语句：tab[index] = new HashEntry&lt;K,V&gt;(key, hash, first, value)，在这条语句中，HashEntry构造函数中对value的赋值以及对tab[index]的赋值可能被重新排序，这就可能导致结点的值为空。这里当v为空时，可能是一个线程正在改变节点，而之前的get操作都未进行锁定，根据bernstein条件，读后写或写后读都会引起数据的不一致，所以这里要对这个e重新上锁再读一遍，以保证得到的是正确值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V <span class="title">readValueUnderLock</span><span class="params">(HashEntry&lt;K,V&gt; e)</span> </span>&#123;  </span><br><span class="line">    lock();  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> e.value;  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如用于统计当前Segement大小的count字段和用于存储值的HashEntry的value。定义成volatile的变量，能够在线程之间保持可见性，能够被多线程同时读，并且保证不会读到过期的值，但是只能被单线程写（有一种情况可以被多线程写，就是写入的值不依赖于原值），在get操作里只需要读不需要写共享变量count和value，所以可以不用加锁。之所以不会读到过期的值，是根据java内存模型的happen before原则，对volatile字段的写入操作先于读操作，即使两个线程同时修改和获取volatile变量，get操作也能拿到最新的值，这是用volatile替换锁的经典应用场景</p><h3 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h3><p>同样地put操作也是委托给段的put方法。下面是段的put方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;  </span><br><span class="line">    lock();  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">int</span> c = count;  </span><br><span class="line">        <span class="keyword">if</span> (c++ &gt; threshold) <span class="comment">// ensure capacity  </span></span><br><span class="line">            rehash();  </span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;  </span><br><span class="line">        <span class="keyword">int</span> index = hash &amp; (tab.length - <span class="number">1</span>);  </span><br><span class="line">        HashEntry&lt;K,V&gt; first = tab[index];  </span><br><span class="line">        HashEntry&lt;K,V&gt; e = first;  </span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span> &amp;&amp; (e.hash != hash || !key.equals(e.key)))  </span><br><span class="line">            e = e.next;  </span><br><span class="line">        V oldValue;  </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            oldValue = e.value;  </span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent)  </span><br><span class="line">                e.value = value;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> &#123;  </span><br><span class="line">            oldValue = <span class="keyword">null</span>;  </span><br><span class="line">            ++modCount;  </span><br><span class="line">            tab[index] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(key, hash, first, value);  </span><br><span class="line">            count = c; <span class="comment">// write-volatile  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> oldValue;  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　该方法也是在持有段锁(锁定整个segment)的情况下执行的，这当然是为了并发的安全，修改数据是不能并发进行的，必须得有个判断是否超限的语句以确保容量不足时能够rehash。接着是找是否存在同样一个key的结点，如果存在就直接替换这个结点的值。否则创建一个新的结点并添加到hash链的头部，这时一定要修改modCount和count的值，同样修改count的值一定要放在最后一步。put方法调用了rehash方法，reash方法实现得也很精巧，主要利用了table的大小为2^n，这里就不介绍了。而比较难懂的是这句int index = hash &amp; (tab.length - 1)，原来segment里面才是真正的hashtable，即每个segment是一个传统意义上的hashtable,如上图，从两者的结构就可以看出区别，这里就是找出需要的entry在table的哪一个位置，之后得到的entry就是这个链的第一个节点，如果e!=null，说明找到了，这是就要替换节点的值（onlyIfAbsent == false），否则，我们需要new一个entry，它的后继是first，而让tab[index]指向它，什么意思呢？实际上就是将这个新entry插入到链头，剩下的就非常容易理解了</p><p>　　由于put方法里需要对共享变量进行写入操作，所以为了线程安全，在操作共享变量时必须得加锁。Put方法首先定位到Segment，然后在Segment里进行插入操作。插入操作需要经历两个步骤，第一步判断是否需要对Segment里的HashEntry数组进行扩容，第二步定位添加元素的位置然后放在HashEntry数组里。<br>是否需要扩容。在插入元素前会先判断Segment里的HashEntry数组是否超过容量（threshold），如果超过阀值，数组进行扩容。值得一提的是，Segment的扩容判断比HashMap更恰当，因为HashMap是在插入元素后判断元素是否已经到达容量的，如果到达了就进行扩容，但是很有可能扩容之后没有新元素插入，这时HashMap就进行了一次无效的扩容。<br>如何扩容。扩容的时候首先会创建一个两倍于原容量的数组，然后将原数组里的元素进行再hash后插入到新的数组里。为了高效ConcurrentHashMap不会对整个容器进行扩容，而只对某个segment进行扩容。</p><p>另一个操作是containsKey，这个实现就要简单得多了，因为它不需要读取值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key, <span class="keyword">int</span> hash)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (count != <span class="number">0</span>) &#123; <span class="comment">// read-volatile  </span></span><br><span class="line">        HashEntry&lt;K,V&gt; e = getFirst(hash);  </span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; key.equals(e.key))  </span><br><span class="line">                returntrue;  </span><br><span class="line">            e = e.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    returnfalse;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="size-操作"><a href="#size-操作" class="headerlink" title="size()操作"></a>size()操作</h3><p>　　如果我们要统计整个ConcurrentHashMap里元素的大小，就必须统计所有Segment里元素的大小后求和。Segment里的全局变量count是一个volatile变量，那么在多线程场景下，我们是不是直接把所有Segment的count相加就可以得到整个ConcurrentHashMap大小了呢？不是的，虽然相加时可以获取每个Segment的count的最新值，但是拿到之后可能累加前使用的count发生了变化，那么统计结果就不准了。所以最安全的做法，是在统计size的时候把所有Segment的put，remove和clean方法全部锁住，但是这种做法显然非常低效。<br>　　因为在累加count操作过程中，之前累加过的count发生变化的几率非常小，所以ConcurrentHashMap的做法是先尝试2次通过不锁住Segment的方式来统计各个Segment大小，如果统计的过程中，容器的count发生了变化，则再采用加锁的方式来统计所有Segment的大小。<br>　　那么ConcurrentHashMap是如何判断在统计的时候容器是否发生了变化呢？使用modCount变量，在put , remove和clean方法里操作元素前都会将变量modCount进行加1，那么在统计size前后比较modCount是否发生变化，从而得知容器的大小是否发生变化。</p>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ThreadPoolExecutor源码剖析</title>
      <link href="/2017/10/23/ThreadPoolExecutor%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
      <url>/2017/10/23/ThreadPoolExecutor%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="ThreadPoolExecutor-源码剖析"><a href="#ThreadPoolExecutor-源码剖析" class="headerlink" title="ThreadPoolExecutor 源码剖析"></a>ThreadPoolExecutor 源码剖析</h1><p>源码基于 JDK9</p><hr><!-- TOC --><ul><li><a href="#概览">概览</a><ul><li><a href="#继承结构">继承结构</a></li><li><a href="#状态转换">状态转换</a></li><li><a href="#个性定制">个性定制</a><ul><li><a href="#core-and-maximum-pool-sizes">Core and maximum pool sizes</a></li><li><a href="#on-demand-construction">On-demand construction</a></li><li><a href="#creating-new-threads">Creating new threads</a></li><li><a href="#keep-alive-times">Keep-alive times</a></li><li><a href="#queuing">Queuing</a></li><li><a href="#rejected-tasks">Rejected tasks</a></li><li><a href="#hook-methods">Hook methods</a></li><li><a href="#queue-maintenance">Queue maintenance</a></li><li><a href="#finalization">Finalization</a></li></ul></li></ul></li><li><a href="#任务处理流程">任务处理流程</a></li><li><a href="#最佳实践">最佳实践</a></li><li><a href="#参考">参考</a></li></ul><!-- /TOC --><hr><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><code>ThreadPoolExecutor</code> 为每个提交的任务分配一个线程处理，是一种 <code>ExecutorService</code> 实现。通常使用 <code>Executors</code> 的工厂方法来进行配置。</p><p>因为减少了每个任务调度的开销，所以它能在执行大量异步任务的场景中提供更好的性能。并且它提供了一种限定和管理资源(比如线程)的方式。他也会保存一些基本的统计信息，比如已完成的任务数量。</p><p>一般情况下我们使用 <code>Executors</code> 的工厂方法来创建相应的实例。</p><ol><li><code>Executors.newCachedThreadPool()</code>，线程数量没有上界(<code>Integer.MAX_VALUE</code>)，有新任务提交并且没有空闲线程时，创建一个新线程执行该任务，每个线程空闲时间为 60s, 60s 空闲后线程会被移出缓存。使用 <code>SynchronousQueue</code> 作为任务队列的实现类。适用于执行大量生命周期短的异步任务。</li><li><code>Executors.newFixedThreadPool(int)</code>，固定容量的线程池。使用 <code>LinkedBlockingQueue</code> 作为任务队列的实现类。当新任务到达时，创建新线程，当线程数达到上限时，将任务放到队列中，任务队列中任务数量没有上界。当线程创建之后就一直存在直至显式的调用 <code>shutdown()</code> 方法。</li><li><code>Executors.newSingleThreadExecutor()</code>，单个 Worker 的线程池。和  <code>newFixedThreadPool(1)</code> 类似，区别在于这个实例经过了一次封装，不能对该实例的参数进行重配置，并且实现了 <code>finalize()</code> 方法，能够在 GC 时调用 <code>shutdown()</code> 方法关闭该线程池。</li></ol><h3 id="继承结构"><a href="#继承结构" class="headerlink" title="继承结构"></a>继承结构</h3><p><img src="/images/ThreadPoolExecutor-inheritance-structure.png" alt="ThreadPoolExecutor-inheritance-structure"></p><p><code>ThreadPoolExecutor</code> 实现了 <code>Executor</code> 和 <code>ExecutorService</code> 两个接口。</p><p><code>Executor</code> 是执行已提交任务的对象。这个接口提供了一种分离任务提交和任务执行细节的机制。用户只需要通过 <code>execute()</code> 方法提交任务即可，不用显式的创建线程。但使用该接口并不意味着就是异步执行，比如我们实现一个 <code>Executor</code> 类，在 <code>execute(Runnable r)</code> 中直接调用任务的 <code>run()</code> 方法。</p><p><code>ExecutorService</code> 提供了一些管理终止和能够输出 <code>Future</code> (用来跟踪异步任务进度)的方法。提供了两个用来 shutdown 的方法：</p><ol><li><code>shutdown()</code>。允许之前已提交的任务执行完毕。</li><li><code>shutdownNow()</code>。不允许任务队列中的任务再执行并且试图去中断正在执行的任务。</li></ol><p><code>ExecutorService</code> 在不用时应该 shutdown 来允许回收其占用的资源。</p><h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><p><img src="/images/ThreadPoolExecutor-runstate.png" alt=""></p><p>线程池的状态在 <code>ThreadPoolExecutor</code> 中的实际表示方式是一个 <code>AtomicInteger</code> 类型的成员变量的高三位(因为有 5 种状态)，名称为 <code>ctl</code>。</p><p><code>ctl</code> 是 32 位的整型变量，他封装了两个变量：</p><ol><li>线程池运行状态。高三位。<ul><li>RUNNING: 111</li><li>SHUTDOWN: 000</li><li>STOP: 001</li><li>TIDYING: 010</li><li>TERMINATED: 011</li></ul></li><li>有效工作线程数。低 29 位。</li></ol><p>因为 <code>ctl</code> 是 <code>AtomicInteger</code> 的实例，其上的操作基于 CAS，是线程安全的。</p><ol><li><code>shutdown()</code><ol><li><code>advanceRunState(SHUTDOWN);</code> 首先将运行状态修改为 <code>SHUTDOWN</code>此时当有新任务提交时直接抛出 <code>RejectedExecutionException</code> 来拒绝服务。</li><li><code>interruptIdleWorkers()</code> 通过调用 Worker 线程的 <code>interrupt()</code> 方法试图中断空闲 worker。// todo <code>t.interrupt()</code> 方法会对那些线程状态有效？成功调用会产生什么影响？Java 的线程状态和操作系统内部线程状态之间有什么关系？此处涉及的知识面稍广，浪费了一些时间依旧没能理解，把 ThreadPoolExecutor 过完以后再系统解决。</li><li><code>tryTerminate()</code> 只对于运行状态为 <code>STOP</code> 或 <code>SHUTDOWN</code>+任务队列为空两种情况， 当 Worker 数量未减到 0 之前，每次调用会尝试中断一个 Worker 线程。当任务队列为不为空时，Worker 线程处理完正在处理的任务，会从工作队列中取出未处理的任务继续工作，循环这个过程至任务队列为空，Worker 获取不到要处理的任务时会将其从 Worker 集中移除，worker 数量减一，然后在 <code>processWorkerExit()</code> 方法中再次调用 <code>tryTerminate()</code> 。当 Worker 线程数量减到 0 以后再调用该方法时，会将运行状态修改为 <code>TIDYING</code> 并调用 <code>terminated()</code> 方法。<code>ThreadPoolExextor</code> 中该方法为空函数所以 <code>TIDYING</code> 和 <code>TERMINATED</code> 两个状态基本没有区别。</li></ol></li><li><code>shutdownNow()</code><ol><li><code>advanceRunState(STOP)</code> 首先将运行状态修改为 <code>STOP</code> 此时当有新任务提交时直接抛出 <code>RejectedExecutionException</code> 来拒绝服务。</li><li><code>interruptWorkers();</code></li><li><code>drainQueue()</code>，直接清空任务队列</li><li><code>tryTerminate()</code></li></ol></li></ol><h3 id="个性定制"><a href="#个性定制" class="headerlink" title="个性定制"></a>个性定制</h3><h4 id="Core-and-maximum-pool-sizes"><a href="#Core-and-maximum-pool-sizes" class="headerlink" title="Core and maximum pool sizes"></a>Core and maximum pool sizes</h4><p><code>ThreadPoolExecutor</code> 会依照 <code>corePoolSize</code> 和 <code>maximumPoolSize</code> 两个字段来动态调整线程池的大小。新任务提交过来时，如果当前活动的线程数少于 <code>corePoolSize</code> 会创建一个新线程来处理这个新任务即使当前有空闲线程。如果当前线程数大于 <code>corePoolSize</code> 小于 <code>maximumPoolSize</code> 且任务队列已满时也会创建新线程。</p><ul><li>配置两个属性相等时可以获得固定容量的线程池。</li><li>将 <code>maximumPoolSize</code> 设为一个很大的数(比如 <code>Integer.MAX_VAlUE</code>)时，可以获得一个无上界的线程池，可以用来处理任意数量的并发任务。(Tips: 线程过多并不合适，因为物理机的 CPU 数量有限，无法同时处理那么多线程，只会白白占用资源，所以这个属性可以根据实际物理机 CPU 数量来配置。)</li></ul><p>通常来说这两个属性，只通过构造器来配置，但是 <code>ThreadPoolExecutor</code> 也提供了 <code>setter</code> 方法可以在运行时配置。</p><h4 id="On-demand-construction"><a href="#On-demand-construction" class="headerlink" title="On-demand construction"></a>On-demand construction</h4><p>如果在构造 <code>ThreadPoolExecutor</code> 时，任务队列中已经有要处理的任务了，那么在创建好以后，可用通过直接调用 <code>prestartCoreThread()</code> 或 <code>prestartAllCoreThreads()</code> 来创建核心线程去处理这些任务。否则这些任务就只能在有新任务提交过来以后才能开始处理。</p><h4 id="Creating-new-threads"><a href="#Creating-new-threads" class="headerlink" title="Creating new threads"></a>Creating new threads</h4><p>新线程是通过 <code>ThreadFactory</code> 来创建的，如果在构造时未指定，就使用默认的 <code>java.util.concurrent.Executors.DefaultThreadFactory</code>。该 <code>ThreadFactory</code> 创建的线程都属于同一个线程组、<code>Thread.NORM_PRIORITY</code> 优先级、用户线程。</p><p>我们可以通过指定一个不同的线程工厂来修改线程名、线程组、优先级、线程守护状态等等。</p><h4 id="Keep-alive-times"><a href="#Keep-alive-times" class="headerlink" title="Keep-alive times"></a>Keep-alive times</h4><p>如果当前线程数量超出了 <code>corePoolSize</code>，超出的那部分非核心线程会在空闲超出 <code>keepAliveTime</code> 时被终止。这能够线程池活跃状态不足时及时回收占用的资源。该参数也可以使用 <code>setKeepAliveTime(long, TimeUnit)</code> 来运行时动态修改。可以通过使用 <code>Long.MAX_VALUE TimeUnit.NANOSECONDS</code> 两个参数来禁用线程回收。默认情况下核心线程超时不回收，可以通过配置 <code>keepAliveTime</code> 和 <code>allowCoreThreadTimeOut</code> 来允许核心线程超时回收。</p><h4 id="Queuing"><a href="#Queuing" class="headerlink" title="Queuing"></a>Queuing</h4><p>任意的 <code>BlockingQueue</code> 实现都可以作为任务队列。任务队列的使用对线程池收缩会有一定影响：</p><ul><li>如果当前线程数少于 <code>corePoolSize</code>，新提交的任务会直接提交给新创建的线程。</li><li>如果当前线程数不少于 <code>corePoolSize</code>，新提交的任务会提交到任务队列中。</li><li>如果新任务无法提交到任务队列(队列已满)，会尝试创建一个新线程，如果线程数达到了 <code>maximumPoolSize</code> 而导致新线程无法创建则该任务会被拒绝。</li></ul><p>一般来说，任务队列有三种使用策略：</p><ol><li>直接交付。直接将到达的任务交付给线程，而不是将任务暂存起来。当没有空闲线程可用时直接新建线程。这种方式通常需要无上界的 <code>maximumPoolSize</code> 来防止拒绝服务。当然这种方式也有缺点，新任务到达的速度超过任务处理的速度时，新建的线程数量会越来越多。耗费内存。常常使用 <code>SynchronousQueue</code> 作为任务队列的实现类。</li><li>无界队列。使用无界队列的话，执行任务的线程数不会超过 <code>corePoolSize</code> 的大小，但核心线程都无空闲时，新到的任务会添加到任务队列。当新任务到达的速度超过了任务处理的速度时，任务会积累的越来越多。常常使用 <code>LinkedBlockingQueue</code> 作为任务队列的实现类。</li><li>有界队列。和有限的 <code>maximumPoolSize</code> 结合使用能够防止资源耗尽。但是队列的大小和 <code>maximumPoolSize</code> 的大小配置权衡起来会更难一些。大队列加小容量线程池可以最小化 CPU使用率、OS 资源和上下文切换的开销。但是有可能吞吐量会比较低，如果任务频繁阻塞(I/O操作)的话无法最优使用 CPU 资源。如果使用小队列加大容量的线程池，可以保证 CPU 的使用率，但是上下文调度的开销可能会过大，这也会降低吞吐量。常使用 <code>ArrayBlockingQueue</code> 作为任务队列的实现类。</li></ol><h4 id="Rejected-tasks"><a href="#Rejected-tasks" class="headerlink" title="Rejected tasks"></a>Rejected tasks</h4><ol><li><code>Executor</code> 状态不再是 <code>RUNNING</code>（已经被 <code>SHUTDOWN</code>）</li><li>任务队列已满并且线程数量达到最大值，已达到饱和状态。</li></ol><h4 id="Hook-methods"><a href="#Hook-methods" class="headerlink" title="Hook methods"></a>Hook methods</h4><p><code>ThreadPoolExecutor</code> 也提供了一些其他方法，子类可以重写这些方法来提供额外的支持：重新初始化 <code>ThreadLocals</code>，收集统计信息，添加日志等等。</p><ol><li><code>beforeExecute(Thread, Runnable)</code>， //任务执行前调用</li><li><code>afterExecute(Runnable, Throwable)</code> //任务执行后调用</li><li><code>terminated()</code> // <code>Executor</code> 状态转为 <code>TIDYING</code> 后调用</li></ol><h4 id="Queue-maintenance"><a href="#Queue-maintenance" class="headerlink" title="Queue maintenance"></a>Queue maintenance</h4><ol><li><code>getQueue()</code> 可以访问任务队列，但是只鼓励用于监控与调试。</li><li><code>remove(Runnable)</code> 和 <code>purge()</code> 方法可以用于取消尚未执行的任务。<code>remove(Runnable)</code> 直接从任务队列删除，<code>purge()</code> 从任务队列批量删除已取消的 <code>Future</code></li></ol><h4 id="Finalization"><a href="#Finalization" class="headerlink" title="Finalization"></a>Finalization</h4><p>当线程池没有到 GC Roots 的引用并且 Worker 数为 0 时会被自动回收。</p><p>如果想要在忘记调用 <code>shutdown()</code> 时也能确保未被引用的线程池被回收的话，需要确保未使用的线程最终都被能终止。可以设置合适的 <code>keepAliveTime</code> 以及 <code>allowCoreThreadTimeOut</code>。</p><h2 id="任务处理流程"><a href="#任务处理流程" class="headerlink" title="任务处理流程"></a>任务处理流程</h2><p>我们以一个简单例子来剖析一下整个过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> me.rainstorm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> baochen.zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017.12.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_POOL_SIZE = Runtime.getRuntime().availableProcessors() + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService exe = <span class="keyword">new</span> ThreadPoolExecutor(THREAD_POOL_SIZE, THREAD_POOL_SIZE,</span><br><span class="line">            <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        ((ThreadPoolExecutor)exe).allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exe.execute(() -&gt; System.out.println(<span class="string">"Hello world"</span>));</span><br><span class="line"></span><br><span class="line">        exe.shutdown();</span><br><span class="line">        exe = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/thread-pool-executor-demo.png" alt=""></p><ol><li><code>ctl</code> 变量之前已经提到了，作为一个控制变量用来控制线程池的状态和工作线程数。默认值是 <code>RUNNING | 0</code>，即状态为 <code>RUNNING</code>，Worker 线程数为 0;</li><li>在 Demo 中并未指定线程工厂，<code>ThreadPoolExecutor</code> 使用 <code>Executors</code> 提供的默认线程工厂。</li><li>因为只有一个任务，所以 <code>main</code> 方法中在提交完这个任务后，直接调用了 <code>shutdown()</code> 方法，并将其赋为 <code>null</code> 便于在任务执行完毕后回收资源，一般情况下推荐在所有任务都提交到线程池以后再调用 <code>shutdown</code>，否则之后的任务直接会被拒绝掉。</li><li>因为只有一个任务，且允许核心线程超时，所以该线程在 <code>getTask()</code> 过程中会超时，然后返回 <code>null</code>，进入 <code>processWorkerExit()</code> 流程。</li><li>线程池在进入 <code>TERMINATED</code> 状态后就可以被 GC 了。</li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>一般情况下使用 <code>Executors</code> 的工厂方法来创建即可适用于大多数场景。需要配置的话参考 个性定制 来配置更合适自己项目的 <code>ThreadPoolExecutor</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/package-summary.html" target="_blank" rel="noopener">Java SE 9 &amp; JDK 9 – java.util.concurrent</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Executors.html" target="_blank" rel="noopener">Java SE 9 &amp; JDK 9 – Executors</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Executor.html" target="_blank" rel="noopener">Java SE 9 &amp; JDK 9 – Executor</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener">Java SE 9 &amp; JDK 9 – ExecutorService</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/ThreadPoolExecutor.html" target="_blank" rel="noopener">Java SE 9 &amp; JDK 9 – ThreadPoolExecutor</a></li><li><a href=".">Java SE 9 &amp; JDK 9 – Source Code</a></li><li><a href="https://stackoverflow.com/questions/2213340/what-is-daemon-thread-in-java" target="_blank" rel="noopener">What is Daemon thread in Java?</a></li><li><a href="http://www.jianshu.com/p/ade771d2c9c0" target="_blank" rel="noopener">深入理解java线程池—ThreadPoolExecutor</a></li><li><a href="https://www.zhihu.com/question/51244545" target="_blank" rel="noopener">Java 中, 为什么一个对象的实例方法在执行完成之前其对象可以被 GC 回收?</a></li></ol>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RandomAccessFile类的使用小结</title>
      <link href="/2017/10/23/RandomAccessFile%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
      <url>/2017/10/23/RandomAccessFile%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="字符、字节、位"><a href="#字符、字节、位" class="headerlink" title="字符、字节、位"></a>字符、字节、位</h2><p>理清楚这些基础的东西，对文件操作会有很大的帮助</p><ol><li>在计算机中最小的单元是位，即bit,1 byte = 8 bit</li><li>在Java中最小的单位是byte,一个字节只占8位,在java的IO流中最小的单位就是字节，InputStream#read()方法<br>读取一个字节并返回，如果到达文件末尾则为返回-1</li><li>在java中一个int占4个字节，一个char类型占2个字节，一个字母和数字占1个字节，一个中文汉字占2个字节，为何一个char<br>要占两个字节呢，因为java采用unicode，2个字节（16位）来表示一个字符</li></ol><h2 id="RandomAccessFile类的主要功能"><a href="#RandomAccessFile类的主要功能" class="headerlink" title="RandomAccessFile类的主要功能"></a>RandomAccessFile类的主要功能</h2><ol><li><p>对象声明：RandomAccessFile raf = newRandomAccessFile(File file, String mode);<br> 其中参数 mode 的值可选 “r”：可读，”w” ：可写，”rw”：如果使用此模式，如果此文件不存在，则会自动创建；</p></li><li><p>获取当前文件指针位置：int RandowAccessFile.getFilePointer();</p></li><li><p>改变文件指针位置（相对位置、绝对位置）：<br> 绝对位置：RandowAccessFile.seek(int index);<br> 相对位置：RandowAccessFile.skipByte(int step);(相对当前位置)</p></li><li><p>给写入文件预留空间：RandowAccessFile.setLength(long len);</p></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RandomAccessFile; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2008-2018, JackHoo</span></span><br><span class="line"><span class="comment"> * FileName: Test</span></span><br><span class="line"><span class="comment"> * Author:   JackHoo</span></span><br><span class="line"><span class="comment"> * Date:     2017/9/23 16:18</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.readFile(<span class="string">"test.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(filename, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">        String name = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">        name = <span class="string">"zhangsan"</span>;         <span class="comment">// 字符串长度为8</span></span><br><span class="line">        age = <span class="number">30</span>;</span><br><span class="line">        raf.writeBytes(name);</span><br><span class="line">        raf.writeInt(age);</span><br><span class="line">        name = <span class="string">"lisi    "</span>;         <span class="comment">// 字符串长度为8</span></span><br><span class="line">        age = <span class="number">31</span>;                  <span class="comment">// 数字的长度为4</span></span><br><span class="line">        raf.writeBytes(name);      <span class="comment">// 将姓名写入文件之中</span></span><br><span class="line">        raf.writeInt(age);         <span class="comment">// 将年龄写入文件之中</span></span><br><span class="line">        name = <span class="string">"wangwu  "</span>;         <span class="comment">// 字符串长度为8</span></span><br><span class="line">        age = <span class="number">32</span>;                  <span class="comment">// 数字的长度为4</span></span><br><span class="line">        raf.writeBytes(name);      <span class="comment">// 将姓名写入文件之中</span></span><br><span class="line">        raf.writeInt(age);         <span class="comment">// 将年龄写入文件之中</span></span><br><span class="line">        raf.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(filename, <span class="string">"rw"</span>);) &#123;</span><br><span class="line">            raf.skipBytes(<span class="number">12</span>);<span class="comment">//跳过12个字节</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">                bytes[i] = raf.readByte();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"name==="</span> + <span class="keyword">new</span> String(bytes, <span class="string">"utf-8"</span>));</span><br><span class="line">            System.out.println(<span class="string">"age===="</span> + raf.readInt());</span><br><span class="line">            raf.seek(<span class="number">0</span>);<span class="comment">//跳到第0个字节的位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">                bytes[i] = raf.readByte();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"name==="</span> + <span class="keyword">new</span> String(bytes, <span class="string">"utf-8"</span>));</span><br><span class="line">            System.out.println(<span class="string">"age===="</span> + raf.readInt());</span><br><span class="line">            raf.skipBytes(<span class="number">12</span>);<span class="comment">//跳过12个字节</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">                bytes[i] = raf.readByte();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"name==="</span> + <span class="keyword">new</span> String(bytes, <span class="string">"utf-8"</span>));</span><br><span class="line">            System.out.println(<span class="string">"age===="</span> + raf.readInt());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比IO流"><a href="#对比IO流" class="headerlink" title="对比IO流"></a>对比IO流</h2><ol><li><p>流向分类差别  </p><p> 普通文件流：分输入流和输出流</p><p> 随机读写流：既是输入流也是输出流</p></li><li><p>基本方法区别</p><p> 普通文件流：拥有所有共性方法，<br> 比如read（），write（），close（），flush（），skip（）等等方法<br> 随机读写流：除了拥有这些共性方法，还有自己特有的方法，<br> 比如readLine（），seek（），skipBytes（）等等方法<br> 特别注意：随机读写流没有flush（）方法</p></li><li><p>构造方法区别</p><p> 普通文件流：<br> 1）输入流：参数都文件路径</p><pre><code>FileInputStream(File file)     FileInputStream(String name) </code></pre><p> 2）输出流：参数1–都是文件路径；</p><pre><code>FileOutputStream(File file)FileOutputStream(String name) </code></pre><p> 参数2 append：</p><pre><code>true时--写入时不覆盖原有内容，而是在文件内容后面接着写；false--写入时会覆盖原有内容，没有第二个参数时默认是falseFileOutputStream(File file, boolean append) FileOutputStream(String name, boolean append) </code></pre><p> 随机读写流：</p><pre><code>参数1：都是文件路径；参数2：是读写模式，只有两个取值--r或rwRandomAccessFile(File file, String mode) RandomAccessFile(String name, String mode) </code></pre></li><li><p>读写位置区别</p><p> 普通文件流：只能在指定位置【读取】–skip（）方法，不能指定位置写入</p><p> 随机文件流：可以在指定位置进行【读写】，使用seek（）方法</p></li><li><p>应用区别</p><p> 普通文件流：使用普通文件流不能进行多线程复制</p><p> 随机读写流：可以进行多线程复制</p></li></ol>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
            <tag> 文件读取 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解Java虚拟机有感.md</title>
      <link href="/2017/09/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%89%E6%84%9F/"/>
      <url>/2017/09/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%89%E6%84%9F/</url>
      <content type="html"><![CDATA[<h1 id="深入理解-Java-虚拟机-学习笔记"><a href="#深入理解-Java-虚拟机-学习笔记" class="headerlink" title="深入理解 Java 虚拟机 学习笔记"></a>深入理解 Java 虚拟机 学习笔记</h1><!-- TOC --><ul><li><a href="#深入理解-java-虚拟机-学习笔记">深入理解 Java 虚拟机 学习笔记</a><ul><li><a href="#第二章-java-内存区域与内存溢出异常">第二章 Java 内存区域与内存溢出异常</a><ul><li><a href="#内存区域">内存区域</a><ul><li><a href="#对象创建">对象创建</a></li><li><a href="#对象的内存布局">对象的内存布局</a></li><li><a href="#对象访问">对象访问</a></li></ul></li><li><a href="#内存溢出异常">内存溢出异常</a><ul><li><a href="#常用-jvm-参数-java-hotspot-vm">常用 JVM 参数 （Java HotSpot VM）</a></li><li><a href="#常见异常及可能原因">常见异常及可能原因</a></li><li><a href="#string-与字符串常量">String 与字符串常量</a></li></ul></li></ul></li><li><a href="#第三章-垃圾收集器与内存分配策略">第三章 垃圾收集器与内存分配策略</a><ul><li><a href="#判断对象是否存活">判断对象是否存活</a></li><li><a href="#垃圾收集算法">垃圾收集算法</a></li><li><a href="#hotspot-算法实现">HotSpot 算法实现</a></li><li><a href="#垃圾收集器">垃圾收集器</a></li><li><a href="#内存分配与回收策略">内存分配与回收策略</a></li></ul></li><li><a href="#第六章-类文件结构">第六章 类文件结构</a></li><li><a href="#第七章-虚拟机类加载机制">第七章 虚拟机类加载机制</a><ul><li><a href="#类加载的过程">类加载的过程</a></li><li><a href="#类加载器">类加载器</a></li></ul></li><li><a href="#第十章-早期编译器优化">第十章 早期（编译器）优化</a><ul><li><a href="#前端编译过程java----class">前端编译过程（<code>*.java --&gt; *.class</code>）</a></li></ul></li><li><a href="#参考">参考</a></li></ul></li></ul><!-- /TOC --><hr><h2 id="第二章-Java-内存区域与内存溢出异常"><a href="#第二章-Java-内存区域与内存溢出异常" class="headerlink" title="第二章 Java 内存区域与内存溢出异常"></a>第二章 Java 内存区域与内存溢出异常</h2><h3 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h3><p><img src="../res/java-memory-area.png" alt="java-memory-area"></p><p><img src="/images/对象内存模型.png" alt=""><br>– from 姜志明</p><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><ol><li>加载类<ul><li>若已经在内存中则跳过。</li><li><strong>类加载完以后就可以确定对象所需的空间大小</strong> // TODO why?</li></ul></li><li>分配内存<ul><li>根据 GC 回收算法的不同，分配方式略有区别。<ul><li>标记整理算法，使用空闲列表</li><li>带压缩的算法，使用指针碰撞（已分配和未分配内存间由指针分隔）</li></ul></li></ul></li><li>内存清零</li><li>对象初始化</li></ol><h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p><img src="/images/对象内存布局.png" alt="对象内存布局"></p><ul><li>MarkWord 占用一个 <strong>字</strong> 的大小，其中分为两部分：<ol><li>对象自身运行时元数据。例如，哈希码、GC 分代年龄、锁状态标志等等</li><li>类型指针。指向其类的元数据。</li><li>若对象是数组则还需要保存数组的长度。</li></ol></li><li>域的存储顺序：<ol><li>基本类型优先，长度长的优先。</li><li>父类域优先。子类较短域可插入父类域空隙。</li><li>受虚拟机分配策略参数和域定义顺序的影响。</li></ol></li></ul><h4 id="对象访问"><a href="#对象访问" class="headerlink" title="对象访问"></a>对象访问</h4><p>两种方式：</p><ol><li>直接引用</li><li>引用句柄（句柄池）</li></ol><h3 id="内存溢出异常"><a href="#内存溢出异常" class="headerlink" title="内存溢出异常"></a>内存溢出异常</h3><h4 id="常用-JVM-参数-（Java-HotSpot-VM）"><a href="#常用-JVM-参数-（Java-HotSpot-VM）" class="headerlink" title="常用 JVM 参数 （Java HotSpot VM）"></a>常用 JVM 参数 （Java HotSpot VM）</h4><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">含义</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">-verbose:class</td><td style="text-align:left">显示每一个被加载的类的信息</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">-verbose:gc</td><td style="text-align:left">显示每一个 GC 事件的信息</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">-Xmnsize</td><td style="text-align:left">年轻代最大容量</td><td style="text-align:left">-Xmn256m</td></tr><tr><td style="text-align:left">-Xmssize</td><td style="text-align:left">堆的初始大小。1024 的整数倍并且要大于 1MB</td><td style="text-align:left">-Xms6m</td></tr><tr><td style="text-align:left">-Xmxsize</td><td style="text-align:left">堆的最大容量。1024 的整数倍并且要大于 2MB</td><td style="text-align:left">-Xmx80m</td></tr><tr><td style="text-align:left">-Xsssize</td><td style="text-align:left">线程栈容量。平台不同默认值不同，详情参考文档。Linux/x64 (64-bit): 1024 KB</td><td style="text-align:left">-Xss1m</td></tr><tr><td style="text-align:left">-XX:MaxDirectMemorySize=size</td><td style="text-align:left">直接内存的最大容量，默认与堆容量相同</td><td style="text-align:left">-XX:MaxDirectMemorySize=1m</td></tr><tr><td style="text-align:left">-XX:+HeapDumpOnOutOfMemory</td><td style="text-align:left">当抛出 OOM 时，使用 HPROF 将堆的快照保存到当前目录</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">-XX:HeapDumpPath=path</td><td style="text-align:left">设置快照输出路径</td><td style="text-align:left">-XX:HeapDumpPath=/var/log/java/java_heapdump.hprof</td></tr><tr><td style="text-align:left">-XX:+PrintGCDetails</td><td style="text-align:left">开启在 GC 时打印详细信息</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">-XX:SurvivorRatio=ratio</td><td style="text-align:left">新生代中 eden 与 survivor 的大小比例，默认为 8</td><td style="text-align:left">-XX:SurvivorRatio=4</td></tr></tbody></table><p>参考： <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">Java HotSpot VM 参数</a></p><h4 id="常见异常及可能原因"><a href="#常见异常及可能原因" class="headerlink" title="常见异常及可能原因"></a>常见异常及可能原因</h4><ul><li>堆区<ul><li><code>OutOfMemoryException</code>。使用工具对快照进行分析，看是否发生了内存泄露（内存中有不再使用的但无法回收的对象或资源）。若是，则通过分析引用链找到根源，解决问题；若不是检查虚拟机堆参数，看是否能够调大。再检查代码中是否有生命周期很长的大对象。</li></ul></li><li>虚拟机栈和本地方法栈<ul><li><code>OutOfMemoryException</code>。栈容量 * 线程数量 = 固定值。当线程数量过多时会引发，可以适当减小栈容量。</li><li><code>StackOverflowException</code>。按异常查根源。</li></ul></li><li>方法区和运行时常量池</li><li>直接内存溢出<ul><li>不正确的使用 NIO。 </li></ul></li></ul><h4 id="String-与字符串常量"><a href="#String-与字符串常量" class="headerlink" title="String 与字符串常量"></a>String 与字符串常量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String m = <span class="string">"hello"</span>;</span><br><span class="line">String n = <span class="string">"hello"</span>;</span><br><span class="line">String u = <span class="keyword">new</span> String(m);</span><br><span class="line">String v = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"m == n: "</span> + (m == n));</span><br><span class="line">System.out.println(<span class="string">"m == u: "</span> + (m == u));</span><br><span class="line">System.out.println(<span class="string">"m == v: "</span> + (m == v));</span><br><span class="line">System.out.println(<span class="string">"u == v: "</span> + (u == v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">m == n: <span class="keyword">true</span></span><br><span class="line">m == u: <span class="keyword">false</span></span><br><span class="line">m == v: <span class="keyword">false</span></span><br><span class="line">u == v: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><img src="/images/string-const.png" alt="内存模型"></p><p>参考： <a href="http://mccxj.github.io/blog/20130615_java-string-constant-pool.html" target="_blank" rel="noopener">初探Java字符串</a></p><h2 id="第三章-垃圾收集器与内存分配策略"><a href="#第三章-垃圾收集器与内存分配策略" class="headerlink" title="第三章 垃圾收集器与内存分配策略"></a>第三章 垃圾收集器与内存分配策略</h2><h3 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h3><ol><li>引用计数器算法。给对象添加一个引用计数器，增加/删除引用时对计数器进行修订。但是该方法因为无法解决循环引用（例如两个对象互相引用）的问题，所以一般不使用该方法</li><li>可达性分析算法。从 <code>GC root</code> 开始递归查询并标记，结束后未被标记的（不可达的）即为可回收的对象。<code>GC root</code> 共有四种：<ul><li>栈中引用的对象</li><li>方法区常量引用的对象</li><li>方法区静态域引用的对象</li><li>本地方法中 JNI 引用的对象（不太懂）</li></ul></li><li>回收方法区<ul><li>新生代的回收效率可达到 70% - 95%，而永久代则低的多（性价比太低）</li><li>在大量使用反射、动态代理、CGLib 等 ByteCode 框架、动态生成 JSP 以及 OSGi 这类频繁自定义 ClassLoader 的场景都需要虚拟机有卸载类的能力。 </li></ul></li></ol><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><ol><li>标记-清除算法<ul><li>扫描一遍，标记出需要回收的对象，再扫描将其清除</li><li>标记/清除两阶段时间效率都不高，且回收后空间较零碎。</li></ul></li><li>复制算法<ul><li>将内存分为两块，当一块中内存不足时，将其中所有存活对象复制到另一块中，回收当前一整块。</li><li>目前商用虚拟机大都使用这一算法回收新生代。将内存划分为一个较大的 Eden 区和两块较小的 Survivor. Eden：Survivor = 8：1</li></ul></li><li>标记整理算法<ul><li>标记出须清理的对象，然后其余对象移动到一端</li></ul></li><li>分代收集算法<ul><li>新生代使用复制算法</li><li>永久代使用其他两种算法</li></ul></li></ol><h3 id="HotSpot-算法实现"><a href="#HotSpot-算法实现" class="headerlink" title="HotSpot 算法实现"></a>HotSpot 算法实现</h3><ol><li>当程序执行到安全点（safepoint）时进行 GC，通过在安全点（safepoint）生成的 OopMaps 快速遍历 GC root 进行回收。<ul><li>安全点（safepoint）：指令序列复用的位置。例如方法调用、循环结构、异常跳转等位置。</li><li>OopMaps：一种特殊的数据结构，用于枚举 GC root</li></ul></li><li>但是如果线程处于不执行的状态时，如 sleep 或 blocked 无法执行到安全点，即需要提前标记为安全区域(safe region)。GC 时不考虑处于安全区域的线程，若安全区域代码执行结束但 GC 未结束时该线程等待 GC 结束信号。<ul><li>安全区域（safe region）：引用不发生改变的代码片段</li></ul></li></ol><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p><img src="/images/gc-collectors.jpg" alt="gc collectors"></p><ul><li>并发(concurrent) vs 并行(parallel)<ol><li>并行是同时进行（多 CPU）</li><li>并发可交替</li></ol></li><li>Minor GC vs Major GC vs Full GC<ul><li>Minor GC：只回收新生代</li><li>Major GC：只回收永久代</li><li>Full GC： 回收整个堆。相当于 Minor GC + Major GC</li></ul></li></ul><ol><li>serial。单线程，简单高效。复制算法</li><li>PerNew。serial 的多线程版本，并行。</li><li>parallel Scavenge。 与 PerNew 类似，复制算法、多线程、并行。但侧重吞吐量，拥有自适应调节的能力。适合用在后台不需要太多用户交互的地方。<ul><li>吞吐量 = 用户代码执行时间 / （用户代码执行时间 + 垃圾回收时间）</li><li>自适应调节：虚拟机根据但前系统的运行情况，自动调节虚拟机各参数以确保最大吞吐量。</li></ul></li><li>serial old。serial 的永久代版本。采用标记整理算法。</li><li>parallel old。parallel Scavenge 的老年代版本，采用标记整理算法。与 parallel scavenge 搭配可以用在注重吞吐量及 CPU 资源敏感的地方。</li><li>CMS（concurrent mark sweep）。并发低停顿，使用标记清理算法。非常优秀的一款收集器，但还是有几个缺点：<ol><li>对 CPU 资源敏感，当其小于数量小于 4 个是可能会对用户程序有较大影响。默认启动回收线程数 = （CPU 数 + 3）/ 4</li><li>无法处理浮动垃圾。浮动垃圾：在垃圾回收期间生成的垃圾</li><li>回收后会留有大量的空间碎片。</li></ol></li><li>G1 //TODO</li></ol><h3 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h3><p>TLAB（Thread local allocate buffer）线程私有分配缓冲区，每个线程一个</p><ol><li>对象优先在 Eden 区分配。内存不足时触发 Minor GC。</li><li>大对象直接进入老年代。例如数组或超过参数指定大小的对象。</li><li>长期存活的对象进入老年代。GC 超过一定次数仍存活的对象。默认为 15 次，可通过虚拟机参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</li><li>动态对象年龄判定。当一个年龄的所有对象大小总和超过 Servivor 空间一半时，大于等于该年龄的所有对象都进入老年代</li><li>空间分配担保。当发生 Minor GC 时，若存活的对象过多，servivor 空间无法全部容纳时，会将剩余的对象直接放入永久代；若永久代空间不足以容纳时会引发一次 Full GC</li></ol><h2 id="第六章-类文件结构"><a href="#第六章-类文件结构" class="headerlink" title="第六章 类文件结构"></a>第六章 类文件结构</h2><ol><li>类文件的结构拥有固定的格式，包含两部分的数据：<ol><li>类的元数据。</li><li>方法代码的字节流</li></ol></li><li><code>code</code> 属性表包含的属性<ol><li><code>max_stack</code> 存储操作数栈的最大深度值。运行时用来确定分配栈帧中所需的操作数栈深度。</li><li><code>max_locals</code> 局部变量所需的最大空间大小</li></ol></li><li>符号引用<ol><li>类与接口的全限定名</li><li>域的名称与描述符</li><li>方法名与描述符</li></ol></li><li>该部分内容可以通过查表获得，不再赘述。</li></ol><h2 id="第七章-虚拟机类加载机制"><a href="#第七章-虚拟机类加载机制" class="headerlink" title="第七章 虚拟机类加载机制"></a>第七章 虚拟机类加载机制</h2><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><p><img src="/images/class-life.jpg" alt=""></p><ol><li>加载<ol><li>通过全类名获取该类的二进制字节流</li><li>解析字节流，将字节流所表达的静态存储结构转化为方法区的运行时数据结构 <strong>（这是什么东西？）</strong></li><li>为该类创建一个 <code>Class</code> 对象，用来访问该类的类数据</li></ol></li><li>连接<ol><li>验证<ul><li>为了确保加载的字节流时符合规范的，不会危害到虚拟机自身的安全。主要包括</li></ul><ol><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ol></li><li>准备<ul><li>为类变量分配内存并进行初步初始化（<code>0/null</code>）  // 不应该是在类加载阶段完成的么？</li></ul></li><li>解析<ul><li>将符号引用替换为直接引用</li></ul></li></ol></li><li>初始化<ul><li><code>static fields and block init</code></li></ul></li><li>使用</li><li>卸载</li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ol><li>一个加载器确定一个类的命名空间。同一个类由不同加载器加载后是不同的类。</li><li><img src="/images/classloader.png" alt=""><ul><li>双亲委派：当需要加载一个类时先使用父类加载器（其实这个地方不是很准确，父子关系是通过复合来实现的），若失败了，再使用当前的加载器。如果自己写一个 <code>Object</code> 类，编译可通过但是由于双亲委派，它永远都不会被加载。</li></ul></li></ol><h2 id="第十章-早期（编译器）优化"><a href="#第十章-早期（编译器）优化" class="headerlink" title="第十章 早期（编译器）优化"></a>第十章 早期（编译器）优化</h2><p>// TODO: 因本章含有相当多的编译原理相关概念，所以第十、十一章学习延后（预计第 8-9 周）</p><h3 id="前端编译过程（-java-gt-class）"><a href="#前端编译过程（-java-gt-class）" class="headerlink" title="前端编译过程（*.java --&gt; *.class）"></a>前端编译过程（<code>*.java --&gt; *.class</code>）</h3><ol><li>解析与填充符号表<ol><li>词法分析。将源代码转换为标记（<code>Token</code>） 的集合<ul><li>Token: 是编译过程中的最小元素。例如关键字、变量名、运算符等等</li></ul></li><li>语法分析。通过 <code>Token</code> 序列将构造抽象语法树(Abstract syntax tree)</li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://mccxj.github.io/blog/20130615_java-string-constant-pool.html" target="_blank" rel="noopener">初探Java字符串</a> (非常好的一篇文章)</li><li><a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">Java HotSpot VM 参数</a></li><li><a href="http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html" target="_blank" rel="noopener">Java HotSpot Virtual Machine Garbage Collection Tuning Guide</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/" target="_blank" rel="noopener">JVM 垃圾回收器工作原理及使用实例介绍 – IBM</a></li><li><a href="https://plumbr.eu/blog/garbage-collection/minor-gc-vs-major-gc-vs-full-gc" target="_blank" rel="noopener">Minor GC vs Major GC vs Full GC</a></li><li><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener">Abstract syntax tree</a></li><li><a href="http://introcs.cs.princeton.edu/java/44st/" target="_blank" rel="noopener">4.4 Symbol Tables</a></li></ol>]]></content>
      
      <categories>
          
          <category> Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat架构及启动过程[含部署]</title>
      <link href="/2017/09/06/Tomcat%20%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2017/09/06/Tomcat%20%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="/images/tomcat-architecture.png" alt=""></p><ol><li><code>Bootstrap</code> 作为 Tomcat 对外界的启动类,在 <code>$CATALINA_BASE/bin</code> 目录下，它通过反射创建 <code>Catalina</code> 的实例并对其进行初始化及启动。</li><li><code>Catalina</code> 解析 <code>$CATALINA_BASE/conf/server.xml</code> 文件并创建 <code>StandardServer</code>、<code>StandardService</code>、<code>StandardEngine</code>、<code>StandardHost</code> 等</li><li><code>StandardServer</code> 代表的是整个 Servlet 容器，他包含一个或多个 <code>StandardService</code></li><li><code>StandardService</code> 包含一个或多个 <code>Connector</code>，和一个 <code>Engine</code>，<code>Connector</code> 和 <code>Engine</code> 都是在解析 <code>conf/server.xml</code> 文件时创建的，<code>Engine</code> 在 Tomcat 的标准实现是 <code>StandardEngine</code></li><li><code>MapperListener</code> 实现了 <code>LifecycleListener</code> 和 <code>ContainerListener</code> 接口用于监听容器事件和生命周期事件。该监听器实例监听所有的容器，包括 <code>StandardEngine</code>、<code>StandardHost</code>、<code>StandardContext</code>、<code>StandardWrapper</code>，当容器有变动时，注册容器到 <code>Mapper</code>。</li><li><code>Mapper</code> 维护了 URL 到容器的映射关系。当请求到来时会根据 <code>Mapper</code> 中的映射信息决定将请求映射到哪一个 <code>Host</code>、<code>Context</code>、<code>Wrapper</code>。</li><li><code>Http11NioProtocol</code> 用于处理 HTTP/1.1 的请求</li><li><code>NioEndpoint</code> 是连接的端点，在请求处理流程中该类是核心类，会重点介绍。</li><li><code>CoyoteAdapter</code> 用于将请求从 Connctor 交给 Container 处理。使 Connctor 和 Container 解耦。</li><li><code>StandardEngine</code> 代表的是 Servlet 引擎，用于处理 <code>Connector</code> 接受的 Request。包含一个或多个 <code>Host</code>（虚拟主机）, <code>Host</code> 的标准实现是 <code>StandardHost</code>。</li><li><code>StandardHost</code> 代表的是虚拟主机，用于部署该虚拟主机上的应用程序。通常包含多个 <code>Context</code> (Context 在 Tomcat 中代表应用程序)。<code>Context</code> 在 Tomcat 中的标准实现是 <code>StandardContext</code>。</li><li><code>StandardContext</code> 代表一个独立的应用程序，通常包含多个 <code>Wrapper</code>，一个 <code>Wrapper</code> 容器封装了一个 Servlet，<code>Wrapper</code> 的标准实现是 <code>StandardWrapper</code>。</li><li><code>StandardPipeline</code> 组件代表一个流水线，与 <code>Valve</code>（阀）结合，用于处理请求。 <code>StandardPipeline</code> 中含有多个 <code>Valve</code>， 当需要处理请求时，会逐一调用 <code>Valve</code> 的 <code>invoke</code> 方法对 Request 和 Response 进行处理。特别的，其中有一个特殊的 <code>Valve</code> 叫 <code>basicValve</code>,每一个标准容器都有一个指定的 <code>BasicValve</code>，他们做的是最核心的工作。<ul><li><code>StandardEngine</code> 的是 <code>StandardEngineValve</code>，他用来将 Request 映射到指定的 <code>Host</code>;</li><li><code>StandardHost</code> 的是 <code>StandardHostValve</code>, 他用来将 Request 映射到指定的 <code>Context</code>;</li><li><code>StandardContext</code> 的是 <code>StandardContextValve</code>，它用来将 Request 映射到指定的 <code>Wrapper</code>；</li><li><code>StandardWrapper</code> 的是 <code>StandardWrapperValve</code>，他用来加载 Rquest 所指定的 Servlet,并调用 Servlet 的 <code>Service</code> 方法。</li></ul></li></ol><h2 id="Tomcat-init"><a href="#Tomcat-init" class="headerlink" title="Tomcat init"></a>Tomcat init</h2><p><img src="/images/tomcat-start.png" alt=""></p><ul><li>当通过 <code>./startup.sh</code> 脚本或直接通过 <code>java</code> 命令来启动 <code>Bootstrap</code> 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 <code>Bootstrap</code> 类的 <code>main</code> 方法。</li><li>启动的过程分为两步，分别是 <code>init</code> 和 <code>start</code>，本节主要介绍 <code>init</code>;</li></ul><ol><li>初始化类加载器。[关于 Tomcat 类加载机制，可以参考我之前写的一片文章：<a href="谈谈Java类加载机制.md">谈谈Java类加载机制</a>]<ol><li>通过从 <code>CatalinaProperties</code> 类中获取 <code>common.loader</code> 等属性，获得类加载器的扫描仓库。<code>CatalinaProperties</code> 类在的静态块中调用了 <code>loadProperties()</code> 方法，从 <code>conf/catalina.properties</code> 文件中加载了属性.(即在类创建的时候属性就已经加载好了)。</li><li>通过 <code>ClassLoaderFactory</code> 创建 <code>URLClassLoader</code> 的实例</li></ol></li><li>通过反射创建 <code>Catalina</code> 的实例并设置 <code>parentClassLoader</code></li><li><code>setAwait(true)</code>。设置 <code>Catalina</code> 的 <code>await</code> 属性为 <code>true</code>。在 Start 阶段尾部，若该属性为 <code>true</code>，Tomcat 会在 main 线程中监听 <code>SHUTDOWN</code> 命令，默认端口是 8005.当收到该命令后执行 <code>Catalina</code> 的 <code>stop()</code> 方法关闭 Tomcat 服务器。</li><li><code>createStartDigester()</code>。<code>Catalina</code> 的该方法用于创建一个 Digester 实例，并添加解析 <code>conf/server.xml</code> 的 <code>RuleSet</code>。Digester 原本是 Apache 的一个开源项目，专门解析 XML 文件的，但我看 Tomcat-9.0.0.M22 中直接将这些类整合到 Tomcat 内部了，而不是引入 jar 文件。Digester 工具的原理不在本文的介绍范围，有兴趣的话可以参考 <a href="http://commons.apache.org/proper/commons-digester/index.html" target="_blank" rel="noopener">The Digester Component - Apache</a> 或 <a href="https://www.amazon.com/How-Tomcat-Works-Budi-Kurniawan/dp/097521280X" target="_blank" rel="noopener">《How Tomcat works》- Digester [推荐]</a> 一章</li><li><code>parse()</code> 方法就是 Digester 处理 <code>conf/server.xml</code> 创建各个组件的过程。值的一提的是这些组件都是使用反射的方式来创建的。特别的，在创建 Digester 的时候，添加了一些特别的 <code>rule Set</code>，用于创建一些十分核心的组件，这些组件在 <code>conf/server.xml</code> 中没有但是其作用都比较大，这里做下简单介绍，当 Start 时用到了再详细说明：<ol><li><code>EngineConfig</code>。<code>LifecycleListener</code> 的实现类,触发 Engine 的生命周期事件后调用，这个监听器没有特别大的作用，就是打印一下日志</li><li><code>HostConfig</code>。<code>LifecycleListener</code> 的实现类，触发 Host 的生命周期事件后调用。这个监听器的作用就是部署应用程序，这包括 <code>conf/&lt;Engine&gt;/&lt;Host&gt;/</code> 目录下所有的 Context xml 文件 和 <code>webapps</code> 目录下的应用程序，不管是 war 文件还是已解压的目录。<br>另外后台进程对应用程序的热部署也是由该监听器负责的。</li><li><code>ContextConfig</code>。<code>LifecycleListener</code> 的实现类，触发 Context 的生命周期事件时调用。这个监听器的作用是配置应用程序，它会读取并合并 <code>conf/web.xml</code> 和 应用程序的 <code>web.xml</code>，分析 <code>/WEB-INF/classes/</code> 和 <code>/WEB-INF/lib/*.jar</code> 中的 Class 文件的注解，将其中所有的 Servlet、ServletMapping、Filter、FilterMapping、Listener 都配置到 <code>StandardContext</code> 中，以备后期使用。当然了 <code>web.xml</code> 中还有一些其他的应用程序参数，最后都会一并配置到 <code>StandardContext</code> 中。</li></ol></li><li><code>reconfigureStartStopExecutor()</code> 用于重新配置启动和停止子容器的 <code>Executor</code>。默认是 1 个线程。我们可以配置 <code>conf/server.xml</code> 中 <code>Engine</code> 的 <code>startStopThreads</code>，来指定用于启动和停止子容器的线程数量，如果配置 0 的话会使用 <code>Runtime.getRuntime().availableProcessors()</code> 作为线程数，若配置为负数的话会使用 <code>Runtime.getRuntime().availableProcessors() + 配置值</code>，若和小与 1 的话，使用 1 作为线程数。当线程数是 1 时，使用 <code>InlineExecutorService</code> 它直接使用当前线程来执行启动停止操作，否则使用 <code>ThreadPoolExecutor</code> 来执行，其最大线程数为我们配置的值。</li><li>需要注意的是 Host 的 <code>init</code> 操作是在 Start 阶段来做的， <code>StardardHost</code> 创建好后其 <code>state</code> 属性的默认值是 <code>LifecycleState.NEW</code>，所以在其调用 <code>startInternal()</code> 之前会进行一次初始化。</li></ol><h2 id="Tomcat-Start-Deployment"><a href="#Tomcat-Start-Deployment" class="headerlink" title="Tomcat Start[Deployment]"></a>Tomcat Start[Deployment]</h2><p><img src="/images/tomcat-start.png" alt=""></p><ol><li>图中从 <code>StandardHost</code> Start <code>StandardContext</code> 的这步其实在真正的执行流程中会直接跳过，因为 <code>conf/server.xml</code> 文件中并没有配置任何的 <code>Context</code>，所以在 <code>findChildren()</code> 查找子容器时会返回空数组，所以之后遍历子容器来启动子容器的 <code>for</code> 循环就直接跳过了。</li><li>触发 Host 的 <code>BEFORE_START_EVENT</code> 生命周期事件，<code>HostConfig</code> 调用其 <code>beforeStart()</code> 方法创建 <code>$CATALINA_BASE/webapps</code> &amp; <code>$CATALINA_BASE/conf/&lt;Engine&gt;/&lt;Host&gt;/</code> 目录。</li><li>触发 Host 的 <code>START_EVENT</code> 生命周期事件，<code>HostConfig</code> 调用其 <code>start()</code> 方法开始部署已在 <code>$CATALINA_BASE/webapps</code> &amp; <code>$CATALINA_BASE/conf/&lt;Engine&gt;/&lt;Host&gt;/</code> 目录下的应用程序。<ol><li>解析 <code>$CATALINA_BASE/conf/&lt;Engine&gt;/&lt;Host&gt;/</code> 目录下所有定义 <code>Context</code> 的 XML 文件，并添加到 <code>StandardHost</code>。这些 XML 文件称为应用程序描述符。正因为如此，我们可以配置一个虚拟路径来保存应用程序中用到的图片，详细的配置过程请参考 <a href="https://github.com/c-rainstorm/OnlineShoppingSystem-Documents/blob/master/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%8A%80%E6%9C%AF%E8%AF%B4%E6%98%8E/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97.md#63-%E9%85%8D%E7%BD%AE%E5%9B%BE%E7%89%87%E5%AD%98%E6%94%BE%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener">开发环境配置指南 - 6.3. 配置图片存放目录</a></li><li>部署 <code>$CATALINA_BASE/webapps</code> 下所有的 WAR 文件，并添加到 <code>StandardHost</code>。</li><li>部署 <code>$CATALINA_BASE/webapps</code> 下所有已解压的目录，并添加到 <code>StandardHost</code>。</li></ol><ul><li>特别的，添加到 <code>StandardHost</code> 时，会直接调用 <code>StandardContext</code> 的 <code>start()</code> 方法来启动应用程序。启动应用程序步骤请看 Context Start 一节。</li></ul></li><li>在 <code>StandardEngine</code> 和 <code>StandardContext</code> 启动时都会调用各自的 <code>threadStart()</code> 方法，该方法会创建一个新的后台线程来处理该该容器和子容器及容器内各组件的后台事件。<code>StandardEngine</code> 会直接创建一个后台线程，<code>StandardContext</code> 默认是不创建的，和 <code>StandardEngine</code> 共用同一个。后台线程处理机制是周期调用组件的 <code>backgroundProcess()</code> 方法。详情请看 Background process 一节。</li><li><code>MapperListener</code><ul><li><code>addListeners(engine)</code> 方法会将该监听器添加到 <code>StandardEngine</code> 和它的所有子容器中</li><li><code>registerHost()</code> 会注册所有的 <code>Host</code> 和他们的子容器到 <code>Mapper</code> 中，方便后期请求处理时使用。</li><li>当有新的应用(<code>StandardContext</code>)添加进来后，会触发 Host 的容器事件，然后通过 <code>MapperListener</code> 将新应用的映射注册到 <code>Mapper</code> 中。</li></ul></li><li>Start 工作都做完以后 <code>Catalina</code> 会创建一个 <code>CatalinaShutdownHook</code> 并注册到 JVM。<code>CatalinaShutdownHook</code> 继承了 <code>Thread</code>,是 <code>Catalina</code> 的内部类。其 <code>run</code> 方法中直接调用了 <code>Catalina</code> 的 <code>stop()</code> 方法来关闭整个服务器。注册该 Thread 到 JVM 的原因是防止用户非正常终止 Tomcat，比如直接关闭命令窗口之类的。当直接关闭命令窗口时，操作系统会向 JVM 发送一个终止信号，然后 JVM 在退出前会逐一启动已注册的 ShutdownHook 来关闭相应资源。</li></ol><h3 id="Context-Start"><a href="#Context-Start" class="headerlink" title="Context Start"></a>Context Start</h3><p><img src="/images/tomcat-context-start.png" alt=""></p><ol><li><code>StandRoot</code> 类实现了 <code>WebResourceRoot</code> 接口，它容纳了一个应用程序的所有资源，通俗的来说就是部署到 <code>webapps</code> 目录下对应 <code>Context</code> 的目录里的所有资源。因为我对 Tomcat 的资源管理部分暂时不是很感兴趣，所以资源管理相关类只是做了简单了解，并没有深入研究源代码。</li><li><code>resourceStart()</code> 方法会对 <code>StandardRoot</code> 进行初始配置</li><li><code>postWorkDirectory()</code> 用于创建对应的工作目录 <code>$CATALINA_BASE/work/&lt;Engine&gt;/&lt;Host&gt;/&lt;Context&gt;</code>, 该目录用于存放临时文件。</li><li><code>StardardContext</code> 只是一个容器，而 <code>ApplicationContext</code> 则是一个应用程序真正的运行环境，相关类及操作会在请求处理流程看完以后进行补充。</li><li><code>StardardContext</code> 触发 <code>CONFIGURE_START_EVENT</code> 生命周期事件，<code>ContextConfig</code> 开始调用 <code>configureStart()</code> 对应用程序进行配置。<ol><li>这个过程会解析并合并 <code>conf/web.xml</code> &amp; <code>conf/&lt;Engine&gt;/&lt;Host&gt;/web.xml.default</code> &amp; <code>webapps/&lt;Context&gt;/WEB-INF/web.xml</code> 中的配置。</li><li>配置配置文件中的参数到 <code>StandardContext</code>, 其中主要的包括 Servlet、Filter、Listener。</li><li>因为从 Servlet3.0 以后是直接支持注解的，所以服务器必须能够处理加了注解的类。Tomcat 通过分析 <code>WEB-INF/classes/</code> 中的 Class 文件和 <code>WEB-INF/lib/</code> 下的 jar 包将扫描到的 Servlet、Filter、Listerner 注册到 <code>StandardContext</code>。</li><li><code>setConfigured(true)</code>，是非常关键的一个操作，它标识了 Context 的成功配置，若未设置该值为 true 的话，Context 会启动失败。</li></ol></li></ol><h2 id="Background-process"><a href="#Background-process" class="headerlink" title="Background process"></a>Background process</h2><p><img src="/images/tomcat-background-thread.png" alt=""></p><ol><li>后台进程的作用就是处理一下 Servlet 引擎中的周期性事件，处理周期默认是 10s。</li><li>特别的 <code>StandardHost</code> 的 <code>backgroundProcess()</code> 方法会触发 Host 的 <code>PERIODIC_EVENT</code> 生命周期事件。然后 <code>HostConfig</code> 会调用其 <code>check()</code> 方法对已加载并进行过重新部署的应用程序进行 <code>reload</code> 或对新部署的应用程序进行热部署。热部署跟之前介绍的部署步骤一致， <code>reload()</code> 过程只是简单的顺序调用 <code>setPause(true)、stop()、start()、setPause(false)</code>，其中 <code>setPause(true)</code> 的作用是暂时停止接受请求。</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://www.amazon.com/How-Tomcat-Works-Budi-Kurniawan/dp/097521280X" target="_blank" rel="noopener">《How Tomcat works》</a></li><li><a href="http://product.dangdang.com/25084132.html" target="_blank" rel="noopener">《Tomcat 架构解析》– 刘光瑞</a></li><li><a href="https://tomcat.apache.org/tomcat-9.0-doc/index.html" target="_blank" rel="noopener">Tomcat-9.0-doc</a></li><li><a href="http://www-eu.apache.org/dist/tomcat/tomcat-9/v9.0.0.M22/src/" target="_blank" rel="noopener">apache-tomcat-9.0.0.M22-src</a></li></ol>]]></content>
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat请求处理流程</title>
      <link href="/2017/09/05/Tomcat%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
      <url>/2017/09/05/Tomcat%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Tomcat-请求处理流程"><a href="#Tomcat-请求处理流程" class="headerlink" title="Tomcat 请求处理流程"></a>Tomcat 请求处理流程</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="/images/tomcat-request-process-model.jpg" alt=""></p><ol><li>Connector 启动以后会启动一组线程用于不同阶段的请求处理过程。<ol><li><code>Acceptor</code> 线程组。用于接受新连接，并将新连接封装一下，选择一个 <code>Poller</code> 将新连接添加到 <code>Poller</code> 的事件队列中。</li><li><code>Poller</code> 线程组。用于监听 Socket 事件，当 Socket 可读或可写等等时，将 Socket 封装一下添加到 <code>worker</code> 线程池的任务队列中。</li><li><code>worker</code> 线程组。用于对请求进行处理，包括分析请求报文并创建 Request 对象，调用容器的 pipeline 进行处理。</li></ol></li></ol><ul><li><code>Acceptor</code>、<code>Poller</code>、<code>worker</code> 所在的 <code>ThreadPoolExecutor</code> 都维护在 <code>NioEndpoint</code> 中。</li></ul><h2 id="Connector-Init-and-Start"><a href="#Connector-Init-and-Start" class="headerlink" title="Connector Init and Start"></a>Connector Init and Start</h2><p><img src="/images/tomcat-connector-start.png" alt=""></p><ol><li><code>initServerSocket()</code>，通过 <code>ServerSocketChannel.open()</code> 打开一个 ServerSocket，默认绑定到 8080 端口，默认的连接等待队列长度是 100， 当超过 100 个时会拒绝服务。我们可以通过配置 <code>conf/server.xml</code> 中 <code>Connector</code> 的 <code>acceptCount</code> 属性对其进行定制。</li><li><code>createExecutor()</code> 用于创建 <code>Worker</code> 线程池。默认会启动 10 个 <code>Worker</code> 线程，Tomcat 处理请求过程中，Woker 最多不超过 200 个。我们可以通过配置 <code>conf/server.xml</code> 中 <code>Connector</code> 的 <code>minSpareThreads</code> 和 <code>maxThreads</code> 对这两个属性进行定制。</li><li><code>Pollor</code> 用于检测已就绪的 Socket。 默认最多不超过 2 个，<code>Math.min(2,Runtime.getRuntime().availableProcessors());</code>。我们可以通过配置 <code>pollerThreadCount</code> 来定制。</li><li><code>Acceptor</code> 用于接受新连接。默认是 1 个。我们可以通过配置 <code>acceptorThreadCount</code> 对其进行定制。</li></ol><h2 id="Requtst-Process"><a href="#Requtst-Process" class="headerlink" title="Requtst Process"></a>Requtst Process</h2><h3 id="Acceptor"><a href="#Acceptor" class="headerlink" title="Acceptor"></a>Acceptor</h3><p><img src="/images/tomcat-request-process-acceptor.png" alt=""></p><ol><li><code>Acceptor</code> 在启动后会阻塞在 <code>ServerSocketChannel.accept();</code> 方法处，当有新连接到达时，该方法返回一个 <code>SocketChannel</code>。</li><li>配置完 Socket 以后将 Socket 封装到 <code>NioChannel</code> 中，并注册到 <code>Poller</code>,值的一提的是，我们一开始就启动了多个 <code>Poller</code> 线程，注册的时候，连接是公平的分配到每个 <code>Poller</code> 的。<code>NioEndpoint</code> 维护了一个 <code>Poller</code> 数组，当一个连接分配给 <code>pollers[index]</code> 时，下一个连接就会分配给 <code>pollers[(index+1)%pollers.length]</code>.</li><li><code>addEvent()</code> 方法会将 Socket 添加到该 <code>Poller</code> 的 <code>PollerEvent</code> 队列中。到此 <code>Acceptor</code> 的任务就完成了。</li></ol><h3 id="Poller"><a href="#Poller" class="headerlink" title="Poller"></a>Poller</h3><p><img src="/images/tomcat-request-process-poller.png" alt=""></p><ol><li><code>selector.select(1000)</code>。当 <code>Poller</code> 启动后因为 selector 中并没有已注册的 <code>Channel</code>，所以当执行到该方法时只能阻塞。所有的 <code>Poller</code> 共用一个 Selector，其实现类是 <code>sun.nio.ch.EPollSelectorImpl</code></li><li><code>events()</code> 方法会将通过 <code>addEvent()</code> 方法添加到事件队列中的 Socket 注册到 <code>EPollSelectorImpl</code>，当 Socket 可读时，<code>Poller</code> 才对其进行处理</li><li><code>createSocketProcessor()</code> 方法将 Socket 封装到 <code>SocketProcessor</code> 中，<code>SocketProcessor</code> 实现了 <code>Runnable</code> 接口。<code>worker</code> 线程通过调用其 <code>run()</code> 方法来对 Socket 进行处理。</li><li><code>execute(SocketProcessor)</code> 方法将 <code>SocketProcessor</code> 提交到线程池，放入线程池的 <code>workQueue</code> 中。<code>workQueue</code> 是 <code>BlockingQueue</code> 的实例。到此 <code>Poller</code> 的任务就完成了。</li></ol><h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><p><img src="/images/tomcat-request-process-worker.png" alt=""></p><ol><li><code>worker</code> 线程被创建以后就执行 <code>ThreadPoolExecutor</code> 的 <code>runWorker()</code> 方法，试图从 <code>workQueue</code> 中取待处理任务，但是一开始 <code>workQueue</code> 是空的，所以 <code>worker</code> 线程会阻塞在 <code>workQueue.take()</code> 方法。</li><li>当新任务添加到 <code>workQueue</code>后，<code>workQueue.take()</code> 方法会返回一个 <code>Runnable</code>，通常是 <code>SocketProcessor</code>,然后 <code>worker</code> 线程调用 <code>SocketProcessor</code> 的 <code>run()</code> 方法对 Socket 进行处理。</li><li><code>createProcessor()</code> 会创建一个 <code>Http11Processor</code>, 它用来解析 Socket，将 Socket 中的内容封装到 <code>Request</code> 中。注意这个 <code>Request</code> 是临时使用的一个类，它的全类名是 <code>org.apache.coyote.Request</code>，</li><li><code>postParseRequest()</code> 方法封装一下 Request，并处理一下映射关系(从 URL 映射到相应的 <code>Host</code>、<code>Context</code>、<code>Wrapper</code>)。<ol><li><code>CoyoteAdapter</code> 将 Rquest 提交给 <code>Container</code> 处理之前，并将 <code>org.apache.coyote.Request</code> 封装到 <code>org.apache.catalina.connector.Request</code>，传递给 <code>Container</code> 处理的 Request 是 <code>org.apache.catalina.connector.Request</code>。</li><li><code>connector.getService().getMapper().map()</code>，用来在 <code>Mapper</code> 中查询 URL 的映射关系。映射关系会保留到 <code>org.apache.catalina.connector.Request</code> 中，<code>Container</code> 处理阶段 <code>request.getHost()</code> 是使用的就是这个阶段查询到的映射主机，以此类推 <code>request.getContext()</code>、<code>request.getWrapper()</code> 都是。</li></ol></li><li><code>connector.getService().getContainer().getPipeline().getFirst().invoke()</code> 会将请求传递到 <code>Container</code> 处理，当然了 <code>Container</code> 处理也是在 <code>Worker</code> 线程中执行的，但是这是一个相对独立的模块，所以单独分出来一节。</li></ol><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p><img src="/images/tomcat-request-process-container.png" alt=""></p><ol><li>需要注意的是，基本上每一个容器的 <code>StandardPipeline</code> 上都会有多个已注册的 <code>Valve</code>，我们只关注每个容器的 Basic Valve。其他 Valve 都是在 Basic Valve 前执行。</li><li><code>request.getHost().getPipeline().getFirst().invoke()</code> 先获取对应的 <code>StandardHost</code>，并执行其 pipeline。</li><li><code>request.getContext().getPipeline().getFirst().invoke()</code> 先获取对应的 <code>StandardContext</code>,并执行其 pipeline。</li><li><code>request.getWrapper().getPipeline().getFirst().invoke()</code> 先获取对应的 <code>StandardWrapper</code>，并执行其 pipeline。</li><li>最值得说的就是 <code>StandardWrapper</code> 的 Basic Valve，<code>StandardWrapperValve</code><ol><li><code>allocate()</code> 用来加载并初始化 <code>Servlet</code>，值的一提的是 Servlet 并不都是单例的，当 Servlet 实现了 <code>SingleThreadModel</code> 接口后，<code>StandardWrapper</code> 会维护一组 Servlet 实例，这是享元模式。当然了 <code>SingleThreadModel</code> 在 Servlet 2.4 以后就弃用了。</li><li><code>createFilterChain()</code> 方法会从 <code>StandardContext</code> 中获取到所有的过滤器，然后将匹配 Request URL 的所有过滤器挑选出来添加到 <code>filterChain</code> 中。</li><li><code>doFilter()</code> 执行过滤链,当所有的过滤器都执行完毕后调用 Servlet 的 <code>service()</code> 方法。</li></ol></li></ol>]]></content>
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java计算常用类BigDecimal</title>
      <link href="/2017/08/02/Java%E8%AE%A1%E7%AE%97%E5%B8%B8%E7%94%A8%E7%B1%BBBigDecimal/"/>
      <url>/2017/08/02/Java%E8%AE%A1%E7%AE%97%E5%B8%B8%E7%94%A8%E7%B1%BBBigDecimal/</url>
      <content type="html"><![CDATA[<h1 id="java-lang-BigDecimal"><a href="#java-lang-BigDecimal" class="headerlink" title="java.lang.BigDecimal"></a>java.lang.BigDecimal</h1><p>基于 JDK9</p><hr><!-- TOC --><ul><li><a href="#概览">概览</a></li><li><a href="#继承结构">继承结构</a><ul><li><a href="#number"><code>Number</code></a></li></ul></li><li><a href="#重要相关类">重要相关类</a><ul><li><a href="#roundingmode"><code>RoundingMode</code></a></li><li><a href="#mathcontext"><code>MathContext</code></a></li><li><a href="#biginteger"><code>BigInteger</code></a></li></ul></li><li><a href="#重要域成员">重要域成员</a></li><li><a href="#重要成员方法">重要成员方法</a><ul><li><a href="#算数操作">算数操作</a></li><li><a href="#缩放">缩放</a></li></ul></li><li><a href="#最佳实践">最佳实践</a></li><li><a href="#参考">参考</a></li></ul><!-- /TOC --><hr><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>不可变的任意精度有符号十进制数。 <code>BigDecimal</code> 用一个任意精度整数和一个缩放比例来表示一个数。精度是从左侧第一个非 0 数字开始到最后一个数字为止的数字个数。一些例子：</p><table><thead><tr><th style="text-align:right">表示的数</th><th style="text-align:right">精度</th><th style="text-align:right">整数域</th><th style="text-align:right">缩放比例</th><th style="text-align:right">计算方式</th></tr></thead><tbody><tr><td style="text-align:right">100</td><td style="text-align:right">3</td><td style="text-align:right">100</td><td style="text-align:right">0</td><td style="text-align:right">100*(E-0)</td></tr><tr><td style="text-align:right">0.01</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">2</td><td style="text-align:right">1*(E-2)</td></tr><tr><td style="text-align:right">100.001</td><td style="text-align:right">6</td><td style="text-align:right">100001</td><td style="text-align:right">3</td><td style="text-align:right">100001*(E-3)</td></tr><tr><td style="text-align:right">100000000000000000000.01</td><td style="text-align:right">22</td><td style="text-align:right">1000000000000000000001</td><td style="text-align:right">2</td><td style="text-align:right">1000000000000000000001*(E-2)</td></tr></tbody></table><p>注意：缩放比例一般是非负数（整数是 0，小数是正数，当计算结果的整数部分位数大于精度时会是负数），缩放比例也可以手动调用 <code>setScale()</code> 方法修改为负数，缩放比例为负数时意味着小数点前移，有可能会损失精度（比如：109，本来整数域是 109、缩放比例是 0，若缩放比例改为 -1 的话，整数域就需要变为 10 或 11，而这两种方式都无法准确表示原来的 109）。在调用 <code>setScale()</code> 时需要指定舍入策略，否则整数域无法判断是记为 10 还是 11，demo 请看 <strong>重要成员方法-setScale()</strong>。</p><p><code>BigDecimal</code> 提供了一些算数、缩放、舍入、比较、哈希、格式转换操作。 <code>toString()</code> 方式提供了一种规范的展示方式(PS：IDEA 在显示 debug 信息时会调用对象的 <code>toString()</code> 方法。如果在实例真正的创建完成之前加断点停住了，那么这个 <code>BigDecimal</code> 实例就永远也得不到正确的 String 方式的展示了。</p><p><code>BigDecimal</code> 把舍入行为的控制权完全交给了使用者。如果未指定舍入模式并且计算结果无法被精确记录会直接抛出一个 <code>ArithmeticException</code>。若在计算时指定了 <code>MathContext</code>，那么结果会以 <code>MathContext</code> 所定义的精度和舍入规则来保留。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal one = BigDecimal.ONE;</span><br><span class="line">BigDecimal three = <span class="keyword">new</span> BigDecimal(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">BigDecimal result = one.divide(three); <span class="comment">// 1/3 是无限循环小数，所以会抛异常</span></span><br><span class="line"></span><br><span class="line">BigDecimal result = one.divide(three, RoundingMode.UP); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">BigDecimal result = one.divide(three, <span class="keyword">new</span> MathContext(<span class="number">7</span>, RoundingMode.HALF_UP)); <span class="comment">// 0.3333333</span></span><br></pre></td></tr></table></figure><p>当指定的 <code>MathContext</code> 实例的精度是 0 时，和未指定该参数的效果是一样的，此时 <code>MathContext</code> 中的 <code>RoundingMode</code> 并未使用，所以结果与该值无关。</p><p>通常来说，舍入策略和精度决定了计算结果。精度决定计算结果的数字个数，舍入策略决定了如何舍弃尾部的数字。</p><p>算数操作结果的缩放比例，除运算可能会使用更大的缩放比例，其他的运算遵循表格中的计算方式：</p><p><img src="/images/preferred-scales.png" alt=""></p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal dividend = BigDecimal.ONE;          <span class="comment">// scale : 0</span></span><br><span class="line">BigDecimal divisor = <span class="keyword">new</span> BigDecimal(<span class="string">"32"</span>);     <span class="comment">// scale : 0</span></span><br><span class="line">BigDecimal result = dividend.divide(divisor);  <span class="comment">// scale : 5</span></span><br></pre></td></tr></table></figure><p>算数操作会先计算出一个中间结果（逻辑上的，实际本不存在这个实例），然后根据舍入规则和精度对该中间结果进行再次处理，得到的才是最后的结果。</p><p><strong>注意：<code>equal() &amp; hashCode()</code> 方法在实现时，只有缩放比例和整数域两个值都相等才会判定两个实例相等，所以将 <code>BigDecimal</code> 的实例做为 <code>SortedMap &amp; SortSet</code> 的 key时需要注意这一点</strong></p><h2 id="继承结构"><a href="#继承结构" class="headerlink" title="继承结构"></a>继承结构</h2><p><img src="/images/java.math.BigDecimal-class.png" alt=""></p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a><code>Number</code></h3><p>该类是一个抽象类，是 Java 平台所有数字类的父类。它提供了一些抽象方法接口将数字类转换为各种基本数据类型。这些方法由具体的数字类来实现。转换的过程可能会丢失精度、甚至改变符号。</p><p>一些子类：<code>AtomicInteger, AtomicLong, BigDecimal, BigInteger, Byte, Double, DoubleAccumulator, DoubleAdder, Float, Integer, Long, LongAccumulator, LongAdder, Short</code></p><h2 id="重要相关类"><a href="#重要相关类" class="headerlink" title="重要相关类"></a>重要相关类</h2><h3 id="RoundingMode"><a href="#RoundingMode" class="headerlink" title="RoundingMode"></a><code>RoundingMode</code></h3><p>该类是一个枚举类，枚举了 8 种舍入类型：</p><ol><li><code>CEILING</code>。向正无穷舍入</li><li><code>FLOOR</code>。向负无穷舍入</li><li><code>DOWN</code>。向 0 舍入</li><li><code>UP</code>。与 <code>DOWN</code> 相反。</li><li><code>HALF_UP</code>。五入</li><li><code>HALF_DOWN</code>。五舍</li><li><code>HALF_EVEN</code>。五向偶数方向舍入。</li><li><code>UNNECESSARY</code>。表示一定会得到精确结果，得不到时抛异常。</li></ol><p><img src="/images/rounding-mode-table.png" alt=""></p><h3 id="MathContext"><a href="#MathContext" class="headerlink" title="MathContext"></a><code>MathContext</code></h3><p>封装了精度及舍入规则，用于算数运算。</p><p>预定义的一些规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//精度为 0，相当于没有配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MathContext UNLIMITED =</span><br><span class="line">                <span class="keyword">new</span> MathContext(<span class="number">0</span>, RoundingMode.HALF_UP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精度为 7，舍入策略为 HALF_EVEN</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MathContext DECIMAL32 =</span><br><span class="line">                <span class="keyword">new</span> MathContext(<span class="number">7</span>, RoundingMode.HALF_EVEN);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精度为 16，舍入策略为 HALF_EVEN</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MathContext DECIMAL64 =</span><br><span class="line">                <span class="keyword">new</span> MathContext(<span class="number">16</span>, RoundingMode.HALF_EVEN);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精度为 34，舍入策略为 HALF_EVEN</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MathContext DECIMAL128 =</span><br><span class="line">                <span class="keyword">new</span> MathContext(<span class="number">34</span>, RoundingMode.HALF_EVEN);</span><br></pre></td></tr></table></figure><h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a><code>BigInteger</code></h3><p>任意精度的整数。底层存储方式也是 bits 位，与基本类型的区别在于，基本类型 <code>int</code> 固定 32bits，<code>BigInteger</code> 的 bits 存储在一个 <code>int[]</code> 中，所以他可以表示很大的整数。比如 2^128 的二进制表示是 <code>100...000(1+128个0)</code> 一共 129 位，存放在长度为 <code>Math.ceil(129.0/32)</code> 的数组中。不再赘述，有兴趣自己查看源码。</p><h2 id="重要域成员"><a href="#重要域成员" class="headerlink" title="重要域成员"></a>重要域成员</h2><ol><li><code>private final BigInteger intVal;</code><ul><li>整数域。(整数域超过 18 位时使用)</li></ul></li><li><code>private final transient long intCompact;</code><ul><li>整数域。整数域在 long 能够表示的范围内使用，超出能表示范围会被赋为 <code>Long.MIN_VALUE</code>，代表整数域此时使用 <code>intVal</code> 来表示</li></ul></li><li><code>private final int scale;</code><ul><li>缩放比例。也代表小数点右侧的数字数，整数域相同，缩放比例越大表示的数越小。</li></ul></li><li><code>private transient int precision;</code><ul><li>精度。代表从左侧第一个非 0 数字开始到最后一个数字为止的数字个数。 <code>precision - scale</code> 值为正数时代表整数部分的位数。负数时表示小数点右侧 0 的个数且该数小于 1。</li></ul></li><li><code>private transient String stringCache;</code><ul><li><code>String</code> 表示的缓存。该值只赋值一次。</li></ul></li></ol><p>预缓存的 <code>BigDecimal</code></p><ol><li><code>public static final BigDecimal ZERO</code></li><li><code>public static final BigDecimal ONE</code></li><li><code>public static final BigDecimal TEN</code></li></ol><h2 id="重要成员方法"><a href="#重要成员方法" class="headerlink" title="重要成员方法"></a>重要成员方法</h2><p>为了简化描述方式下面使用 <code>[整数域，缩放比例]</code> 来表示 <code>BigDecimal</code> 实例。例如 <code>0.19 --&gt; [19（整数域）, 2（缩放比例）, 2（精度，可选）]</code> 来表示，中间结果只是逻辑上存在，实际上并不存在这个实例。</p><h3 id="算数操作"><a href="#算数操作" class="headerlink" title="算数操作"></a>算数操作</h3><ol><li><code>Add</code><ul><li><code>[19, 2] + [19, 2] = [38, 2]</code></li><li><code>[19, 2] + [19, 1] = [19, 2] + [190, 2] =  [209, 2]</code></li></ul></li><li><code>Subtract</code><ul><li><code>[19, 2] - [10, 2] = [19, 2] + [-10, 2] = [9, 2]</code></li></ul></li><li><code>multiply</code><ul><li><code>[1, 2] * [3, 4] = [3(1*3), 6(2+4)]</code></li></ul></li><li><code>divide</code><ul><li><code>divide(BigDecimal): [19, 2] / [100, 0] = [19*E+12, 14] / [100, 0] = [19*E+10, 14] = [19, 4]</code></li><li>此时未指定特定的 <code>MathContext</code>, 所以使用了默认值 <code>new MathContext( (int)Math.min(this.precision() + (long)Math.ceil(10.0*divisor.precision()/3.0),Integer.MAX_VALUE),RoundingMode.UNNECESSARY);</code> 即精度为 2+10*3/3 = 12，舍入方法为 <code>UNNECESSARY</code></li><li><code>14 = MathContext.precision + preferredScale = 12 + 2 - 0</code></li><li>化简一下得到最后结果</li></ul></li><li>其他运算有兴趣可以自己看源码。</li></ol><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p><code>BigDecimal</code> 提供了两种类型的方法来操作缩放比例。</p><ol><li><code>setScale() &amp; round()</code>。返回一个与原来实例近似或完全相等的实例，只是缩放比例或精度为指定的值(精度=缩放比例+整数部分位数，当 <code>BigDecimal</code> 整数部分为 0 时，调整缩放比例就是调整精度)。<ul><li><code>setScale(1, RoundingMode.UP): [19, 2] -&gt; [2, 1]</code></li><li><code>setScale(3): [19, 2] -&gt; [190, 3]</code></li><li><code>round(mc(1, RoundingMode.UP)): [19, 2, 2] -&gt; [2, 1, 1]</code></li><li><code>round(mc(3, RoundingMode.UNNECESSARY)) : [19, 2, 2] -&gt; [190, 3, 3]</code></li></ul></li><li><code>movePointLeft() &amp; movePointRight()</code>。直接增大/减小缩放比例。<ul><li><code>movePointLeft(1): [19, 2] -&gt; [19, 3]</code></li><li><code>movePointright(1): [19, 2] -&gt; [19, 1]</code></li></ul></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li>使用参数为 <code>String</code> 的构造参数。javadoc 中提到使用参数为 double 的构造参数有时会有出现不可预料的问题。</li><li>比较时使用 <code>compareTo() / signum()</code> 方法。概览中最后有提到不使用 <code>equals()</code> 的原因。</li><li>目前能想到的就这么多，如果你有其他想法可以给我提 <code>issue</code></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.oracle.com/javase/9/docs/api/java/math/BigDecimal.html" target="_blank" rel="noopener">Class BigDecimal</a></li><li><a href="https://stackoverflow.com/questions/21590590/setting-scale-to-a-negative-number-with-bigdecimal" target="_blank" rel="noopener">Setting scale to a negative number with BigDecimal – stackoverflow</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Number.html" target="_blank" rel="noopener">Class Number</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/math/RoundingMode.html" target="_blank" rel="noopener">Enum RoundingMode</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/math/MathContext.html" target="_blank" rel="noopener">Class MathContext</a></li><li><a href="https://docs.oracle.com/javase/9/docs/api/java/math/BigInteger.html" target="_blank" rel="noopener">Class BigInteger</a></li><li><a href="http://www.opentaps.org/docs/index.php/How_to_Use_Java_BigDecimal:_A_Tutorial#The_Problem" target="_blank" rel="noopener">How to Use Java BigDecimal: A Tutorial</a></li></ol>]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Servlet配置过滤器和异步过滤器</title>
      <link href="/2017/06/24/Servlet%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E5%BC%82%E6%AD%A5%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2017/06/24/Servlet%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E5%BC%82%E6%AD%A5%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-过滤器的实现。"><a href="#1-过滤器的实现。" class="headerlink" title="1.过滤器的实现。"></a>1.过滤器的实现。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Instant time = Instant.now();</span><br><span class="line">        StopWatch timer = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            timer.start();</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            timer.stop();</span><br><span class="line">            HttpServletRequest in = (HttpServletRequest)request;</span><br><span class="line">            HttpServletResponse out = (HttpServletResponse)response;</span><br><span class="line">            String length = out.getHeader(<span class="string">"Content-Length"</span>);</span><br><span class="line">            <span class="keyword">if</span>(length == <span class="keyword">null</span> || length.length() == <span class="number">0</span>)</span><br><span class="line">                length = <span class="string">"-"</span>;</span><br><span class="line">            System.out.println(in.getRemoteAddr() + <span class="string">" - - ["</span> + time + <span class="string">"]"</span> +</span><br><span class="line">                    <span class="string">" \""</span> + in.getMethod() + <span class="string">" "</span> + in.getRequestURI() + <span class="string">" "</span> +</span><br><span class="line">                    in.getProtocol() + <span class="string">"\" "</span> + out.getStatus() + <span class="string">" "</span> + length +</span><br><span class="line">                    <span class="string">" "</span> + timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-部署过滤器。"><a href="#2-部署过滤器。" class="headerlink" title="2.部署过滤器。"></a>2.部署过滤器。</h2><figure class="highlight java"><figcaption><span><?xml version</span></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> version=<span class="string">"3.1"</span>&gt;</span><br><span class="line">  &lt;display-name&gt;Filter Order Application&lt;/display-name&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;filterA&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">wrox</span>.<span class="title">FilterA</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">async</span>-<span class="title">supported</span>&gt;<span class="title">true</span>&lt;/<span class="title">async</span>-<span class="title">supported</span>&gt; </span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">filterA</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!-- &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">async</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt; --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">dispatcher</span>&gt;<span class="title">ASYNC</span>&lt;/<span class="title">dispatcher</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!-- &lt;<span class="title">dispatcher</span>&gt;<span class="title">REQUEST</span>&lt;/<span class="title">dispatcher</span>&gt; --&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">filterB</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">class</span>&gt;<span class="title">com</span>.<span class="title">wrox</span>.<span class="title">FilterB</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">filterB</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">servletTwo</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">servletThree</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">filterC</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">class</span>&gt;<span class="title">com</span>.<span class="title">wrox</span>.<span class="title">FilterC</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">filterC</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">servletTwo</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中要注意的是filter有一个支持异步属性，</p><p><dispatcher>ASYNC</dispatcher>有效的类型还有REQUEST,FORWARD,INCLUDE,ERROR和ASYNC意思是该过滤器支持的<br>类型是请求、转发、包含、错误和异步类型，比如下面的示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns=<span class="string">"/async"</span>, asyncSupported=<span class="keyword">true</span>,name=<span class="string">"async"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> HttpServletResponse responseAsyn;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsynServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">            responseAsyn=resp;</span><br><span class="line">    resp.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);  </span><br><span class="line">            PrintWriter out = resp.getWriter();  </span><br><span class="line">            out.println(<span class="string">"进入Servlet的时间："</span> + <span class="keyword">new</span> Date() + <span class="string">"."</span>);  </span><br><span class="line">            out.flush();  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//在子线程中执行业务调用，并由其负责输出响应，主线程退出  </span></span><br><span class="line">            <span class="keyword">final</span> AsyncContext ctx = req.startAsync();  </span><br><span class="line">            ctx.setTimeout(<span class="number">200000</span>);  </span><br><span class="line">            <span class="keyword">new</span> Work(ctx,responseAsyn).start();  </span><br><span class="line">            out.println(<span class="string">"结束Servlet的时间："</span> + <span class="keyword">new</span> Date() + <span class="string">"."</span>);  </span><br><span class="line">            out.flush();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> AsyncContext context;  </span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Work</span><span class="params">(AsyncContext context,HttpServletResponse response)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.context = context;  </span><br><span class="line">        <span class="keyword">this</span>.response=response;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);<span class="comment">//让线程休眠2s钟模拟超时操作  </span></span><br><span class="line">            PrintWriter wirter = context.getResponse().getWriter();           </span><br><span class="line">            response.sendRedirect(<span class="string">"/servletOne"</span>);</span><br><span class="line">            wirter.write(<span class="string">"2s后调用servletOne"</span>);  </span><br><span class="line">            wirter.flush();  </span><br><span class="line">            context.complete();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">              </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">              </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-使用注解声明过滤器"><a href="#3-使用注解声明过滤器" class="headerlink" title="3.使用注解声明过滤器"></a>3.使用注解声明过滤器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Dispatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter</span>(</span><br><span class="line">urlPatterns=&#123;<span class="string">"/servlet/*"</span>,<span class="string">"/servletone"</span>&#125;,</span><br><span class="line">servletNames=&#123;<span class="string">"servletTwo"</span>&#125;,</span><br><span class="line">dispatcherTypes=&#123;DispatcherType.ASYNC&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterA</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Entering FilterA.doFilter().ASNY!!!"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">"Leaving FilterA.doFilter()."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入了过滤器的init方法==&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-过滤器的排序"><a href="#4-过滤器的排序" class="headerlink" title="4.过滤器的排序"></a>4.过滤器的排序</h2><p>  由于注解标识的过滤器无法按照需要的顺序过滤，所以只能使用部署描述符进行过滤。排在越前的过滤器先执行，过滤器链就像一条流水线，一个出错了就不会继续执行过滤，实例代码.</p><h2 id="5-过滤器处理异步请求。"><a href="#5-过滤器处理异步请求。" class="headerlink" title="5.过滤器处理异步请求。"></a>5.过滤器处理异步请求。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.AsyncContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponseWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyRequestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = config.getFilterName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Entering "</span> + <span class="keyword">this</span>.name + <span class="string">".doFilter()."</span>);</span><br><span class="line">        chain.doFilter(</span><br><span class="line">                <span class="keyword">new</span> HttpServletRequestWrapper((HttpServletRequest)request),</span><br><span class="line">                <span class="keyword">new</span> HttpServletResponseWrapper((HttpServletResponse)response)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(request.isAsyncSupported() &amp;&amp; request.isAsyncStarted())</span><br><span class="line">        &#123;</span><br><span class="line">            AsyncContext context = request.getAsyncContext();</span><br><span class="line">            System.out.println(<span class="string">"Leaving "</span> + <span class="keyword">this</span>.name + <span class="string">".doFilter(), async "</span> +</span><br><span class="line">                    <span class="string">"context holds wrapped request/response = "</span> +</span><br><span class="line">                    !context.hasOriginalRequestAndResponse());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"Leaving "</span> + <span class="keyword">this</span>.name + <span class="string">".doFilter()."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中异步过滤器只有在标注了异步（@WebServlet(urlPatterns=”/async”, asyncSupported=true,name=”async”)或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;filterA&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">wrox</span>.<span class="title">FilterA</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">async</span>-<span class="title">supported</span>&gt;<span class="title">true</span>&lt;/<span class="title">async</span>-<span class="title">supported</span>&gt; </span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>才会执行<br>有关更多实例代码，在我的github地址</p>]]></content>
      
      <categories>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot+Vue+Nginx打造自己的直播间</title>
      <link href="/2017/06/24/SpringBoot+Vue+Nginx%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9B%B4%E6%92%AD%E9%97%B4/"/>
      <url>/2017/06/24/SpringBoot+Vue+Nginx%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9B%B4%E6%92%AD%E9%97%B4/</url>
      <content type="html"><![CDATA[<hr><h1 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h1><ul><li><a href="http://139.199.82.213:8080/LiveDemo/live_room" target="_blank" rel="noopener">演示地址(电脑端与移动端效果不同哦)</a>        </li><li><a href="https://github.com/jack-hoo/LiveRoomDemo_Server" target="_blank" rel="noopener">服务端项目地址</a></li><li><a href="https://github.com/jack-hoo/LiveRoomDemo_Client" target="_blank" rel="noopener">客户端项目地址</a>        </li></ul><blockquote><p>手机端效果<br>![动图][1]        </p></blockquote><p>这个场景很熟悉吧~~ 通过obs推流软件来推流。 </p><p>![图片描述][2]</p><p>户外直播，通过yasea手机端推流软件，使用手机摄像头推流。</p><p>![图片描述][3]</p><blockquote><p>电脑端效果<br>播放香港卫视</p></blockquote><p>![图片描述][4]</p><p>直播画面</p><p>![图片描述][5]</p><h1 id="项目总览"><a href="#项目总览" class="headerlink" title="项目总览"></a>项目总览</h1><p>项目分为三个部分:</p><ol><li><p><strong>客户端</strong><br>直播间视频拉流、播放和聊天室，炫酷的弹幕以及直播间信息        </p></li><li><p><strong>服务端</strong><br>处理直播间、用户的数据业务,聊天室消息的处理</p></li><li><p><strong>服务器部署</strong><br>视频服务器和web服务器</p></li></ol><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p><strong>移动客户端</strong></p><ul><li>VUE全家桶</li><li>UI层vonic</li><li>axios</li><li>视频播放器: vue-video-player + videojs-contrib-hls</li><li>websocket客户端: vue-stomp</li><li>弹幕插件: vue-barrage</li><li>打包工具:webpack        </li></ul><p><strong>电脑端客户端</strong></p><ul><li>项目架构: Jquery + BootStrap</li><li>视频播放器: video.js</li><li>websocket客户端: stomp.js + sockjs.js</li><li>弹幕插件: Jquery.danmu.js</li><li>模版引擎: thymeleaf  </li></ul><p><strong>服务端</strong></p><ul><li>IDE: IntelliJ IDEA </li><li>项目架构: SpringBoot1.5.4 +Maven3.0</li><li>主数据库: Mysql5.7</li><li>辅数据库: redis3.2</li><li>数据库访问层: spring-boot-starter-data-jpa + spring-boot-starter-data-redis</li><li>websocket: spring-boot-starter-websocket</li><li>消息中间件: RabbitMQ/3.6.10        </li></ul><p><strong>服务器部署</strong></p><ul><li>视频直播模块: nginx-rtmp-module</li><li>web应用服务器: tomcat8.0</li><li>服务器: 腾讯云centos6.5        <h1 id="技术点讲解"><a href="#技术点讲解" class="headerlink" title="技术点讲解"></a>技术点讲解</h1></li></ul><p>###直播间主要涉及到两个主要功能：第一是视频直播、第二是聊天室。这两个都是非常讲究实时性。</p><ul><li><strong>视频直播</strong></li></ul><p>说到直播我们先了解下几个常用的直播流协议,看了挺多的流媒体协议文章博客，但都是非常粗略，这里有个比较详细的<a href="http://blog.csdn.net/tttyd/article/details/12032357/" target="_blank" rel="noopener"> 流媒体协议介绍</a>，如果想详细了解协议内容估计去要看看专业书籍了。这里我们用到的只是rtmp和hls，实践后发现：rtmp只能够在电脑端播放，hls只能够在手机端播放。而且rtmp是相当快的尽管没有rtsp那么快，延迟只有几秒，我测试的就差不多2-5秒，但是hls大概有10几秒。所以如果你体验过demo,就会发现手机延迟比较多。</p><p>直播的流程:<br>直播分为推流和拉流两个过程，那么流推向哪里，拉流又从哪里拉取呢？那当然需要视频服务器啦，千万不要以为视频直播服务器很复杂，其实在nginx服务器中一切都变得简单。后面我会讲解如何部署Nginx服务器并配置视频模块(nginx-rtmp-module).        </p><p>首先主播通过推流软件，比如OBS Studio推流软件，这个是比较专业级别的，很多直播平台的推荐主播使用这个软件来推送视频流，这里我也推荐一个开源的安卓端推流工具Yasea,<a href="https://pan.baidu.com/s/1gfcgLYb" target="_blank" rel="noopener">下载地址</a>，文件很小，但是很强大。<br>直播内容推送到服务器后，就可以在服务器端使用视频编码工具进行转码了，可以转换成各种高清，标清，超清的分辨率视频，也就是为什么我们在各个视频网站都可以选择视频清晰度。这里我们没有转码，只是通过前端视频播放器(video.js)来拉取视频.这样整个视频推流拉流过程就完成了。</p><ul><li><strong>聊天室</strong></li></ul><p>直播间里面的聊天室跟我们的群聊天差不多，只不过它变成了web端，web端的即时通信方案有很多，这里我们选择websocket协议来与服务端通信，websocket是基于http之上的传输协议，客户端向服务端发送http请求，并携带Upgrade:websocket升级头信息表示转换websocket协议，通过与服务端握手成功后就可以建立tcp通道，由此来传递消息，它与http最大的差别就是，服务端可以主动向客户端发送消息。        </p><p>既然建立了消息通道，那我们就需要往通道里发消息，但是总得需要一个东西来管控消息该发给谁吧，要不然全乱套了，所以我们选择了消息中间件RabbitMQ.使用它来负责消息的路由去向。</p><hr><h2 id="理论知识都讲完啦，实操时间到"><a href="#理论知识都讲完啦，实操时间到" class="headerlink" title="理论知识都讲完啦，实操时间到!"></a><strong>理论知识都讲完啦，实操时间到!</strong></h2><p>#移动客户端实操<br><strong><a href="https://github.com/jack-hoo/LiveRoomDemo_Client" target="_blank" rel="noopener">源码地址</a></strong></p><p>##工程结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|—— build                        构建服务和webpack配置        </span><br><span class="line">|—— congfig                      项目不同环境的配置</span><br><span class="line">|—— dist                         build生成生产目录</span><br><span class="line">|—— static                       静态资源</span><br><span class="line">|—— package.json                 项目配置文件</span><br><span class="line">|—— src                          开发源代码目录</span><br><span class="line">    |—— api                      通过axios导出的api目录</span><br><span class="line">    |—— components               页面和组件</span><br><span class="line">    |—— public                   公有组件</span><br><span class="line">    |—— vuex                     全局状态</span><br><span class="line">    |—— main.js                  应用启动配置点</span><br></pre></td></tr></table></figure><p>##功能模块</p><ul><li>拉取服务器的直播视频流(hls)并播放直播画面</li><li>与服务端创建websocket连接，收发聊天室消息</li><li><p>通过websocket获取消息并发送到弹幕</p></li><li><p>通过websocket实时更新在线用户</p></li><li>结合服务端获取访问历史记录</li><li>问题反馈模块</li></ul><p>##效果图<br><img src="http://opikkf1o0.bkt.clouddn.com/LiveDemo/picture/2017-06-22-02mzeffect.gif" alt="全局功能"></p><p>##项目说明<br><strong><a href="https://github.com/jack-hoo/LiveRoomDemo_Client" target="_blank" rel="noopener">请参考源码</a></strong></p><p>#服务端实操<br><strong><a href="https://github.com/jack-hoo/LiveRoomDemo_Server" target="_blank" rel="noopener">源码地址</a></strong></p><p>由于个人比较喜欢接触新的东西，所以后端选择了springboot，前端选择了Vue.js年轻人嘛总得跟上潮流。SpringBoot实践过后发现真的太省心了，不用再理会各种配置文件，全自动化装配。<br>这里贴一下pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.hushangjie&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;rtmp-demo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;rtmp-demo&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-actuator-docs&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;!--&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;!--非严格模式解析HTML5--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sourceforge.nekohtml&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;nekohtml&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.9.22&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;!-- 打包成war时可以移除嵌入式tomcat插件 --&gt;</span><br><span class="line">            &lt;!--&lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;!--&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.webjars&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;vue&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- RabbitMQ相关配置--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.projectreactor&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;reactor-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.8.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.projectreactor&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;reactor-net&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.8.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.1.6.Final&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>application.properties文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://host:3306/database?characterEncoding=utf8&amp;amp;useSSL=false</span><br><span class="line">spring.datasource.username=username</span><br><span class="line">spring.datasource.password=password</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.thymeleaf.mode=LEGACYHTML5</span><br><span class="line">server.port=8085</span><br><span class="line"># REDIS (RedisProperties)</span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=0  </span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379  </span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=8  </span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=-1  </span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=8  </span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=0  </span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><p>##websocket配置      </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSocketMessageBroker</span><br><span class="line">public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer &#123;</span><br><span class="line">    //拦截器注入service失败解决办法</span><br><span class="line">    @Bean</span><br><span class="line">    public MyChannelInterceptor myChannelInterceptor()&#123;</span><br><span class="line">        return new MyChannelInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void registerStompEndpoints(StompEndpointRegistry registry) &#123;</span><br><span class="line">        //添加访问域名限制可以防止跨域socket连接</span><br><span class="line">        //setAllowedOrigins(&quot;http://localhost:8085&quot;)</span><br><span class="line">        registry.addEndpoint(&quot;/live&quot;).setAllowedOrigins(&quot;*&quot;).addInterceptors(new HandShkeInceptor()).withSockJS();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageBroker(MessageBrokerRegistry registry) &#123;</span><br><span class="line">        /*.enableSimpleBroker(&quot;/topic&quot;,&quot;/queue&quot;);*/</span><br><span class="line">        //假如需要第三方消息代理，比如rabitMQ,activeMq，在这里配置</span><br><span class="line">        registry.setApplicationDestinationPrefixes(&quot;/demo&quot;)</span><br><span class="line">                .enableStompBrokerRelay(&quot;/topic&quot;,&quot;/queue&quot;)</span><br><span class="line">                .setRelayHost(&quot;127.0.0.1&quot;)</span><br><span class="line">                .setRelayPort(61613)</span><br><span class="line">                .setClientLogin(&quot;guest&quot;)</span><br><span class="line">                .setClientPasscode(&quot;guest&quot;)</span><br><span class="line">                .setSystemLogin(&quot;guest&quot;)</span><br><span class="line">                .setSystemPasscode(&quot;guest&quot;)</span><br><span class="line">                .setSystemHeartbeatSendInterval(5000)</span><br><span class="line">                .setSystemHeartbeatReceiveInterval(4000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureClientInboundChannel(ChannelRegistration registration) &#123;</span><br><span class="line">        ChannelRegistration channelRegistration = registration.setInterceptors(myChannelInterceptor());</span><br><span class="line">        super.configureClientInboundChannel(registration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureClientOutboundChannel(ChannelRegistration registration) &#123;</span><br><span class="line">        super.configureClientOutboundChannel(registration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类继承了消息代理配置类，意味着我们将使用消息代理rabbitmq.使用registerStompEndpoints方法注册一个websocket终端连接。这里我们需要了解两个东西，第一个是stomp和sockjs,sockjs是啥呢，其实它是对于websocket的封装，因为如果单纯使用websocket的话效率会非常低，我们需要的编码量也会增多，而且如果浏览器不支持websocket，sockjs会自动降级为轮询策略，并模拟websocket,保证客户端和服务端可以通信。<br>stomp有是什么<a href="http://blog.csdn.net/chszs/article/details/46592777" target="_blank" rel="noopener">看这里</a></p><p>stomp是一种简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互，也就是我们上面的RabbbitMQ,它就是一个消息代理。<br>我们可以通过configureMessageBroker来配置消息代理，需要注意的是我们将要部署的服务器也应该要有RabbitMQ，因为它是一个中间件，安装非常容易，这里就不说明了。这里我们配置了“/topic,/queue”两个代理转播策略，就是说客户端订阅了前缀为“/topic,/queue”频道都会通过消息代理(RabbitMQ)来转发。跟spring没啥关系啦，完全解耦。</p><p>##websocke如何保证安全</p><p>一开始接触 stomp的时候一直有个问题困扰我，客户端只要与服务端通过websocket建立了连接，那么他就可以订阅任何内容，意味着可以接受任何消息，这样岂不是乱了套啦，于是我翻阅了大量博客文章，很多都是官方的例子并没有解决实际问题。经过琢磨，其实websocket是要考虑安全性的。具体在以下几个方面</p><ol><li>跨域websocket连接</li><li>协议升级前握手拦截器</li><li>消息信道拦截器            </li></ol><p>对于跨域问题，我们可以通过setAllowedOrigins方法来设置可连接的域名，防止跨站连接。        </p><p>对于站内用户是否允许连接我们可以如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class HandShkeInceptor extends HttpSessionHandshakeInterceptor &#123;</span><br><span class="line">    private static final Set&lt;UserEntity&gt; ONLINE_USERS = new HashSet&lt;&gt;();</span><br><span class="line">    @Override</span><br><span class="line">    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;握手前&quot;+request.getURI());</span><br><span class="line">        //http协议转换websoket协议进行前，通常这个拦截器可以用来判断用户合法性等</span><br><span class="line">        //鉴别用户</span><br><span class="line">       if (request instanceof ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;</span><br><span class="line">           //这句话很重要如果getSession(true)会导致移动端无法握手成功</span><br><span class="line">           //request.getSession(true)：若存在会话则返回该会话，否则新建一个会话。</span><br><span class="line">           //request.getSession(false)：若存在会话则返回该会话，否则返回NULL</span><br><span class="line">           //HttpSession session = servletRequest.getServletRequest().getSession(false);</span><br><span class="line">            HttpSession session = servletRequest.getServletRequest().getSession();</span><br><span class="line">            UserEntity user = (UserEntity) session.getAttribute(&quot;user&quot;);</span><br><span class="line">            if (user != null) &#123;</span><br><span class="line">                //这里只使用简单的session来存储用户，如果使用了springsecurity可以直接使用principal</span><br><span class="line">                return super.beforeHandshake(request, response, wsHandler, attributes);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                System.out.println(&quot;用户未登录，握手失败！&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception ex) &#123;</span><br><span class="line">        //握手成功后，通常用来注册用户信息</span><br><span class="line">        System.out.println(&quot;握手后&quot;);</span><br><span class="line">        super.afterHandshake(request, response, wsHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpSessionHandshakeInterceptor 这个拦截器用来管理握手和握手后的事情，我们可以通过请求信息，比如token、或者session判用户是否可以连接，这样就能够防范非法用户。</p><p>那如何限制用户只能订阅指定内容呢？我们接着往下看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class MyChannelInterceptor extends ChannelInterceptorAdapter &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StatDao statDao;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preReceive(MessageChannel channel) &#123;</span><br><span class="line">        System.out.println(&quot;preReceive&quot;);</span><br><span class="line">        return super.preReceive(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Message&lt;?&gt; preSend(Message&lt;?&gt; message, MessageChannel channel) &#123;</span><br><span class="line">        StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);</span><br><span class="line">        StompCommand command = accessor.getCommand();</span><br><span class="line">        //检测用户订阅内容（防止用户订阅不合法频道）</span><br><span class="line">        if (StompCommand.SUBSCRIBE.equals(command)) &#123;</span><br><span class="line">            //从数据库获取用户订阅频道进行对比(这里为了演示直接使用set集合代替)</span><br><span class="line">            Set&lt;String&gt; subedChannelInDB = new HashSet&lt;&gt;();</span><br><span class="line">            subedChannelInDB.add(&quot;/topic/group&quot;);</span><br><span class="line">            subedChannelInDB.add(&quot;/topic/online_user&quot;);</span><br><span class="line">            if (subedChannelInDB.contains(accessor.getDestination())) &#123;</span><br><span class="line">                //该用户订阅的频道合法</span><br><span class="line">                return super.preSend(message, channel);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //该用户订阅的频道不合法直接返回null前端用户就接受不到该频道信息。</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return super.preSend(message, channel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void afterSendCompletion(Message&lt;?&gt; message, MessageChannel channel, boolean sent, Exception ex) &#123;</span><br><span class="line">        //System.out.println(&quot;afterSendCompletion&quot;);</span><br><span class="line">        //检测用户是否连接成功，搜集在线的用户信息如果数据量过大我们可以选择使用缓存数据库比如redis,</span><br><span class="line">        //这里由于需要频繁的删除和增加集合内容，我们选择set集合来存储在线用户</span><br><span class="line">        StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);</span><br><span class="line">        StompCommand command = accessor.getCommand();</span><br><span class="line">        if (StompCommand.SUBSCRIBE.equals(command))&#123;</span><br><span class="line">            Map&lt;String,UserEntity&gt; map = (Map&lt;String, UserEntity&gt;) accessor.getHeader(&quot;simpSessionAttributes&quot;);</span><br><span class="line">            //ONLINE_USERS.add(map.get(&quot;user&quot;));</span><br><span class="line">            UserEntity user = map.get(&quot;user&quot;);</span><br><span class="line">            if(user != null)&#123;</span><br><span class="line">                statDao.pushOnlineUser(user);</span><br><span class="line">                Guest guest = new Guest();</span><br><span class="line">                guest.setUserEntity(user);</span><br><span class="line">                guest.setAccessTime(Calendar.getInstance().getTimeInMillis());</span><br><span class="line">                statDao.pushGuestHistory(guest);</span><br><span class="line">                //通过websocket实时返回在线人数</span><br><span class="line">                this.simpMessagingTemplate.convertAndSend(&quot;/topic/online_user&quot;,statDao.getAllUserOnline());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //如果用户断开连接，删除用户信息</span><br><span class="line">        if (StompCommand.DISCONNECT.equals(command))&#123;</span><br><span class="line">            Map&lt;String,UserEntity&gt; map = (Map&lt;String, UserEntity&gt;) accessor.getHeader(&quot;simpSessionAttributes&quot;);</span><br><span class="line">            //ONLINE_USERS.remove(map.get(&quot;user&quot;));</span><br><span class="line">            UserEntity user = map.get(&quot;user&quot;);</span><br><span class="line">            if (user != null)&#123;</span><br><span class="line">                statDao.popOnlineUser(user);</span><br><span class="line">                simpMessagingTemplate.convertAndSend(&quot;/topic/online_user&quot;,statDao.getAllUserOnline());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        super.afterSendCompletion(message, channel, sent, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在stomp里面，Channel信道就是消息传送的通道，客户端与服务端建立了连接就相当于建立了通道，以后的信息就是通过这个通道来传输。所有的消息都有消息头，被封装在了spring 的messag接口中，比如建立连接时候消息头就含有CONNECT,当然还有一些其他的信息。客户端订阅的时候也有订阅头信息SUBSCRIBE，那么我是不是可以在这个拦截器ChannelInterceptorAdapter 中拦截每个人的订阅信息，然后与数据库的信息作比对，最后决定这个用户是否可以订阅这个频道的信息呢，对的，这是我的想法，按照这样的思路，做单聊不是迎刃而解了吗。<br>那客户端通过websocket发送的消息如何到达订阅者手中呢，按照rabbitmq的规则，订阅者属于消费者，发送消息的一方属于生产者，生产者通过websocket把消息发送到服务端，服务端通过转发给消息代理（rabbitmq）,消息代理负责存储消息，管理发送规则，推送消息给订阅者，看下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@MessageMapping(value = &quot;/chat&quot;)</span><br><span class="line">@SendTo(&quot;/topic/group&quot;)</span><br><span class="line">public MsgEntity testWst(String message , @Header(value = &quot;simpSessionAttributes&quot;) Map&lt;String,Object&gt; session)&#123;</span><br><span class="line">    UserEntity user = (UserEntity) session.get(&quot;user&quot;);</span><br><span class="line">    String username = user.getRandomName();</span><br><span class="line">    MsgEntity msg = new MsgEntity();</span><br><span class="line">    msg.setCreator(username);</span><br><span class="line">    msg.setsTime(Calendar.getInstance());</span><br><span class="line">    msg.setMsgBody(message);</span><br><span class="line">    return msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@MessageMapping看起来跟springmvc方法特别像，它即可以用在类级别上也可以用在方法级别上<br>当发送者往‘/chat’发送消息后，服务端接受到消息，再发送给“/topic/group”的订阅者，@SendTo就是发送给谁，这里需要注意的有，如果我们没有配置消息代理，只使用了enableSimpleBroker(“/topic”,”/queue”)简单消息代理，那么就是直接发送到消息订阅者，如果配置了消息代理，那还要通过消息代理，由它来转发。</p><p>如果我们想在服务端随时发送消息，而不是在客户端发送（这样的场景很常见，比如发送全局通知），可以使用SimpMessagingTemplate类，通过注入该bean,在合适的业务场景中发送消息。</p><h2 id="Redis统计数据"><a href="#Redis统计数据" class="headerlink" title="Redis统计数据"></a>Redis统计数据</h2><p>直播间经常需要统计数据，比如实时在线人数，访问量，贡献排行榜，订阅量。我选择的方案是使用redis来计数，尽管这个demo可能不会太多人访问，但是我的目的是学习如何使用redis<br>先看springboot中redis的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RedisConfig extends CachingConfigurerSupport&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 生成key的策略</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public KeyGenerator keyGenerator() &#123;</span><br><span class="line">        return new KeyGenerator() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object generate(Object target, Method method, Object... params) &#123;</span><br><span class="line">                StringBuilder sb = new StringBuilder();</span><br><span class="line">                sb.append(target.getClass().getName());</span><br><span class="line">                sb.append(method.getName());</span><br><span class="line">                for (Object obj : params) &#123;</span><br><span class="line">                    sb.append(obj.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                return sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 管理缓存</span><br><span class="line">     *</span><br><span class="line">     * @param redisTemplate</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">    @Bean</span><br><span class="line">    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;</span><br><span class="line">        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);</span><br><span class="line">        //设置缓存过期时间</span><br><span class="line">        // rcm.setDefaultExpiration(60);//秒</span><br><span class="line">        //设置value的过期时间</span><br><span class="line">        Map&lt;String,Long&gt; map=new HashMap();</span><br><span class="line">        map.put(&quot;test&quot;,60L);</span><br><span class="line">        rcm.setExpires(map);</span><br><span class="line">        return rcm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RedisTemplate配置</span><br><span class="line">     * @param factory</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line">        StringRedisTemplate template = new StringRedisTemplate(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = new ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);//如果key是String 需要配置一下StringSerializer,不然key会乱码 /XX/XX</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        //template.setStringSerializer();</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis数据统计Dao的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class StatDao &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line">    public void pushOnlineUser(UserEntity userEntity)&#123;</span><br><span class="line">        redisTemplate.opsForSet().add(&quot;OnlineUser&quot;,userEntity);</span><br><span class="line">    &#125;</span><br><span class="line">    public void popOnlineUser(UserEntity userEntity)&#123;</span><br><span class="line">        redisTemplate.opsForSet().remove(&quot;OnlineUser&quot; ,userEntity);</span><br><span class="line">    &#125;</span><br><span class="line">    public Set getAllUserOnline()&#123;</span><br><span class="line">        return redisTemplate.opsForSet().members(&quot;OnlineUser&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void pushGuestHistory(Guest guest)&#123;</span><br><span class="line">        //最多存储指定个数的访客</span><br><span class="line">        if (redisTemplate.opsForList().size(&quot;Guest&quot;) == 200l)&#123;</span><br><span class="line">            redisTemplate.opsForList().rightPop(&quot;Guest&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        redisTemplate.opsForList().leftPush(&quot;Guest&quot;,guest);</span><br><span class="line">    &#125;</span><br><span class="line">    public List getGuestHistory()&#123;</span><br><span class="line">        return redisTemplate.opsForList().range(&quot;Guest&quot;,0,-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao层非常简单，因为我们只需要统计在线人数和访客。但是在线人数是实时更新的，既然我们使用了websocket实时数据更新就非常容易了，前面我们讲过，通过信道拦截器可以拦截连接，订阅，断开连接等等事件信息，所以我们就可以当用户连接时存储在线用户，通过websocket返回在线用户信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class MyChannelInterceptor extends ChannelInterceptorAdapter &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StatDao statDao;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preReceive(MessageChannel channel) &#123;</span><br><span class="line">        System.out.println(&quot;preReceive&quot;);</span><br><span class="line">        return super.preReceive(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Message&lt;?&gt; preSend(Message&lt;?&gt; message, MessageChannel channel) &#123;</span><br><span class="line">        StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);</span><br><span class="line">        StompCommand command = accessor.getCommand();</span><br><span class="line">        //检测用户订阅内容（防止用户订阅不合法频道）</span><br><span class="line">        if (StompCommand.SUBSCRIBE.equals(command)) &#123;</span><br><span class="line">            //从数据库获取用户订阅频道进行对比(这里为了演示直接使用set集合代替)</span><br><span class="line">            Set&lt;String&gt; subedChannelInDB = new HashSet&lt;&gt;();</span><br><span class="line">            subedChannelInDB.add(&quot;/topic/group&quot;);</span><br><span class="line">            subedChannelInDB.add(&quot;/topic/online_user&quot;);</span><br><span class="line">            if (subedChannelInDB.contains(accessor.getDestination())) &#123;</span><br><span class="line">                //该用户订阅的频道合法</span><br><span class="line">                return super.preSend(message, channel);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //该用户订阅的频道不合法直接返回null前端用户就接受不到该频道信息。</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return super.preSend(message, channel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void afterSendCompletion(Message&lt;?&gt; message, MessageChannel channel, boolean sent, Exception ex) &#123;</span><br><span class="line">        //System.out.println(&quot;afterSendCompletion&quot;);</span><br><span class="line">        //检测用户是否连接成功，搜集在线的用户信息如果数据量过大我们可以选择使用缓存数据库比如redis,</span><br><span class="line">        //这里由于需要频繁的删除和增加集合内容，我们选择set集合来存储在线用户</span><br><span class="line">        StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);</span><br><span class="line">        StompCommand command = accessor.getCommand();</span><br><span class="line">        if (StompCommand.SUBSCRIBE.equals(command))&#123;</span><br><span class="line">            Map&lt;String,UserEntity&gt; map = (Map&lt;String, UserEntity&gt;) accessor.getHeader(&quot;simpSessionAttributes&quot;);</span><br><span class="line">            //ONLINE_USERS.add(map.get(&quot;user&quot;));</span><br><span class="line">            UserEntity user = map.get(&quot;user&quot;);</span><br><span class="line">            if(user != null)&#123;</span><br><span class="line">                statDao.pushOnlineUser(user);</span><br><span class="line">                Guest guest = new Guest();</span><br><span class="line">                guest.setUserEntity(user);</span><br><span class="line">                guest.setAccessTime(Calendar.getInstance().getTimeInMillis());</span><br><span class="line">                statDao.pushGuestHistory(guest);</span><br><span class="line">                //通过websocket实时返回在线人数</span><br><span class="line">                this.simpMessagingTemplate.convertAndSend(&quot;/topic/online_user&quot;,statDao.getAllUserOnline());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //如果用户断开连接，删除用户信息</span><br><span class="line">        if (StompCommand.DISCONNECT.equals(command))&#123;</span><br><span class="line">            Map&lt;String,UserEntity&gt; map = (Map&lt;String, UserEntity&gt;) accessor.getHeader(&quot;simpSessionAttributes&quot;);</span><br><span class="line">            //ONLINE_USERS.remove(map.get(&quot;user&quot;));</span><br><span class="line">            UserEntity user = map.get(&quot;user&quot;);</span><br><span class="line">            if (user != null)&#123;</span><br><span class="line">                statDao.popOnlineUser(user);</span><br><span class="line">                simpMessagingTemplate.convertAndSend(&quot;/topic/online_user&quot;,statDao.getAllUserOnline());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        super.afterSendCompletion(message, channel, sent, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这个项目有移动端和电脑端，所以需要根据请求代理UserAgent来判断客户端属于哪一种类型。这个工具类在源码上有。我就不贴了。</p><p>#服务器部署<br>说了这么多即时通信，却没发现视频直播。不要着急我们马上进入视频环节。文章开头就说明了几种媒体流协议，这里不讲解详细的协议流程，只需要知道，我们是通过推流软件采集视频信息，如何采集也不是我们关注的。采集到信息后通过软件来推送到指定的服务器，如下图</p><blockquote><p>obs推流设置<br><img src="http://opikkf1o0.bkt.clouddn.com/LiveDemo/picture/rtmpjietu.png" alt="电脑端"><br>yasea手机端推流设置<br><img src="http://opikkf1o0.bkt.clouddn.com/LiveDemo/picture/Screenshot_2017-06-22-14-31-03-813_Yasea.png" alt="电脑端">        </p></blockquote><p>红色部分是服务器开放的获取流接口。</p><p>##Nginx-rtmp-module配置<br>视频服务器有很多，也支持很多媒体流协议。这里我们选择nginx-rtmp-module来做视频服务，接下来我们需要在linux下安装nginx,并安装rtmp模块。本人也是linux初学者，一步步摸索着把服务器搭建好，听说tomcat和nginx很配哦，所以作为免费开源的当然首选这两个。<br>接下来需要在linux安装一下软件和服务。</p><ol><li>Nginx以及Nginx-rtmp-module</li><li>Tomcat</li><li>Mysql</li><li>Redis</li><li>RabbitMQ        </li></ol><p>安装步骤我就不说了，大家搜索一下啦，这里贴一下nginx.conf文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        chunk_size 4096;</span><br><span class="line"></span><br><span class="line">        application video &#123;</span><br><span class="line">                play /yjdata/www/www/video;</span><br><span class="line">        &#125;</span><br><span class="line">        application live &#123;</span><br><span class="line">                live on;</span><br><span class="line">                hls on;</span><br><span class="line">                hls_path /yjdata/www/www/live/hls/;</span><br><span class="line">                hls_fragment 5s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码是配置rtmp模块, play /yjdata/www/www/video 指的是配置点播模块，可以直接播放/yjdata/www/www/video路径下的视频。hls_path制定hls分块存放路径，因为hls是通过获取到推送的视频流信息，分块存储在服务器。所以它的延时比rtmp要更高。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line">       index index.jsp index.html;</span><br><span class="line">       root /yjdata/www/www;</span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass  http://127.0.0.1:8080;</span><br><span class="line">       &#125;</span><br><span class="line">       location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|js|css|docx|pdf|doc|ppt|html|properties)$ &#123;</span><br><span class="line">               expires 30d;</span><br><span class="line">               root /yjdata/www/www/static/;</span><br><span class="line">       &#125;</span><br><span class="line">       location /hls &#123;</span><br><span class="line">           types &#123;</span><br><span class="line">               application/vnd.apple.mpegurl m3u8;</span><br><span class="line">               #application/x-mpegURL;</span><br><span class="line">               video/mp2t ts;</span><br><span class="line">           &#125;</span><br><span class="line">           alias /yjdata/www/www/live/hls/;</span><br><span class="line">           expires -1;</span><br><span class="line">           add_header Cache-Control no-cache;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /stat &#123;</span><br><span class="line">                rtmp_stat all;</span><br><span class="line">                rtmp_stat_stylesheet stat.xsl;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /stat.xsl &#123;</span><br><span class="line">               root /soft/nginx/nginx-rtmp-module/;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>上面配置了location 指向/hls,别名是/yjdata/www/www/live/hls/，所以可以在前端直接通过域名+/hls/+文件名.m3u8获取直播视频。<br>关于nginx的配置还有很多，我也在学习当中。总而言之nginx非常强大。</p><p>#总结<br>通过从前端=&gt;后台=&gt;服务器，整个流程走下来还是需要花很多心思。但是收获也是很多。本人将从大学出来，初出茅庐,文章错误之处，尽请指正。本人邮箱<a href="mailto:979783618@qq.com" target="_blank" rel="noopener">979783618@qq.com</a><br>[1]: /img/bVPDP5<br>  [2]: /img/bVPDQd<br>  [3]: /img/bVPDYu<br>  [4]: /img/bVPDZo<br>  [5]: /img/bVPDZ1</p>]]></content>
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
